// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Profile7ClassLibrary;

namespace Profile7ClassLibrary.Migrations.ProfileDBData
{
    [DbContext(typeof(ProfileDBContext))]
    [Migration("20180814161626_CustomFormDef")]
    partial class huapiGetAllCustomForms
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Profile7ClassLibrary.Models.CustomFormDef", b =>
                {
                    b.Property<long>("OID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Description");

                    b.Property<long>("Version");

                    b.HasKey("OID");

                    b.ToTable("CustomFormDef");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionAlertFolders", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FolderName")
                        .HasColumnName("FOLDER_NAME")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ParentNode")
                        .HasColumnName("PARENT_NODE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACCESSION_ALERT_FOL");

                    b.HasIndex("ParentNode")
                        .HasName("ACC_ALERT_FOLDERS_SELF_FK");

                    b.ToTable("ACCESSION_ALERT_FOLDERS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionAlerts", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AclExplanation")
                        .HasColumnName("ACL_EXPLANATION")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<byte[]>("AclExplanationMacro")
                        .HasColumnName("ACL_EXPLANATION_MACRO")
                        .HasColumnType("image");

                    b.Property<long?>("AclFirstgroup")
                        .HasColumnName("ACL_FIRSTGROUP");

                    b.Property<long?>("AclIcon")
                        .HasColumnName("ACL_ICON");

                    b.Property<byte[]>("AclMacro")
                        .HasColumnName("ACL_MACRO")
                        .HasColumnType("image");

                    b.Property<string>("AclName")
                        .HasColumnName("ACL_NAME")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("AclSecondgroup")
                        .HasColumnName("ACL_SECONDGROUP");

                    b.Property<string>("AclUrl")
                        .HasColumnName("ACL_URL")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FolderNode")
                        .HasColumnName("FOLDER_NODE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AclFirstgroup")
                        .HasName("FK_ACCESSION_ALERTS_FIRST");

                    b.HasIndex("AclSecondgroup")
                        .HasName("FK_ACCESSION_ALERTS_SECOND");

                    b.HasIndex("FolderNode")
                        .HasName("FK_ACCESSION_ALERTS_FOLDER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACCESSION_ALERTS");

                    b.ToTable("ACCESSION_ALERTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionSignOn", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Billingdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BILLINGDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('30-DEC-1899')");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Enddate")
                        .HasColumnName("ENDDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("Endedby")
                        .HasColumnName("ENDEDBY");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("Startdate")
                        .HasColumnName("STARTDATE")
                        .HasColumnType("datetime");

                    b.Property<long>("Startedby")
                        .HasColumnName("STARTEDBY");

                    b.HasKey("Oid");

                    b.HasIndex("Endedby")
                        .HasName("FK_ACC_SIGNON_ENDEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACCESSION_SIGN_ON");

                    b.HasIndex("PatientId")
                        .HasName("FK_ACC_SIGNON_PAT");

                    b.HasIndex("Startedby")
                        .HasName("FK_ACC_SIGNON_STARTEDBY");

                    b.ToTable("ACCESSION_SIGN_ON");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionText", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AtxtCode")
                        .IsRequired()
                        .HasColumnName("ATXT_CODE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("AtxtDescription")
                        .HasColumnName("ATXT_DESCRIPTION")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long>("AtxtProduct")
                        .HasColumnName("ATXT_PRODUCT");

                    b.Property<long>("AtxtText")
                        .HasColumnName("ATXT_TEXT");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AtxtText")
                        .HasName("ACCESSION_TEXT_FK_TEXT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACCESSION_TEXT");

                    b.ToTable("ACCESSION_TEXT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionTextPatient", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("AtpPtntId")
                        .HasColumnName("ATP_PTNT_ID");

                    b.Property<long?>("AtpResponse")
                        .HasColumnName("ATP_RESPONSE");

                    b.Property<DateTime?>("AtpResponseOn")
                        .HasColumnName("ATP_RESPONSE_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("AtpTemplate")
                        .HasColumnName("ATP_TEMPLATE");

                    b.Property<long>("AtpText")
                        .HasColumnName("ATP_TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("AtpPtntId")
                        .HasName("ACCESSION_TEXT_P_FK_PTNT_ID");

                    b.HasIndex("AtpTemplate")
                        .HasName("ACCESSION_TEXT_P_FK_TEMPLATE");

                    b.HasIndex("AtpText")
                        .HasName("ACCESSION_TEXT_P_FK_BLOB");

                    b.HasIndex("Createdby")
                        .HasName("ACC_TEXT_PTNT_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("ACC_TEXT_PTNT_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("ACC_TEXT_PTNT_FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACCESSION_TEXT_PATI");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("ACC_TEXT_PTNT_I_MASTERVERS");

                    b.HasIndex("AtpPtntId", "AtpTemplate", "Deleted")
                        .IsUnique()
                        .HasName("ATPTNT_UI_PATIENT_TEMPLATE");

                    b.ToTable("ACCESSION_TEXT_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionTextPppu", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("AtppPppuId")
                        .HasColumnName("ATPP_PPPU_ID");

                    b.Property<long?>("AtppResponse")
                        .HasColumnName("ATPP_RESPONSE");

                    b.Property<DateTime?>("AtppResponseOn")
                        .HasColumnName("ATPP_RESPONSE_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("AtppTemplate")
                        .HasColumnName("ATPP_TEMPLATE");

                    b.Property<long>("AtppText")
                        .HasColumnName("ATPP_TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("AtppPppuId")
                        .HasName("ACSN_TEXT_PPPU_FK_PTNT_ID");

                    b.HasIndex("AtppTemplate")
                        .HasName("ACSN_TEXT_PPPU_FK_TEMPLATE");

                    b.HasIndex("AtppText")
                        .HasName("ACSN_TEXT_PPPU_FK_BLOB");

                    b.HasIndex("Createdby")
                        .HasName("ACC_TEXT_PPPU_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("ACC_TEXT_PPPU_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("ACC_TEXT_PPPU_FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACCESSION_TEXT_PPPU");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("ACC_TEXT_PPPU_I_MASTERVERS");

                    b.HasIndex("AtppPppuId", "AtppTemplate", "Deleted")
                        .IsUnique()
                        .HasName("ATPPPU_UI_PPPU_TEMPLATE");

                    b.ToTable("ACCESSION_TEXT_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccFormFilter", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("AllProfiles")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALL_PROFILES")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FormId")
                        .HasColumnName("FORM_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientGroupId")
                        .HasColumnName("PATIENT_GROUP_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FormId")
                        .HasName("FK_ACC_FORM_FILTER_FORM");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACC_FORM_FILTER");

                    b.HasIndex("PatientGroupId")
                        .HasName("FK_ACC_FORM_FILTER_GROUP");

                    b.ToTable("ACC_FORM_FILTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccFormProfile", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FormFilterId")
                        .HasColumnName("FORM_FILTER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ProfileId")
                        .HasColumnName("PROFILE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FormFilterId")
                        .HasName("FK_ACC_FORM_PROFILE_FILTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACC_FORM_PROFILE");

                    b.HasIndex("ProfileId")
                        .HasName("FK_ACC_FORM_PROFILE_PROFILE");

                    b.ToTable("ACC_FORM_PROFILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccProfile", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Changed")
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime");

                    b.Property<long>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientGroup")
                        .HasColumnName("PATIENT_GROUP");

                    b.Property<byte[]>("Prefs")
                        .HasColumnName("PREFS")
                        .HasColumnType("image");

                    b.Property<string>("Prfname")
                        .IsRequired()
                        .HasColumnName("PRFNAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACC_PROFILE");

                    b.HasIndex("PatientGroup")
                        .HasName("FK_ACC_PROFILE_PATIENT_GROUP");

                    b.ToTable("ACC_PROFILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccProfileForApptRule", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("AprAccProfileOid")
                        .HasColumnName("APR_ACC_PROFILE_OID");

                    b.Property<long>("AprApptRuleOid")
                        .HasColumnName("APR_APPT_RULE_OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AprAccProfileOid")
                        .HasName("FK_ACC_FOR_APPT_RULE_2");

                    b.HasIndex("AprApptRuleOid")
                        .HasName("FK_ACC_FOR_APPT_RULE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACC_PROFILE_FOR_APP");

                    b.HasIndex("AprApptRuleOid", "AprAccProfileOid")
                        .IsUnique()
                        .HasName("UNQ_ACC_PROFILE_FOR_APPT_RULE");

                    b.ToTable("ACC_PROFILE_FOR_APPT_RULE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccProfileRoles", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ProfileId")
                        .HasColumnName("PROFILE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACC_PROFILE_ROLES");

                    b.HasIndex("ProfileId")
                        .HasName("FK_ACC_PROFILE_ROLES_PROFILE");

                    b.HasIndex("RoleId")
                        .HasName("FK_ACC_PROFILE_ROLES_ROLE");

                    b.ToTable("ACC_PROFILE_ROLES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Activities", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ActApptId")
                        .HasColumnName("ACT_APPT_ID");

                    b.Property<string>("ActComment")
                        .HasColumnName("ACT_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime>("ActCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ACT_CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ActCreatedby")
                        .HasColumnName("ACT_CREATEDBY");

                    b.Property<DateTime?>("ActDate")
                        .HasColumnName("ACT_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("ActPatient")
                        .HasColumnName("ACT_PATIENT");

                    b.Property<long>("ActType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ACT_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ActApptId")
                        .HasName("ACT_APPOINTMENT_ID_FK");

                    b.HasIndex("ActPatient")
                        .HasName("FK_ACT_PATIENT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ACTIVITIES");

                    b.ToTable("ACTIVITIES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Address", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("AddressType")
                        .HasColumnName("ADDRESS_TYPE");

                    b.Property<string>("Building")
                        .HasColumnName("BUILDING")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Cellphone")
                        .HasColumnName("CELLPHONE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnName("CITY")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnName("COMMENTS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("Country")
                        .HasColumnName("COUNTRY");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("DATE_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<string>("Decile")
                        .HasColumnName("DECILE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Direction")
                        .HasColumnName("DIRECTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DomicileCode")
                        .HasColumnName("DOMICILE_CODE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DomicileDescription")
                        .HasColumnName("DOMICILE_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasColumnName("FAX")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("GeoCoordX")
                        .HasColumnName("GEO_COORD_X")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("GeoCoordY")
                        .HasColumnName("GEO_COORD_Y")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("GeoDhb")
                        .HasColumnName("GEO_DHB")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<double?>("GeoLatitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GEO_LATITUDE")
                        .HasDefaultValueSql("((90))");

                    b.Property<double?>("GeoLongitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GEO_LONGITUDE")
                        .HasDefaultValueSql("((90))");

                    b.Property<long>("GeoStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GEO_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("GeoUncertaintycode")
                        .HasColumnName("GEO_UNCERTAINTYCODE")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<short>("Isinactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISINACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Meshblock")
                        .HasColumnName("MESHBLOCK")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("NokRelationship")
                        .HasColumnName("NOK_RELATIONSHIP");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("Postalstate")
                        .HasColumnName("POSTALSTATE");

                    b.Property<string>("Postcode")
                        .HasColumnName("POSTCODE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("Quintile")
                        .HasColumnName("QUINTILE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Sourceref")
                        .HasColumnName("SOURCEREF")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Street")
                        .HasColumnName("STREET")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Suburb")
                        .HasColumnName("SUBURB")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("TlaName")
                        .HasColumnName("TLA_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Workphone")
                        .HasColumnName("WORKPHONE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AddressType")
                        .HasName("ADDRESS_TYPE_FK_SHORTCODE");

                    b.HasIndex("ModifiedBy")
                        .HasName("FK_ADDRESS_PPPU_MODIFIED_BY");

                    b.HasIndex("NokRelationship")
                        .HasName("ADDRESS_FK_RELATIONSHIP");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ADDRESS");

                    b.HasIndex("Postalstate")
                        .HasName("ADDRESS_FK_POSTALSTATE");

                    b.HasIndex("PtntId")
                        .HasName("ADDRESS_PTNT_FK_PATIENT");

                    b.ToTable("ADDRESS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AddressPartition", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Building")
                        .HasColumnName("BUILDING")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnName("CITY")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("Country")
                        .HasColumnName("COUNTRY");

                    b.Property<string>("Decile")
                        .HasColumnName("DECILE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<string>("DomicileCode")
                        .HasColumnName("DOMICILE_CODE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DomicileDescription")
                        .HasColumnName("DOMICILE_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GeoCoordX")
                        .HasColumnName("GEO_COORD_X")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("GeoCoordY")
                        .HasColumnName("GEO_COORD_Y")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("GeoDhb")
                        .HasColumnName("GEO_DHB")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<double?>("GeoLatitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GEO_LATITUDE")
                        .HasDefaultValueSql("((90))");

                    b.Property<double?>("GeoLongitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GEO_LONGITUDE")
                        .HasDefaultValueSql("((90))");

                    b.Property<long>("GeoStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GEO_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("GeoUncertaintycode")
                        .HasColumnName("GEO_UNCERTAINTYCODE")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Meshblock")
                        .HasColumnName("MESHBLOCK")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Postalstate")
                        .HasColumnName("POSTALSTATE");

                    b.Property<string>("Postcode")
                        .HasColumnName("POSTCODE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("Quintile")
                        .HasColumnName("QUINTILE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Street")
                        .HasColumnName("STREET")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Suburb")
                        .HasColumnName("SUBURB")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("TlaName")
                        .HasColumnName("TLA_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ADDRESS_PARTITION");

                    b.HasIndex("Postalstate")
                        .HasName("ADDR_PART_FK_POSTALSTATE");

                    b.ToTable("ADDRESS_PARTITION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Ads", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AdsBrand")
                        .HasColumnName("ADS_BRAND")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("AdsImageId")
                        .HasColumnName("ADS_IMAGE_ID");

                    b.Property<long?>("AdsPdfId")
                        .HasColumnName("ADS_PDF_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AdsImageId")
                        .HasName("IMAGE_FK_BLOBS");

                    b.HasIndex("AdsPdfId")
                        .HasName("PDF_FK_BLOBS");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ADS");

                    b.ToTable("ADS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Alias", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AlisCode")
                        .IsRequired()
                        .HasColumnName("ALIS_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long>("ColourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COLOUR_ID")
                        .HasDefaultValueSql("((50331647))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJECT_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ObjectType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJECT_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ALIAS");

                    b.HasIndex("ObjectType")
                        .HasName("ALIAS_I_OBJECT_TYPE");

                    b.HasIndex("AlisCode", "PartitionId")
                        .IsUnique()
                        .HasName("ALIAS_I_CODE");

                    b.HasIndex("ObjectId", "ObjectType")
                        .IsUnique()
                        .HasName("ALIAS_I_OBJECT_ID_TYPE");

                    b.ToTable("ALIAS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppExtSearchCriterion", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AppRule")
                        .HasColumnName("APP_RULE");

                    b.Property<long>("CriterionType")
                        .HasColumnName("CRITERION_TYPE");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DURATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("FindObject")
                        .HasColumnName("FIND_OBJECT");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrimaryCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRIMARY_CATEGORY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrimaryConditions")
                        .HasColumnName("PRIMARY_CONDITIONS");

                    b.Property<long?>("PrimaryDurationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRIMARY_DURATION_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrimarySpecialty")
                        .HasColumnName("PRIMARY_SPECIALTY");

                    b.Property<long?>("PrimaryType")
                        .HasColumnName("PRIMARY_TYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SecondaryGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SECONDARY_GROUP")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("SecondaryResource")
                        .HasColumnName("SECONDARY_RESOURCE");

                    b.Property<long?>("SecondaryType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SECONDARY_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Shift")
                        .HasColumnName("SHIFT");

                    b.Property<long?>("Template")
                        .HasColumnName("TEMPLATE");

                    b.HasKey("Oid");

                    b.HasIndex("AppRule")
                        .HasName("FK_APP_EXT_RULE");

                    b.HasIndex("FindObject")
                        .HasName("FK_APP_EXT_FIND_OBJECT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APP_EXT_SEARCH_CRIT");

                    b.HasIndex("PrimaryConditions")
                        .HasName("FK_APP_EXT_SEARCH_PRM_CNDNS");

                    b.HasIndex("PrimarySpecialty")
                        .HasName("FK_APP_EXT_SEARCH_PRM_SPLTY");

                    b.HasIndex("PrimaryType")
                        .HasName("FK_APP_EXT_SEARCH_PRM_TYPE");

                    b.HasIndex("SecondaryGroup")
                        .HasName("FK_APP_EXT_SEARCH_SEC_GROUP");

                    b.HasIndex("SecondaryResource")
                        .HasName("FK_APP_EXT_SECONDARY");

                    b.HasIndex("Template")
                        .HasName("FK_APP_EXT_TEMPLATE");

                    b.ToTable("APP_EXT_SEARCH_CRITERION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppExtSearchTemplate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OverrideDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OVERRIDE_DURATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("OverrideType")
                        .HasColumnName("OVERRIDE_TYPE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APP_EXT_SEARCH_TEMP");

                    b.HasIndex("OverrideType")
                        .HasName("FK_APP_EXT_OVERRIDE_TYPE");

                    b.ToTable("APP_EXT_SEARCH_TEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppFrontDeskNote", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("NoteText")
                        .HasColumnName("NOTE_TEXT")
                        .HasColumnType("image");

                    b.Property<short>("NoteVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NOTE_VISIBLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APP_FRONT_DESK_NOTE");

                    b.ToTable("APP_FRONT_DESK_NOTE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppliedCareplan", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CareplanId")
                        .HasColumnName("CAREPLAN_ID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("ReasonId")
                        .HasColumnName("REASON_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Oid");

                    b.HasIndex("CareplanId")
                        .HasName("FK_APPLIED_CPLAN_ID");

                    b.HasIndex("CaseId")
                        .HasName("FK_APPLIED_CPLAN_CASE_ID");

                    b.HasIndex("CreatedBy")
                        .HasName("FK_APPLIED_CPLAN_CREATED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APPLIED_CAREPLAN");

                    b.HasIndex("PatientId")
                        .HasName("FK_APPLIED_CPLAN_PTNT_ID");

                    b.HasIndex("ReasonId")
                        .HasName("FK_APPLIED_CPLAN_REASON_ID");

                    b.ToTable("APPLIED_CAREPLAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppLocHistory", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Appointment")
                        .HasColumnName("APPOINTMENT");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Location")
                        .HasColumnName("LOCATION");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Pppu")
                        .HasColumnName("PPPU");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Appointment")
                        .HasName("APP_LOC_HISTORY_FK_APPOINTME");

                    b.HasIndex("Location")
                        .HasName("APP_LOC_HISTORY_FK_LOCATION");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APP_LOC_HISTORY");

                    b.HasIndex("Pppu")
                        .HasName("APP_LOC_HISTORY_FK_PPPU");

                    b.ToTable("APP_LOC_HISTORY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppOccurences", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OccurenceAppt")
                        .HasColumnName("OCCURENCE_APPT");

                    b.Property<DateTime?>("OccurenceDate")
                        .HasColumnName("OCCURENCE_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RecurrenceOid")
                        .HasColumnName("RECURRENCE_OID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APP_OCCURENCES");

                    b.HasIndex("OccurenceAppt")
                        .HasName("APP_OCCURENCES_FK_APNT");

                    b.HasIndex("RecurrenceOid")
                        .HasName("APP_OCCURENCES_FK_RECURR");

                    b.ToTable("APP_OCCURENCES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Appointment", b =>
                {
                    b.Property<long>("ApntId")
                        .HasColumnName("APNT_ID");

                    b.Property<short>("ApntAcknowledged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_ACKNOWLEDGED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApntAnonymous")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_ANONYMOUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ApntArrivaltime")
                        .HasColumnName("APNT_ARRIVALTIME")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ApntBooktime")
                        .HasColumnName("APNT_BOOKTIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApntCancellationReason")
                        .HasColumnName("APNT_CANCELLATION_REASON");

                    b.Property<long?>("ApntCaseId")
                        .HasColumnName("APNT_CASE_ID");

                    b.Property<string>("ApntComment")
                        .HasColumnName("APNT_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ApntConfirmtime")
                        .HasColumnName("APNT_CONFIRMTIME")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ApntConsultDuration")
                        .HasColumnName("APNT_CONSULT_DURATION")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ApntCreatedOn")
                        .HasColumnName("APNT_CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ApntDischargetime")
                        .HasColumnName("APNT_DISCHARGETIME")
                        .HasColumnType("datetime");

                    b.Property<long>("ApntDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_DURATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ApntEndtime")
                        .HasColumnName("APNT_ENDTIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApntFlags")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_FLAGS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ApntFrontDeskNoteId")
                        .HasColumnName("APNT_FRONT_DESK_NOTE_ID");

                    b.Property<long?>("ApntGroup")
                        .HasColumnName("APNT_GROUP");

                    b.Property<short>("ApntInternallyInitiated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_INTERNALLY_INITIATED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ApntInvoicetime")
                        .HasColumnName("APNT_INVOICETIME")
                        .HasColumnType("datetime");

                    b.Property<short>("ApntIsManuallyClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_IS_MANUALLY_CLOSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApntIsMeeting")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_IS_MEETING")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApntIsNotified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_IS_NOTIFIED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApntIscancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_ISCANCELLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApntIsclosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_ISCLOSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApntIsdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_ISDELETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApntIsdna")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_ISDNA")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApntIslocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_ISLOCKED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApntIsreschedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_ISRESCHEDULE")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("ApntKm")
                        .HasColumnName("APNT_KM");

                    b.Property<string>("ApntLastNotificationRslt")
                        .HasColumnName("APNT_LAST_NOTIFICATION_RSLT")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<short>("ApntLetter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_LETTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ApntLocationAddressId")
                        .HasColumnName("APNT_LOCATION_ADDRESS_ID");

                    b.Property<long?>("ApntLocationType")
                        .HasColumnName("APNT_LOCATION_TYPE");

                    b.Property<long?>("ApntMainApptId")
                        .HasColumnName("APNT_MAIN_APPT_ID");

                    b.Property<long?>("ApntMeetingLimit")
                        .HasColumnName("APNT_MEETING_LIMIT");

                    b.Property<short>("ApntNeedconfirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_NEEDCONFIRMATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ApntPendingInvoice")
                        .HasColumnName("APNT_PENDING_INVOICE")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApntPrappovId")
                        .HasColumnName("APNT_PRAPPOV_ID");

                    b.Property<long?>("ApntPrvsId")
                        .HasColumnName("APNT_PRVS_ID");

                    b.Property<string>("ApntReasondescription")
                        .HasColumnName("APNT_REASONDESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("ApntRecurrency")
                        .HasColumnName("APNT_RECURRENCY");

                    b.Property<long?>("ApntReferralId")
                        .HasColumnName("APNT_REFERRAL_ID");

                    b.Property<long?>("ApntSeenDuration")
                        .HasColumnName("APNT_SEEN_DURATION");

                    b.Property<DateTime?>("ApntSeentime")
                        .HasColumnName("APNT_SEENTIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApntSessionId")
                        .HasColumnName("APNT_SESSION_ID");

                    b.Property<string>("ApntSourceref")
                        .HasColumnName("APNT_SOURCEREF")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("ApntStatus")
                        .HasColumnName("APNT_STATUS");

                    b.Property<short>("ApntUnbooked")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APNT_UNBOOKED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ApntVersion")
                        .HasColumnName("APNT_VERSION");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EarlierRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EARLIER_REQUEST")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Modifiedby")
                        .HasColumnName("MODIFIEDBY");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuIdPos")
                        .HasColumnName("PPPU_ID_POS");

                    b.Property<long?>("PppuIdProvider")
                        .HasColumnName("PPPU_ID_PROVIDER");

                    b.Property<long?>("PppuIdSeenby")
                        .HasColumnName("PPPU_ID_SEENBY");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<long?>("ShcdIdLocation")
                        .HasColumnName("SHCD_ID_LOCATION");

                    b.Property<long?>("ShcdIdPaycode")
                        .HasColumnName("SHCD_ID_PAYCODE");

                    b.Property<long?>("ShcdIdPriority")
                        .HasColumnName("SHCD_ID_PRIORITY");

                    b.Property<long?>("ShcdIdType")
                        .HasColumnName("SHCD_ID_TYPE");

                    b.Property<long?>("SrvcIdReason")
                        .HasColumnName("SRVC_ID_REASON");

                    b.HasKey("ApntId");

                    b.HasIndex("ApntBooktime")
                        .HasName("APPOINTMENT_I_APNT_BOOKTIME");

                    b.HasIndex("ApntCancellationReason")
                        .HasName("APNT_FK_CANCELLATION_REASON");

                    b.HasIndex("ApntCaseId")
                        .HasName("APPOINTMENT_FK_APNT_CASE_ID");

                    b.HasIndex("ApntEndtime")
                        .HasName("APPOINTMENT_I_APNT_ENDTIME");

                    b.HasIndex("ApntFrontDeskNoteId")
                        .HasName("FK_APPOINTMENT_FDNOTE");

                    b.HasIndex("ApntGroup")
                        .HasName("APPOINTMENT_FK_GROUP");

                    b.HasIndex("ApntIsclosed")
                        .HasName("APPOINTMENT_I_APNT_ISCLOSED");

                    b.HasIndex("ApntLocationAddressId")
                        .HasName("FK_APNT_LOCATION_ADDRESS_ID");

                    b.HasIndex("ApntMainApptId")
                        .HasName("FK_APNT_MAIN_APPT_ID");

                    b.HasIndex("ApntPrappovId")
                        .HasName("APPOINTMENT_FK_APNT_PRAPPOV_");

                    b.HasIndex("ApntPrvsId")
                        .HasName("APNT_PRVS_FK_PRVS");

                    b.HasIndex("ApntRecurrency")
                        .HasName("APPOINTMENT_FK_APNT_RECURREN");

                    b.HasIndex("ApntReferralId")
                        .HasName("APPOINTMENT_FK_APNT_REFERRAL");

                    b.HasIndex("ApntSeentime")
                        .HasName("APPOINTMENT_I_APNT_SEENTIME");

                    b.HasIndex("ApntSessionId")
                        .HasName("APPOINTMENT_FK_SESSION_ID");

                    b.HasIndex("ApntSourceref")
                        .HasName("APPOINTMENT_I_SOURCEREF");

                    b.HasIndex("ApntStatus")
                        .HasName("APPOINTMENT_I_STATUS");

                    b.HasIndex("Createdby")
                        .HasName("FK_APPT_CREATEDBY_PPPU");

                    b.HasIndex("Modifiedby")
                        .HasName("FK_APPT_MODIFIEDBY_PPPU");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APPOINTMENT");

                    b.HasIndex("PppuIdPos")
                        .HasName("APPOINTMENT_FK_POS");

                    b.HasIndex("PppuIdProvider")
                        .HasName("APPOINTMENT_FK_PROVIDER");

                    b.HasIndex("PppuIdSeenby")
                        .HasName("APNT_FK_PPPU_SEENBY");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("APPOINTMENT_FK_PPPU");

                    b.HasIndex("PtntId")
                        .HasName("APPOINTMENT_FK_PTNT_ID");

                    b.HasIndex("RoleId")
                        .HasName("FK_APPOINTMENT_ROLE_ID");

                    b.HasIndex("ShcdIdLocation")
                        .HasName("APNT_FK_PPPU_LOCATION");

                    b.HasIndex("ShcdIdPaycode")
                        .HasName("APPOINTMENT_FK_SHCD_ID_PAYCO");

                    b.HasIndex("ShcdIdPriority")
                        .HasName("APNT_FK_PPPU_PRIORITY");

                    b.HasIndex("ShcdIdType")
                        .HasName("APNT_FOREIGN_SHORTCODE");

                    b.HasIndex("SrvcIdReason")
                        .HasName("APPOINTMENT_FK_REASON");

                    b.ToTable("APPOINTMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Appointmentaudit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("ApadBooktime")
                        .HasColumnName("APAD_BOOKTIME")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ApadDatetime")
                        .HasColumnName("APAD_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("ApadDescription")
                        .HasColumnName("APAD_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("ApadDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APAD_DURATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ApadIsappointmentdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APAD_ISAPPOINTMENTDELETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ApntId")
                        .HasColumnName("APNT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuIdUser")
                        .HasColumnName("PPPU_ID_USER");

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ApntId")
                        .HasName("APPOINTMENTAUDIT_FK_APNT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APPOINTMENTAUDIT");

                    b.HasIndex("PppuIdUser")
                        .HasName("APAD_USER");

                    b.HasIndex("PtntId")
                        .HasName("APPOINTMENTAUDIT_FK_PTNT_ID");

                    b.ToTable("APPOINTMENTAUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppointmentRules", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("DefReasonDesc")
                        .HasColumnName("DEF_REASON_DESC")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("DefReasonId")
                        .HasColumnName("DEF_REASON_ID");

                    b.Property<long?>("DefType")
                        .HasColumnName("DEF_TYPE");

                    b.Property<long?>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Duration")
                        .HasColumnName("DURATION");

                    b.Property<byte[]>("Macro")
                        .HasColumnName("MACRO")
                        .HasColumnType("image");

                    b.Property<long?>("MeetingLimit")
                        .HasColumnName("MEETING_LIMIT");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientHelpInfo")
                        .HasColumnName("PATIENT_HELP_INFO");

                    b.Property<long?>("Pos")
                        .HasColumnName("POS");

                    b.Property<long?>("Provider")
                        .HasColumnName("PROVIDER");

                    b.Property<long?>("ProviderHelpInfo")
                        .HasColumnName("PROVIDER_HELP_INFO");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("RuleAllowcover")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RULE_ALLOWCOVER")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("RuleCycle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RULE_CYCLE")
                        .HasColumnType("char(4)")
                        .HasDefaultValueSql("('')");

                    b.Property<byte[]>("RuleDays")
                        .HasColumnName("RULE_DAYS")
                        .HasColumnType("image");

                    b.Property<short>("RuleDouble")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RULE_DOUBLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("RuleFinish")
                        .HasColumnName("RULE_FINISH")
                        .HasColumnType("datetime");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnName("RULE_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("RulePeriod")
                        .HasColumnName("RULE_PERIOD");

                    b.Property<long>("RulePermitaccession")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RULE_PERMITACCESSION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RulePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RULE_PRIORITY")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("RuleStart")
                        .HasColumnName("RULE_START")
                        .HasColumnType("datetime");

                    b.Property<long?>("SkipMinutes")
                        .HasColumnName("SKIP_MINUTES");

                    b.Property<long?>("TempColor")
                        .HasColumnName("TEMP_COLOR");

                    b.Property<long?>("TempCommonType")
                        .HasColumnName("TEMP_COMMON_TYPE");

                    b.Property<long?>("TempDay")
                        .HasColumnName("TEMP_DAY");

                    b.Property<long?>("TempGroupid")
                        .HasColumnName("TEMP_GROUPID");

                    b.Property<long?>("TempStatus")
                        .HasColumnName("TEMP_STATUS");

                    b.Property<byte[]>("TempTimes")
                        .HasColumnName("TEMP_TIMES")
                        .HasColumnType("image");

                    b.Property<DateTime>("TimeFinish")
                        .HasColumnName("TIME_FINISH")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnName("TIME_START")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("DefReasonId")
                        .HasName("FK_APRL_SRVC");

                    b.HasIndex("DefType")
                        .HasName("FK_APRL_SHCD");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APPOINTMENT_RULES");

                    b.HasIndex("PatientHelpInfo")
                        .HasName("FK_APPTRL_PTNT_HELP_INFO");

                    b.HasIndex("Pos")
                        .HasName("FK_APRL_POS_PPPU");

                    b.HasIndex("Provider")
                        .HasName("FK_APRL_PROV_PPPU");

                    b.HasIndex("ProviderHelpInfo")
                        .HasName("FK_APPTRL_PROV_HELP_INFO");

                    b.HasIndex("RuleFinish")
                        .HasName("APPT_RULES_I_RULE_FINISH");

                    b.HasIndex("RulePriority")
                        .HasName("APRL_PRIORITY");

                    b.HasIndex("RuleStart")
                        .HasName("APPT_RULES_I_RULE_START");

                    b.HasIndex("TempCommonType")
                        .HasName("APNT_RULES_FK_TYPE");

                    b.HasIndex("TempGroupid")
                        .HasName("FK_APNT_RULES_PROV_GROUP");

                    b.ToTable("APPOINTMENT_RULES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppointmentSlotsFo", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AccessKey")
                        .HasColumnName("ACCESS_KEY")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<DateTime?>("BookTime")
                        .HasColumnName("BOOK_TIME")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Duration")
                        .HasColumnName("DURATION");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RulePermitaccession")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RULE_PERMITACCESSION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ShcdIdType")
                        .HasColumnName("SHCD_ID_TYPE");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APPOINTMENT_SLOTS_F");

                    b.HasIndex("PosId")
                        .HasName("FK_APP_SLOTS_FO_POS");

                    b.HasIndex("PppuId")
                        .HasName("FK_APP_SLOTS_FO_PPPU");

                    b.ToTable("APPOINTMENT_SLOTS_FO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppointmentState", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("ApntId")
                        .HasColumnName("APNT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Invoicetime")
                        .HasColumnName("INVOICETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SeenTime")
                        .HasColumnName("SEEN_TIME")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("ApntId")
                        .HasName("APPOINTMENT_STATE_FK_APNT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APPOINTMENT_STATE");

                    b.HasIndex("PppuId")
                        .HasName("APPOINTMENT_STATE_FK_PPPU_ID");

                    b.ToTable("APPOINTMENT_STATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppointmentTemplateApplied", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AtaCaption")
                        .IsRequired()
                        .HasColumnName("ATA_CAPTION")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime>("AtaDate")
                        .HasColumnName("ATA_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("AtaGroupId")
                        .HasColumnName("ATA_GROUP_ID");

                    b.Property<long>("AtaPppuId")
                        .HasColumnName("ATA_PPPU_ID");

                    b.Property<long>("AtaTemplateOid")
                        .HasColumnName("ATA_TEMPLATE_OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AtaGroupId")
                        .HasName("APPT_TPL_APPLIED_FK_GROUP_ID");

                    b.HasIndex("AtaPppuId")
                        .HasName("APPT_TPL_APPLIED_FK_PPPU_ID");

                    b.HasIndex("AtaTemplateOid")
                        .HasName("APPT_TPL_APPLIED_FK_TPL_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APPOINTMENT_TEMPLAT");

                    b.ToTable("APPOINTMENT_TEMPLATE_APPLIED");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppRecurrency", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("DATE_END")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnName("DATE_START")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FindIndex")
                        .HasColumnName("FIND_INDEX");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Param1")
                        .HasColumnName("PARAM1");

                    b.Property<long?>("Param2")
                        .HasColumnName("PARAM2");

                    b.Property<long?>("Param3")
                        .HasColumnName("PARAM3");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuIdPos")
                        .HasColumnName("PPPU_ID_POS");

                    b.Property<long>("PppuIdProvider")
                        .HasColumnName("PPPU_ID_PROVIDER");

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<long?>("RecurrCount")
                        .HasColumnName("RECURR_COUNT");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RepeatType")
                        .HasColumnName("REPEAT_TYPE");

                    b.Property<long?>("Subtype")
                        .HasColumnName("SUBTYPE");

                    b.HasKey("Oid");

                    b.HasIndex("FindIndex")
                        .HasName("APP_RECURRENCY_I_FIND");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APP_RECURRENCY");

                    b.HasIndex("PppuIdPos")
                        .HasName("APP_RECURRENCY_FK_PPPU_ID_PO");

                    b.HasIndex("PppuIdProvider")
                        .HasName("APP_RECURRENCY_FK_PPPU_ID_PR");

                    b.HasIndex("PtntId")
                        .HasName("APP_RECURRENCY_FK_PATIENT");

                    b.HasIndex("DateStart", "DateEnd")
                        .HasName("APP_RECURRENCY_I_DATES");

                    b.ToTable("APP_RECURRENCY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppRole", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<byte[]>("Conditions")
                        .HasColumnName("CONDITIONS")
                        .HasColumnType("image");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("CREATEDON")
                        .HasColumnType("datetime");

                    b.Property<long?>("DefCefformId")
                        .HasColumnName("DEF_CEFFORM_ID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("DisabledOps")
                        .HasColumnName("DISABLED_OPS")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("EmrIsReadonly")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMR_IS_READONLY")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("EnabledOps")
                        .HasColumnName("ENABLED_OPS")
                        .HasColumnType("image");

                    b.Property<long?>("EncountersStyle")
                        .HasColumnName("ENCOUNTERS_STYLE");

                    b.Property<long>("EncountersWindowStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ENCOUNTERS_WINDOW_STYLE")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("LimitEmrsAndCases")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LIMIT_EMRS_AND_CASES")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("MaxCases")
                        .HasColumnName("MAX_CASES");

                    b.Property<long?>("MaxEmrs")
                        .HasColumnName("MAX_EMRS");

                    b.Property<long?>("MaxEmrsAndCases")
                        .HasColumnName("MAX_EMRS_AND_CASES");

                    b.Property<long?>("MaxNewenc")
                        .HasColumnName("MAX_NEWENC");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("ObjectRights")
                        .HasColumnName("OBJECT_RIGHTS")
                        .HasColumnType("image");

                    b.Property<long?>("ParentRole")
                        .HasColumnName("PARENT_ROLE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyEntryId")
                        .HasColumnName("PRIVACY_ENTRY_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RemotePrivacy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REMOTE_PRIVACY")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("RoleName")
                        .HasColumnName("ROLE_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("Roletype")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ROLETYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("UpdateCaseDependencies")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UPDATE_CASE_DEPENDENCIES")
                        .HasDefaultValueSql("((-1))");

                    b.Property<long?>("UseForPrivacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_FOR_PRIVACY")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("ROLE_FK_CREATEDBY");

                    b.HasIndex("DefCefformId")
                        .HasName("I_APPROLE_DEFCEFFORM");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APP_ROLE");

                    b.HasIndex("ParentRole")
                        .HasName("ROLE_FK_PARENT_ROLE");

                    b.HasIndex("PrivacyEntryId")
                        .HasName("FK_APPROLE_PRIVACY_ENTRY");

                    b.HasIndex("RoleName", "PartitionId", "Deletedid")
                        .IsUnique()
                        .HasName("APP_ROLE_NAME")
                        .HasFilter("[ROLE_NAME] IS NOT NULL");

                    b.ToTable("APP_ROLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppRoleCef", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("ArfFormId")
                        .HasColumnName("ARF_FORM_ID");

                    b.Property<long>("ArfRoleId")
                        .HasColumnName("ARF_ROLE_ID");

                    b.Property<long?>("ArfShortcodeId")
                        .HasColumnName("ARF_SHORTCODE_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ArfFormId")
                        .HasName("ARF_FORM_ID_FK");

                    b.HasIndex("ArfRoleId")
                        .HasName("ARF_ROLE_ID_FK");

                    b.HasIndex("ArfShortcodeId")
                        .HasName("ARF_SHORTCODE_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_APP_ROLE_CEF");

                    b.ToTable("APP_ROLE_CEF");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ApptRegistry", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("AprgApptid")
                        .HasColumnName("APRG_APPTID");

                    b.Property<string>("AprgKey")
                        .IsRequired()
                        .HasColumnName("APRG_KEY")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("AprgValue")
                        .IsRequired()
                        .HasColumnName("APRG_VALUE")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AprgApptid")
                        .HasName("APRG_FK_APNT");

                    b.ToTable("APPT_REGISTRY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ApptRuleServices", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Duration")
                        .HasColumnName("DURATION");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RuleId")
                        .HasColumnName("RULE_ID");

                    b.Property<long>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("RuleId")
                        .HasName("FK_APPT_RULE_SERVICES_RULE");

                    b.HasIndex("ServiceId")
                        .HasName("FK_APPT_RULE_SERVICES_SERVICE");

                    b.ToTable("APPT_RULE_SERVICES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ArchiveLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AlogComputerName")
                        .IsRequired()
                        .HasColumnName("ALOG_COMPUTER_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("AlogDate")
                        .HasColumnName("ALOG_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("AlogText")
                        .IsRequired()
                        .HasColumnName("ALOG_TEXT")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long>("AlogUserId")
                        .HasColumnName("ALOG_USER_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AlogUserId")
                        .HasName("ALOG_USER_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ARCHIVE_LOG");

                    b.ToTable("ARCHIVE_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AspRename", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("ChangeArea")
                        .IsRequired()
                        .HasColumnName("CHANGE_AREA")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnName("CHANGE_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ChangedField")
                        .IsRequired()
                        .HasColumnName("CHANGED_FIELD")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("ChangedObjCid")
                        .HasColumnName("CHANGED_OBJ_CID");

                    b.Property<long>("ChangedObjOid")
                        .HasColumnName("CHANGED_OBJ_OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnName("NEW_VALUE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnName("OLD_VALUE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ReferenceObjCid")
                        .HasColumnName("REFERENCE_OBJ_CID");

                    b.Property<long>("ReferenceObjOid")
                        .HasColumnName("REFERENCE_OBJ_OID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ASP_RENAME");

                    b.ToTable("ASP_RENAME");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Associates", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Activityid")
                        .HasColumnName("ACTIVITYID");

                    b.Property<long>("Associationid")
                        .HasColumnName("ASSOCIATIONID");

                    b.Property<long?>("Caseid")
                        .HasColumnName("CASEID");

                    b.Property<string>("Comments")
                        .HasColumnName("COMMENTS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Intensityid")
                        .HasColumnName("INTENSITYID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Outcomeid")
                        .HasColumnName("OUTCOMEID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Patientid")
                        .HasColumnName("PATIENTID");

                    b.Property<string>("Patientname")
                        .HasColumnName("PATIENTNAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<short>("Primaryassoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRIMARYASSOC")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Relationship")
                        .HasColumnName("RELATIONSHIP")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Activityid")
                        .HasName("FK_ASSN_ACTIVITYID");

                    b.HasIndex("Associationid")
                        .HasName("FK_ASSN_ASSOCIATIONID");

                    b.HasIndex("Caseid")
                        .HasName("FK_ASSN_CASEID");

                    b.HasIndex("Intensityid")
                        .HasName("FK_ASSN_INTENSITYID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ASSOCIATES");

                    b.HasIndex("Outcomeid")
                        .HasName("FK_ASSN_OUTCOMEID");

                    b.HasIndex("Patientid")
                        .HasName("FK_ASSN_PATIENTID");

                    b.ToTable("ASSOCIATES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Association", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("Appliesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APPLIESTO")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Assoctype")
                        .HasColumnName("ASSOCTYPE");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long?>("Privacyroleid")
                        .HasColumnName("PRIVACYROLEID");

                    b.Property<short>("Privateto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRIVATETO")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Privatetoorg")
                        .HasColumnName("PRIVATETOORG");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Assoctype")
                        .HasName("FK_ASSOC_TYPE_SHORTCODE");

                    b.HasIndex("CaseId")
                        .HasName("FK_ASSOC_CASEID_BCASE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ASSOCIATION");

                    b.HasIndex("PatientId")
                        .HasName("FK_ASSOCIATION_PATIENT");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("ASSOCIATION_FK_PPPU");

                    b.HasIndex("Privacyroleid")
                        .HasName("FK_ASSOCIATION_ROLE");

                    b.HasIndex("Privatetoorg")
                        .HasName("FK_ASSOC_ORGSTRUC_PRIV");

                    b.ToTable("ASSOCIATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Audit", b =>
                {
                    b.Property<long>("AudtId")
                        .HasColumnName("AUDT_ID");

                    b.Property<string>("AuditIp")
                        .HasColumnName("AUDIT_IP")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<string>("AudtAction")
                        .HasColumnName("AUDT_ACTION")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AudtDate")
                        .HasColumnName("AUDT_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AudtLogoffDate")
                        .HasColumnName("AUDT_LOGOFF_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("AudtLogoncode")
                        .HasColumnName("AUDT_LOGONCODE")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("AudtLogoncomputer")
                        .HasColumnName("AUDT_LOGONCOMPUTER")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("AudtNic")
                        .HasColumnName("AUDT_NIC")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("AudtPppuId")
                        .HasColumnName("AUDT_PPPU_ID");

                    b.Property<long?>("AudtResultcode")
                        .HasColumnName("AUDT_RESULTCODE");

                    b.Property<long?>("AudtSecurityc")
                        .HasColumnName("AUDT_SECURITYC");

                    b.Property<long?>("AudtSecurityf")
                        .HasColumnName("AUDT_SECURITYF");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("UserText")
                        .HasColumnName("USER_TEXT")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("AudtId");

                    b.HasIndex("AudtLogoncode")
                        .HasName("IDX_AUDT_LOGONCODE");

                    b.HasIndex("AudtPppuId")
                        .HasName("AUDT_FK_PPPU_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_AUDIT_");

                    b.HasIndex("AudtDate", "AudtLogoncomputer")
                        .HasName("I_AUDIT_DATE_LOGONCOMPUTER");

                    b.ToTable("AUDIT_");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AuditIhnMpi", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AudIhnCode")
                        .HasColumnName("AUD_IHN_CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("AudIhnComputer")
                        .HasColumnName("AUD_IHN_COMPUTER")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AudIhnDate")
                        .HasColumnName("AUD_IHN_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AudIhnDob")
                        .HasColumnName("AUD_IHN_DOB")
                        .HasColumnType("datetime");

                    b.Property<string>("AudIhnFirstname")
                        .HasColumnName("AUD_IHN_FIRSTNAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("AudIhnIp")
                        .HasColumnName("AUD_IHN_IP")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<string>("AudIhnLastname")
                        .HasColumnName("AUD_IHN_LASTNAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("AudIhnMpi")
                        .HasColumnName("AUD_IHN_MPI")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("AudIhnMpiSystem")
                        .HasColumnName("AUD_IHN_MPI_SYSTEM")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("AudIhnNatnum")
                        .HasColumnName("AUD_IHN_NATNUM")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("AudIhnPatCode")
                        .HasColumnName("AUD_IHN_PAT_CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("AudIhnPppuId")
                        .HasColumnName("AUD_IHN_PPPU_ID");

                    b.Property<string>("AudIhnSource")
                        .HasColumnName("AUD_IHN_SOURCE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<byte[]>("AudIhnWarnings")
                        .HasColumnName("AUD_IHN_WARNINGS")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AudIhnPppuId")
                        .HasName("FK_AUD_IHN_PPPU_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_AUDIT_IHN_MPI");

                    b.ToTable("AUDIT_IHN_MPI");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AuditWeb", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnName("ADDITIONAL_INFO")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SessionEnd")
                        .HasColumnName("SESSION_END")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("SessionUid")
                        .HasColumnName("SESSION_UID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Started")
                        .HasColumnName("STARTED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Stopped")
                        .HasColumnName("STOPPED")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<long?>("UserType")
                        .HasColumnName("USER_TYPE");

                    b.Property<string>("WebSiteId")
                        .HasColumnName("WEB_SITE_ID")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_AUDIT_WEB");

                    b.HasIndex("PatientId")
                        .HasName("FK_AUDIT_WEB_PATIENT");

                    b.HasIndex("SessionUid")
                        .HasName("AUDIT_WEB_I_SESSION_UID");

                    b.HasIndex("UserId")
                        .HasName("FK_AUDIT_WEB_USER");

                    b.ToTable("AUDIT_WEB");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AuditWebActivity", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Activity")
                        .HasColumnName("ACTIVITY")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("AdditionalInfo")
                        .HasColumnName("ADDITIONAL_INFO")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<long>("AuditWebId")
                        .HasColumnName("AUDIT_WEB_ID");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PageLeft")
                        .HasColumnName("PAGE_LEFT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PageLoaded")
                        .HasColumnName("PAGE_LOADED")
                        .HasColumnType("datetime");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SelectedPtntId")
                        .HasColumnName("SELECTED_PTNT_ID");

                    b.HasKey("Oid");

                    b.HasIndex("AuditWebId")
                        .HasName("FK_AUDIT_WEB_ACTIVITY_AUDIT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_AUDIT_WEB_ACTIVITY");

                    b.HasIndex("SelectedPtntId")
                        .HasName("FK_AUDIT_WEB_ACT_SEL_PATIENT");

                    b.ToTable("AUDIT_WEB_ACTIVITY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AutoExecuteJfaRecord", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("AejfActionPlace")
                        .HasColumnName("AEJF_ACTION_PLACE");

                    b.Property<short>("AejfBypassConfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AEJF_BYPASS_CONFIRM")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("AejfCommandTextBlobId")
                        .HasColumnName("AEJF_COMMAND_TEXT_BLOB_ID");

                    b.Property<long>("AejfContentType")
                        .HasColumnName("AEJF_CONTENT_TYPE");

                    b.Property<long?>("AejfCreatorId")
                        .HasColumnName("AEJF_CREATOR_ID");

                    b.Property<string>("AejfDatabaseId")
                        .HasColumnName("AEJF_DATABASE_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AejfExpiredDate")
                        .HasColumnName("AEJF_EXPIRED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("AejfGuid")
                        .IsRequired()
                        .HasColumnName("AEJF_GUID")
                        .HasMaxLength(38)
                        .IsUnicode(false);

                    b.Property<short>("AejfProfileSqlParsing")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AEJF_PROFILE_SQL_PARSING")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("AejfRunOnce")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AEJF_RUN_ONCE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AejfCommandTextBlobId")
                        .HasName("AEJF_FK_COMMAND_TEXT_BLOB_ID");

                    b.HasIndex("AejfCreatorId")
                        .HasName("AEJF_FK_CREATOR_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_AUTO_EXECUTE_JFA_RE");

                    b.ToTable("AUTO_EXECUTE_JFA_RECORD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AutoExecuteJfaRecordLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AelgErrorTextBlobId")
                        .HasColumnName("AELG_ERROR_TEXT_BLOB_ID");

                    b.Property<long>("AelgParentJfaRecordId")
                        .HasColumnName("AELG_PARENT_JFA_RECORD_ID");

                    b.Property<long?>("AelgRunById")
                        .HasColumnName("AELG_RUN_BY_ID");

                    b.Property<DateTime>("AelgRunEnd")
                        .HasColumnName("AELG_RUN_END")
                        .HasColumnType("datetime");

                    b.Property<string>("AelgRunOnComputer")
                        .IsRequired()
                        .HasColumnName("AELG_RUN_ON_COMPUTER")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<DateTime>("AelgRunStart")
                        .HasColumnName("AELG_RUN_START")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AelgErrorTextBlobId")
                        .HasName("AELG_FK_ERROR_TEXT_BLOB_ID");

                    b.HasIndex("AelgParentJfaRecordId")
                        .HasName("AELG_FK_PARENT_JFA_RECORD_ID");

                    b.HasIndex("AelgRunById")
                        .HasName("AELG_FK_RUN_BY_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_AUTO_EXECUTE_JFA_R1");

                    b.ToTable("AUTO_EXECUTE_JFA_RECORD_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.BackupPppuVersions", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<long?>("Delededid")
                        .HasColumnName("DELEDEDID");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long?>("Errorcode")
                        .HasColumnName("ERRORCODE");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("Newcode")
                        .HasColumnName("NEWCODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("Newversion")
                        .HasColumnName("NEWVERSION");

                    b.Property<string>("PppuCode")
                        .HasColumnName("PPPU_CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.ToTable("BACKUP_PPPU_VERSIONS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.BatchInvoices", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<decimal>("BenefitAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BENEFIT_ASSIGNED")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("BenefitPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BENEFIT_PAID")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("ClaimReference")
                        .HasColumnName("CLAIM_REFERENCE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("ClaimStatus")
                        .HasColumnName("CLAIM_STATUS");

                    b.Property<DateTime?>("ClaimStatusDate")
                        .HasColumnName("CLAIM_STATUS_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeletedBy")
                        .HasColumnName("DELETED_BY");

                    b.Property<decimal>("DepositAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DEPOSIT_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PayeeProvId")
                        .HasColumnName("PAYEE_PROV_ID");

                    b.Property<long>("PayerId")
                        .HasColumnName("PAYER_ID");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<short>("ProcessedState")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROCESSED_STATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ServProvNum")
                        .HasColumnName("SERV_PROV_NUM")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<decimal>("SupplementAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SUPPLEMENT_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("SupplementCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SUPPLEMENT_COUNT")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("CreatedBy")
                        .HasName("BATCH_INVOICES_FK_CREATED_BY");

                    b.HasIndex("CreatedOn")
                        .HasName("BATCH_INVOICE_I_CREATEDON");

                    b.HasIndex("DeletedBy")
                        .HasName("BATCH_INVOICES_FK_DELETED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_BATCH_INVOICES");

                    b.HasIndex("PayeeProvId")
                        .HasName("BI_FK_PAYEE_PROV_ID");

                    b.HasIndex("PayerId")
                        .HasName("BATCH_INVOICES_FK_PAYER_ID");

                    b.HasIndex("PosId")
                        .HasName("BATCH_INVOICES_FK_POS_ID");

                    b.HasIndex("PppuId")
                        .HasName("BATCH_INVOICES_FK_PPPU_ID");

                    b.ToTable("BATCH_INVOICES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.BatchPayment", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("BatchClaimId")
                        .HasColumnName("BATCH_CLAIM_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("StatementOid")
                        .HasColumnName("STATEMENT_OID");

                    b.Property<decimal>("SupplementAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SUPPLEMENT_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("SupplementCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SUPPLEMENT_COUNT")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("BatchClaimId")
                        .HasName("BATCH_PAYMENT_FK_BATCH");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_BATCH_PAYMENT");

                    b.HasIndex("StatementOid")
                        .HasName("BATCH_PAYMENT_FK_STATEMENT");

                    b.ToTable("BATCH_PAYMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.BatchStatement", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AccountName")
                        .HasColumnName("ACCOUNT_NAME")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("AccountNumber")
                        .HasColumnName("ACCOUNT_NUMBER")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<string>("BsbNumber")
                        .HasColumnName("BSB_NUMBER")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<decimal>("DepositAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DEPOSIT_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("DepositId")
                        .HasColumnName("DEPOSIT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IsReconciled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_RECONCILED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PayeeProviderId")
                        .HasColumnName("PAYEE_PROVIDER_ID");

                    b.Property<string>("PayeeProviderNum")
                        .HasColumnName("PAYEE_PROVIDER_NUM")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnName("PAYMENT_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RunNumber")
                        .HasColumnName("RUN_NUMBER");

                    b.HasKey("Oid");

                    b.HasIndex("DepositId")
                        .HasName("BATCH_STATEMENT_FK_DEPOSITS");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_BATCH_STATEMENT");

                    b.HasIndex("PayeeProviderId")
                        .HasName("BATCH_STATEMENT_FK_PAYEE");

                    b.HasIndex("PosId")
                        .HasName("BATCH_STATEMENT_FK_POS");

                    b.ToTable("BATCH_STATEMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Bcase", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AlteredById")
                        .HasColumnName("ALTERED_BY_ID");

                    b.Property<DateTime?>("AlteredOn")
                        .HasColumnName("ALTERED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("CarePlan")
                        .HasColumnName("CARE_PLAN")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("CaseAvailInAccession")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CASE_AVAIL_IN_ACCESSION")
                        .HasDefaultValueSql("((-1))");

                    b.Property<long?>("CaseInitDiagId")
                        .HasColumnName("CASE_INIT_DIAG_ID");

                    b.Property<long?>("CaseMngrId")
                        .HasColumnName("CASE_MNGR_ID");

                    b.Property<long?>("CaseRoleId")
                        .HasColumnName("CASE_ROLE_ID");

                    b.Property<long?>("CaseSettings")
                        .HasColumnName("CASE_SETTINGS");

                    b.Property<long?>("CaseTemplate")
                        .HasColumnName("CASE_TEMPLATE");

                    b.Property<string>("CaseTitle")
                        .HasColumnName("CASE_TITLE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CasemixComm")
                        .HasColumnName("CASEMIX_COMM")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long?>("CasemixFinal")
                        .HasColumnName("CASEMIX_FINAL");

                    b.Property<long?>("CasemixInitial")
                        .HasColumnName("CASEMIX_INITIAL");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnName("CLOSED_ON")
                        .HasColumnType("datetime");

                    b.Property<long?>("Condition")
                        .HasColumnName("CONDITION");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnName("CREATOR_ID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Financial")
                        .HasColumnName("FINANCIAL");

                    b.Property<DateTime?>("Firstvisit")
                        .HasColumnName("FIRSTVISIT")
                        .HasColumnType("datetime");

                    b.Property<long?>("ForceCase")
                        .HasColumnName("FORCE_CASE");

                    b.Property<long?>("LeadProvId")
                        .HasColumnName("LEAD_PROV_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("OpenedOn")
                        .HasColumnName("OPENED_ON")
                        .HasColumnType("datetime");

                    b.Property<long?>("OrgStructureId")
                        .HasColumnName("ORG_STRUCTURE_ID");

                    b.Property<long?>("Origination")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORIGINATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("Presentation")
                        .HasColumnName("PRESENTATION");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<string>("Reason")
                        .HasColumnName("REASON")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long?>("RefCid")
                        .HasColumnName("REF_CID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RefOid")
                        .HasColumnName("REF_OID");

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Referrer")
                        .HasColumnName("REFERRER")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("RelevantInf")
                        .HasColumnName("RELEVANT_INF")
                        .HasMaxLength(900)
                        .IsUnicode(false);

                    b.Property<long?>("RoleOid")
                        .HasColumnName("ROLE_OID");

                    b.Property<long?>("RoleOidAdmin")
                        .HasColumnName("ROLE_OID_ADMIN");

                    b.Property<long?>("SepDiagId")
                        .HasColumnName("SEP_DIAG_ID");

                    b.Property<long?>("SepOutcomeId")
                        .HasColumnName("SEP_OUTCOME_ID");

                    b.Property<long?>("SepServiceId")
                        .HasColumnName("SEP_SERVICE_ID");

                    b.Property<long?>("ServicePosId")
                        .HasColumnName("SERVICE_POS_ID");

                    b.Property<long?>("ShcdCaserisk")
                        .HasColumnName("SHCD_CASERISK");

                    b.Property<long?>("ShcdDischargedtoid")
                        .HasColumnName("SHCD_DISCHARGEDTOID");

                    b.Property<long?>("ShcdPriorityid")
                        .HasColumnName("SHCD_PRIORITYID");

                    b.Property<long?>("ShcdSource1")
                        .HasColumnName("SHCD_SOURCE1");

                    b.Property<long?>("ShcdSource2")
                        .HasColumnName("SHCD_SOURCE2");

                    b.Property<long?>("Source")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SOURCE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Source1date")
                        .HasColumnName("SOURCE1DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Source2date")
                        .HasColumnName("SOURCE2DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Sourceref")
                        .HasColumnName("SOURCEREF")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Oid");

                    b.HasIndex("AlteredById")
                        .HasName("BCASE_FK_ALTERED_BY_ID");

                    b.HasIndex("CaseInitDiagId")
                        .HasName("BCASE_FK_CASE_INIT_DIAG_ID");

                    b.HasIndex("CaseMngrId")
                        .HasName("BCASE_FK_CASE_MNGR_ID");

                    b.HasIndex("CaseRoleId")
                        .HasName("FK_CASE_ROLE_ID");

                    b.HasIndex("CaseSettings")
                        .HasName("FK_BCASE_SETTINGS");

                    b.HasIndex("CaseTemplate")
                        .HasName("FK_BCASE_CASE_TEMPLATE_ID");

                    b.HasIndex("Condition")
                        .HasName("BCASE_FK_CONDITION");

                    b.HasIndex("CreatorId")
                        .HasName("BCASE_FK_CREATOR_ID");

                    b.HasIndex("Financial")
                        .HasName("FK_CASE_CASE_FINANCIAL");

                    b.HasIndex("ForceCase")
                        .HasName("FK_BCASE_FORCECASE");

                    b.HasIndex("LeadProvId")
                        .HasName("BCASE_FK_LEAD_PROV_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_BCASE");

                    b.HasIndex("OrgStructureId")
                        .HasName("FK_BCASE_ORGSTRUCTURE");

                    b.HasIndex("Origination")
                        .HasName("BCASE_FK_ORIGINATION");

                    b.HasIndex("PatientId")
                        .HasName("BCASE_FK_PATIENT_ID");

                    b.HasIndex("Presentation")
                        .HasName("BCASE_FK_PRESENTATION");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("BCASE_FK_PPPU");

                    b.HasIndex("RefOid")
                        .HasName("BCASE_FK_REF_OID");

                    b.HasIndex("RoleOid")
                        .HasName("BCASE_FK_ROLE_OID");

                    b.HasIndex("RoleOidAdmin")
                        .HasName("FK_CASEROLEADMIN_OID");

                    b.HasIndex("SepDiagId")
                        .HasName("BCASE_FK_SEP_DIAG_ID");

                    b.HasIndex("SepOutcomeId")
                        .HasName("BCASE_FK_SEP_OUTCOME_ID");

                    b.HasIndex("SepServiceId")
                        .HasName("BCASE_FK_SEP_SERVICE_ID");

                    b.HasIndex("ServicePosId")
                        .HasName("BCASE_FK_SERVICE_POS_ID");

                    b.HasIndex("ShcdCaserisk")
                        .HasName("FK_BCASE_CASERISK_SHCD_ID");

                    b.HasIndex("ShcdDischargedtoid")
                        .HasName("FK_CASEDISCHARGEDTO_SHCD_ID");

                    b.HasIndex("ShcdPriorityid")
                        .HasName("FK_CASEPRIORITY_SHCD_ID");

                    b.HasIndex("ShcdSource1")
                        .HasName("BCASE_SRC1_FK_SHORTCODE");

                    b.HasIndex("ShcdSource2")
                        .HasName("BCASE_SRC2_FK_SHORTCODE");

                    b.HasIndex("Source")
                        .HasName("BCASE_FK_SOURCE");

                    b.HasIndex("Sourceref")
                        .HasName("BCASE_I_SOURCEREF");

                    b.ToTable("BCASE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.BcService", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("BcsGuid")
                        .HasColumnName("BCS_GUID")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte[]>("BcsProps")
                        .HasColumnName("BCS_PROPS")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_BC_SERVICE");

                    b.ToTable("BC_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Blobs", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Item")
                        .HasColumnName("ITEM")
                        .HasColumnType("image");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_BLOBS");

                    b.ToTable("BLOBS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Bulkinvoiceset", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("BlisName")
                        .IsRequired()
                        .HasColumnName("BLIS_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("BlisTrialsetting")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BLIS_TRIALSETTING")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuIdPassto")
                        .HasColumnName("PPPU_ID_PASSTO");

                    b.Property<long?>("PppuIdPos")
                        .HasColumnName("PPPU_ID_POS");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_BULKINVOICESET");

                    b.HasIndex("PppuIdPassto")
                        .HasName("BULKINVOICESET_FK_PASSTO");

                    b.HasIndex("PppuIdPos")
                        .HasName("BULKINVOICESET_FK_POS");

                    b.ToTable("BULKINVOICESET");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Bulkinvoicesetline", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AlisCode")
                        .IsRequired()
                        .HasColumnName("ALIS_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ParentOid")
                        .HasColumnName("PARENT_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuIdProvider")
                        .HasColumnName("PPPU_ID_PROVIDER");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_BULKINVOICESETLINE");

                    b.HasIndex("ParentOid")
                        .HasName("BULKINVCSETLINE_FK_PARENT");

                    b.HasIndex("PppuIdProvider")
                        .HasName("BULKINVCSETLINE_FK_PROVIDER");

                    b.ToTable("BULKINVOICESETLINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Calculator", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ClcFormId")
                        .HasColumnName("CLC_FORM_ID");

                    b.Property<long?>("Clccountryid")
                        .HasColumnName("CLCCOUNTRYID");

                    b.Property<string>("Clcname")
                        .IsRequired()
                        .HasColumnName("CLCNAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("Clcobjid")
                        .HasColumnName("CLCOBJID");

                    b.Property<long?>("Clcuserid")
                        .HasColumnName("CLCUSERID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ClcFormId")
                        .HasName("CALCULATOR_FK_FORM");

                    b.HasIndex("Clcuserid")
                        .HasName("CALCULATOR_FK_CLCUSERID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CALCULATOR");

                    b.ToTable("CALCULATOR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CapitationInfo", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<decimal>("CpiAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CPI_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("CpiCalculatorCode")
                        .HasColumnName("CPI_CALCULATOR_CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("CpiCalculatorDescription")
                        .HasColumnName("CPI_CALCULATOR_DESCRIPTION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<long>("CpiCbfExportAckId")
                        .HasColumnName("CPI_CBF_EXPORT_ACK_ID");

                    b.Property<long>("CpiCbfPayerCardId")
                        .HasColumnName("CPI_CBF_PAYER_CARD_ID");

                    b.Property<DateTime?>("CpiCycleEndson")
                        .HasColumnName("CPI_CYCLE_ENDSON")
                        .HasColumnType("datetime");

                    b.Property<string>("CpiCycleName")
                        .HasColumnName("CPI_CYCLE_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CpiCycleStartson")
                        .HasColumnName("CPI_CYCLE_STARTSON")
                        .HasColumnType("datetime");

                    b.Property<long>("CpiPatientid")
                        .HasColumnName("CPI_PATIENTID");

                    b.Property<string>("CpiRiskPoolCode")
                        .HasColumnName("CPI_RISK_POOL_CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("CpiRiskPoolDescription")
                        .HasColumnName("CPI_RISK_POOL_DESCRIPTION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CpiCbfExportAckId")
                        .HasName("FK_CAPINFO_EXPORTACKID");

                    b.HasIndex("CpiCbfPayerCardId")
                        .HasName("FK_CAPINFO_PAYERCARDID");

                    b.HasIndex("CpiPatientid")
                        .HasName("FK_CAPINFO_PATIENTID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CAPITATION_INFO");

                    b.ToTable("CAPITATION_INFO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareActionAlternativeLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AlternativeCareactionId")
                        .HasColumnName("ALTERNATIVE_CAREACTION_ID");

                    b.Property<long?>("BaseCareactionId")
                        .HasColumnName("BASE_CAREACTION_ID");

                    b.Property<long?>("BaseRecallactionId")
                        .HasColumnName("BASE_RECALLACTION_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AlternativeCareactionId")
                        .HasName("FK_CAAL_ALT_CAREACTION_ID");

                    b.HasIndex("BaseCareactionId")
                        .HasName("FK_CAAL_BASE_CAREACTION_ID");

                    b.HasIndex("BaseRecallactionId")
                        .HasName("FK_CAAL_BASE_RACTION_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CARE_ACTION_ALTERNA");

                    b.ToTable("CARE_ACTION_ALTERNATIVE_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareActionReasonLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("BaseCareactionId")
                        .HasColumnName("BASE_CAREACTION_ID");

                    b.Property<long?>("BaseRecallactionId")
                        .HasColumnName("BASE_RECALLACTION_ID");

                    b.Property<long?>("ConceptId")
                        .HasColumnName("CONCEPT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SEQUENCE")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("BaseCareactionId")
                        .HasName("FK_CARL_BASE_CAREACTION_ID");

                    b.HasIndex("BaseRecallactionId")
                        .HasName("FK_CARL_BASE_RACTION_ID");

                    b.HasIndex("ConceptId")
                        .HasName("FK_CARL_CONCEPT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CARE_ACTION_REASON_");

                    b.ToTable("CARE_ACTION_REASON_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Careobjective", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Careplanid")
                        .HasColumnName("CAREPLANID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Endoffset")
                        .HasColumnName("ENDOFFSET");

                    b.Property<long?>("Endoffsetunit")
                        .HasColumnName("ENDOFFSETUNIT");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Orderindex")
                        .HasColumnName("ORDERINDEX");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Privacyroleid")
                        .HasColumnName("PRIVACYROLEID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Reviewoffset")
                        .HasColumnName("REVIEWOFFSET");

                    b.Property<long?>("Reviewoffsetunit")
                        .HasColumnName("REVIEWOFFSETUNIT");

                    b.Property<long?>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.Property<long?>("ShcdObjectivetypeid")
                        .HasColumnName("SHCD_OBJECTIVETYPEID");

                    b.Property<long?>("Startoffset")
                        .HasColumnName("STARTOFFSET");

                    b.Property<long?>("Startoffsetunit")
                        .HasColumnName("STARTOFFSETUNIT");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Careplanid")
                        .HasName("FK_CAREOBJECTIVE_CP_ID");

                    b.HasIndex("Createdby")
                        .HasName("CAREOBJECTIVE_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CAREOBJECTIVE_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("CAREOBJECTIVE_FK_MASTER");

                    b.HasIndex("Privacyroleid")
                        .HasName("FK_CAREOBJECTIVE_PR_ID");

                    b.HasIndex("ServiceId")
                        .HasName("FK_CAREOBJECTIVE_SERVICE_ID");

                    b.HasIndex("ShcdObjectivetypeid")
                        .HasName("FK_CAREOBJECTIVE_OT_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("CAREOBJECTIVE_I_MASTERVERS");

                    b.ToTable("CAREOBJECTIVE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareplanGroup", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Gtype")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GTYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CAREPLAN_GROUP");

                    b.HasIndex("ServiceId")
                        .HasName("FK_CPG_SERVICE_ID");

                    b.ToTable("CAREPLAN_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareplanGroupLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CareplanGroupId")
                        .HasColumnName("CAREPLAN_GROUP_ID");

                    b.Property<long?>("CareplanId")
                        .HasColumnName("CAREPLAN_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CareplanGroupId")
                        .HasName("FK_CPGL_CAREPLAN_GROUP_ID");

                    b.HasIndex("CareplanId")
                        .HasName("FK_CPGL_CAREPLAN_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CAREPLAN_GROUP_LINK");

                    b.ToTable("CAREPLAN_GROUP_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Carerecurrence", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CrcEndtype")
                        .HasColumnName("CRC_ENDTYPE");

                    b.Property<short>("CrcIsperiodafterduedate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CRC_ISPERIODAFTERDUEDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CrcOccurencycount")
                        .HasColumnName("CRC_OCCURENCYCOUNT");

                    b.Property<long?>("CrcParam1")
                        .HasColumnName("CRC_PARAM1");

                    b.Property<long?>("CrcParam2")
                        .HasColumnName("CRC_PARAM2");

                    b.Property<long?>("CrcParam3")
                        .HasColumnName("CRC_PARAM3");

                    b.Property<long?>("CrcReapeatuntilunit")
                        .HasColumnName("CRC_REAPEATUNTILUNIT");

                    b.Property<long?>("CrcRepeatfrom")
                        .HasColumnName("CRC_REPEATFROM");

                    b.Property<long?>("CrcRepeatfromunit")
                        .HasColumnName("CRC_REPEATFROMUNIT");

                    b.Property<long?>("CrcRepeattype")
                        .HasColumnName("CRC_REPEATTYPE");

                    b.Property<long?>("CrcRepeatuntil")
                        .HasColumnName("CRC_REPEATUNTIL");

                    b.Property<long?>("CrcSubtype")
                        .HasColumnName("CRC_SUBTYPE");

                    b.Property<short>("CrcUpdateFormEachTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CRC_UPDATE_FORM_EACH_TIME")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CrcVisitRepeatamount")
                        .HasColumnName("CRC_VISIT_REPEATAMOUNT");

                    b.Property<long?>("CrcVisitRepeattype")
                        .HasColumnName("CRC_VISIT_REPEATTYPE");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("CARERECURRENCE_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CARERECURRENCE_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("CARERECURRENCE_FK_MASTER");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("CARERECURRENCE_I_MASTERVERS");

                    b.ToTable("CARERECURRENCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareTeam", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<long?>("CtCaseId")
                        .HasColumnName("CT_CASE_ID");

                    b.Property<long?>("CtClosedBy")
                        .HasColumnName("CT_CLOSED_BY");

                    b.Property<DateTime>("CtClosedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CT_CLOSED_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('30-DEC-1899')");

                    b.Property<string>("CtComments")
                        .HasColumnName("CT_COMMENTS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("CtDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CT_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('30-DEC-1899')");

                    b.Property<DateTime>("CtDateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CT_DATE_FROM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('30-DEC-1899')");

                    b.Property<DateTime>("CtDateTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CT_DATE_TO")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('30-DEC-1899')");

                    b.Property<short>("CtIscurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CT_ISCURRENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CtOriginPartitionId")
                        .HasColumnName("CT_ORIGIN_PARTITION_ID");

                    b.Property<long>("CtPatient")
                        .HasColumnName("CT_PATIENT");

                    b.Property<long?>("CtPayerId")
                        .HasColumnName("CT_PAYER_ID");

                    b.Property<long>("CtPersonId")
                        .HasColumnName("CT_PERSON_ID");

                    b.Property<long?>("CtPppuRole")
                        .HasColumnName("CT_PPPU_ROLE");

                    b.Property<short>("CtPrincipal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CT_PRINCIPAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CtPrivacyid")
                        .HasColumnName("CT_PRIVACYID");

                    b.Property<long?>("CtRole")
                        .HasColumnName("CT_ROLE");

                    b.Property<long>("CtSharedPlanPrivacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CT_SHARED_PLAN_PRIVACY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CtStatus")
                        .HasColumnName("CT_STATUS");

                    b.Property<long?>("CtType")
                        .HasColumnName("CT_TYPE");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("CARE_TEAM_FK_CREATEDBY");

                    b.HasIndex("CtCaseId")
                        .HasName("CARETEAM_FK_CASE_ID");

                    b.HasIndex("CtClosedBy")
                        .HasName("CT_FK_CLOSED_BY_CDO_PERSON");

                    b.HasIndex("CtOriginPartitionId")
                        .HasName("FK_CT_ORGN_PARTITION_ID");

                    b.HasIndex("CtPatient")
                        .HasName("CARETEAM_FK_PATIENT");

                    b.HasIndex("CtPayerId")
                        .HasName("CARE_TEAM_FK_PAYER_ID");

                    b.HasIndex("CtPersonId")
                        .HasName("CARETEAM_FK_PERSON_ID");

                    b.HasIndex("CtPppuRole")
                        .HasName("CARE_TEAM_FK_PPPU_ROLE");

                    b.HasIndex("CtPrivacyid")
                        .HasName("CT_FK_PRIVACYID");

                    b.HasIndex("CtRole")
                        .HasName("CARETEAM_FK_ROLE");

                    b.HasIndex("Deletedby")
                        .HasName("CARE_TEAM_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("CARE_TEAM_FK_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CARE_TEAM");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("CARE_TEAM_FK_PPPU");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("CARE_TEAM_I_MASTERVERS");

                    b.HasIndex("CtPatient", "CtCaseId", "CtRole")
                        .HasName("CARE_TEAM_I_PTNT_CASE_ROLE");

                    b.ToTable("CARE_TEAM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseAudit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AccessCode")
                        .HasColumnName("ACCESS_CODE")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<string>("Computername")
                        .HasColumnName("COMPUTERNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnName("END_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ObserverPtntId")
                        .HasColumnName("OBSERVER_PTNT_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnName("START_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("UserText")
                        .HasColumnName("USER_TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("CASE_AUDIT_FK_CASE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_AUDIT");

                    b.HasIndex("ObserverPtntId")
                        .HasName("FK_CAUDIT_OBSPTNTID");

                    b.HasIndex("PppuId")
                        .HasName("CASE_AUDIT_FK_PPPU_ID");

                    b.ToTable("CASE_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseAuditDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("CadAlertdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CAD_ALERTDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("CadAuditId")
                        .HasColumnName("CAD_AUDIT_ID");

                    b.Property<string>("CadDescription")
                        .HasColumnName("CAD_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("CadType")
                        .HasColumnName("CAD_TYPE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CadAuditId")
                        .HasName("CAD_AUDIT_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_AUDIT_DETAILS");

                    b.ToTable("CASE_AUDIT_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseBudgetRequest", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("CbrApprovedDate")
                        .HasColumnName("CBR_APPROVED_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CbrApprovedfromDate")
                        .HasColumnName("CBR_APPROVEDFROM_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("CbrCaseId")
                        .HasColumnName("CBR_CASE_ID");

                    b.Property<string>("CbrContact")
                        .HasColumnName("CBR_CONTACT")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CbrDate")
                        .HasColumnName("CBR_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("CbrDecision")
                        .HasColumnName("CBR_DECISION")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("CbrDetail")
                        .HasColumnName("CBR_DETAIL")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long?>("CbrPayerId")
                        .HasColumnName("CBR_PAYER_ID");

                    b.Property<long>("CbrPayerType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CBR_PAYER_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("CbrPhaseId")
                        .HasColumnName("CBR_PHASE_ID");

                    b.Property<string>("CbrReference")
                        .HasColumnName("CBR_REFERENCE")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<long?>("CbrStatus")
                        .HasColumnName("CBR_STATUS");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CbrCaseId")
                        .HasName("FK_CBR_CASE_ID");

                    b.HasIndex("CbrPayerId")
                        .HasName("FK_CBR_PATIENT_PAYER_ID");

                    b.HasIndex("CbrPhaseId")
                        .HasName("FK_CBR_SHORTCODE_PHASE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_BUDGET_REQUEST");

                    b.ToTable("CASE_BUDGET_REQUEST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseBudgetRequestJrnl", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("BrjBudgetRequestId")
                        .HasColumnName("BRJ_BUDGET_REQUEST_ID");

                    b.Property<DateTime?>("BrjDate")
                        .HasColumnName("BRJ_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("BrjDescription")
                        .HasColumnName("BRJ_DESCRIPTION")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<long?>("BrjUserId")
                        .HasColumnName("BRJ_USER_ID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("BrjBudgetRequestId")
                        .HasName("BRJ_BUDGET_REQUEST_ID");

                    b.HasIndex("BrjUserId")
                        .HasName("FK_BRJ_PPPU_USER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_BUDGET_REQUES1");

                    b.ToTable("CASE_BUDGET_REQUEST_JRNL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseBudgetRequestLine", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("BrlBudgetRequestId")
                        .HasColumnName("BRL_BUDGET_REQUEST_ID");

                    b.Property<decimal>("BrlPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BRL_PRICE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("BrlQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BRL_QUANTITY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("BrlServiceId")
                        .HasColumnName("BRL_SERVICE_ID");

                    b.Property<decimal>("BrlTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BRL_TOTAL")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("BrlType")
                        .HasColumnName("BRL_TYPE");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("BrlBudgetRequestId")
                        .HasName("FK_BRL_BUDGET_REQUEST_ID");

                    b.HasIndex("BrlServiceId")
                        .HasName("FK_BRL_SERVICE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_BUDGET_REQUES2");

                    b.ToTable("CASE_BUDGET_REQUEST_LINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseFinancial", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("CfnAllowReconcile")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CFN_ALLOW_RECONCILE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CfnBpayDetail")
                        .HasColumnName("CFN_BPAY_DETAIL")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CfnBpayReference")
                        .HasColumnName("CFN_BPAY_REFERENCE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("CfnEmployer")
                        .HasColumnName("CFN_EMPLOYER");

                    b.Property<string>("CfnExternalOrgref")
                        .HasColumnName("CFN_EXTERNAL_ORGREF")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("CfnGuarantor")
                        .HasColumnName("CFN_GUARANTOR");

                    b.Property<short>("CfnHoldAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CFN_HOLD_ACCOUNT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CfnOccupation")
                        .HasColumnName("CFN_OCCUPATION");

                    b.Property<string>("CfnOccupationDescr")
                        .HasColumnName("CFN_OCCUPATION_DESCR")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("CfnPayer")
                        .HasColumnName("CFN_PAYER");

                    b.Property<string>("CfnPaymentDetail2")
                        .HasColumnName("CFN_PAYMENT_DETAIL2")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("CfnPaymentDetail3")
                        .HasColumnName("CFN_PAYMENT_DETAIL3")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long>("CfnPaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CFN_PAYMENT_METHOD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CfnServiceDiscount")
                        .HasColumnName("CFN_SERVICE_DISCOUNT");

                    b.Property<long?>("CfnServiceRate")
                        .HasColumnName("CFN_SERVICE_RATE");

                    b.Property<long?>("CfnUsualPayerType")
                        .HasColumnName("CFN_USUAL_PAYER_TYPE");

                    b.Property<string>("CfnWorkCity")
                        .HasColumnName("CFN_WORK_CITY")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("CfnWorkCode")
                        .HasColumnName("CFN_WORK_CODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("CfnWorkCountry")
                        .HasColumnName("CFN_WORK_COUNTRY");

                    b.Property<string>("CfnWorkName")
                        .HasColumnName("CFN_WORK_NAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("CfnWorkPhone")
                        .HasColumnName("CFN_WORK_PHONE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<long?>("CfnWorkState")
                        .HasColumnName("CFN_WORK_STATE");

                    b.Property<string>("CfnWorkStreet")
                        .HasColumnName("CFN_WORK_STREET")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("CfnWorkSuburb")
                        .HasColumnName("CFN_WORK_SUBURB")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CfnEmployer")
                        .HasName("FK_CASE_FIN_EMPLOYER");

                    b.HasIndex("CfnGuarantor")
                        .HasName("FK_CASE_FIN_GUARANTOR");

                    b.HasIndex("CfnOccupation")
                        .HasName("FK_CASE_FIN_OCCUPATION");

                    b.HasIndex("CfnPayer")
                        .HasName("FK_CASE_FIN_PAYER");

                    b.HasIndex("CfnServiceDiscount")
                        .HasName("FK_CASE_FIN_SERV_DISCOUNT");

                    b.HasIndex("CfnServiceRate")
                        .HasName("FK_CASE_FIN_SERVICE_RATE");

                    b.HasIndex("CfnWorkState")
                        .HasName("FK_CASE_FIN_WORK_STATE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_FINANCIAL");

                    b.ToTable("CASE_FINANCIAL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseLoan", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long?>("CaseServiceId")
                        .HasColumnName("CASE_SERVICE_ID");

                    b.Property<string>("Comments")
                        .HasColumnName("COMMENTS")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ExpectedreturnOn")
                        .HasColumnName("EXPECTEDRETURN_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("ItemId")
                        .HasColumnName("ITEM_ID");

                    b.Property<long?>("LoanedFromPos")
                        .HasColumnName("LOANED_FROM_POS");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long?>("RateId")
                        .HasColumnName("RATE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReturnOn")
                        .HasColumnName("RETURN_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartOn")
                        .HasColumnName("START_ON")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("FK_CASE_LOAN_CASE");

                    b.HasIndex("CaseServiceId")
                        .HasName("FK_CASE_LOAN_CS_ID");

                    b.HasIndex("ItemId")
                        .HasName("FK_CASE_LOAN_ITEM");

                    b.HasIndex("LoanedFromPos")
                        .HasName("FK_CASE_LOAN_LOANED_FROM");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_LOAN");

                    b.HasIndex("PatientId")
                        .HasName("FK_CASE_LOAN_PATIENT");

                    b.HasIndex("PosId")
                        .HasName("FK_CASE_LOAN_POS");

                    b.HasIndex("PppuId")
                        .HasName("FK_CASE_LOAN_PPPU");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_CASE_LOAN_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("CASE_LOAN_FK_PPPU");

                    b.HasIndex("RateId")
                        .HasName("FK_CASE_LOAN_RATE");

                    b.ToTable("CASE_LOAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseMergeLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Masterid")
                        .HasColumnName("MASTERID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Subid")
                        .HasColumnName("SUBID");

                    b.HasKey("Oid");

                    b.HasIndex("CreatedBy")
                        .HasName("CASE_MERGE_LOG_I_CREATED_BY");

                    b.HasIndex("Masterid")
                        .HasName("CASE_MERGE_LOG_I_MASTERID");

                    b.HasIndex("ObjGuid")
                        .HasName("CASE_MERGE_LOG_I_OBJ_GUID");

                    b.HasIndex("Subid")
                        .HasName("CASE_MERGE_LOG_I_SUBID");

                    b.ToTable("CASE_MERGE_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseNotes", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Notes")
                        .HasColumnName("NOTES")
                        .HasColumnType("image");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("FK_CASE_NOTES_BCASE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_NOTES");

                    b.ToTable("CASE_NOTES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseOrg", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<string>("Contactemail")
                        .HasColumnName("CONTACTEMAIL")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("Contactname")
                        .HasColumnName("CONTACTNAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("Contactphone")
                        .HasColumnName("CONTACTPHONE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("Contactpos")
                        .HasColumnName("CONTACTPOS")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Leadorg")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LEADORG")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrgId")
                        .HasColumnName("ORG_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("CASE_ORG_FK_CASE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_ORG");

                    b.HasIndex("OrgId")
                        .HasName("CASE_ORG_FK_ORG_ID");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_CASE_ORG_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("CASE_ORG_FK_PPPU");

                    b.ToTable("CASE_ORG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CasePatientCard", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Caseid")
                        .HasColumnName("CASEID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Patientcardid")
                        .HasColumnName("PATIENTCARDID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Caseid")
                        .HasName("FK_CASEPC_CASEID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_PATIENT_CARD");

                    b.HasIndex("Patientcardid")
                        .HasName("FK_CASEPC_PATIENT_CARD");

                    b.ToTable("CASE_PATIENT_CARD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseService", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<DateTime>("Closed")
                        .HasColumnName("CLOSED")
                        .HasColumnType("datetime");

                    b.Property<string>("Comments")
                        .HasColumnName("COMMENTS")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FirtsVisit")
                        .HasColumnName("FIRTS_VISIT")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("Opened")
                        .HasColumnName("OPENED")
                        .HasColumnType("datetime");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuFrompos")
                        .HasColumnName("PPPU_FROMPOS");

                    b.Property<long?>("PppuFromprovider")
                        .HasColumnName("PPPU_FROMPROVIDER");

                    b.Property<long>("PppuPos")
                        .HasColumnName("PPPU_POS");

                    b.Property<long?>("PppuProvider")
                        .HasColumnName("PPPU_PROVIDER");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<string>("Reason")
                        .HasColumnName("REASON")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdAcuity")
                        .HasColumnName("SHCD_ACUITY");

                    b.Property<long?>("ShcdDischargedTo")
                        .HasColumnName("SHCD_DISCHARGED_TO");

                    b.Property<long?>("ShcdHealthStatus")
                        .HasColumnName("SHCD_HEALTH_STATUS");

                    b.Property<long?>("ShcdOutcome")
                        .HasColumnName("SHCD_OUTCOME");

                    b.Property<long?>("ShcdPlace")
                        .HasColumnName("SHCD_PLACE");

                    b.Property<long?>("ShcdPriority")
                        .HasColumnName("SHCD_PRIORITY");

                    b.Property<long?>("ShcdRefstatus")
                        .HasColumnName("SHCD_REFSTATUS");

                    b.Property<string>("SourceRef")
                        .HasColumnName("SOURCE_REF")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("Synopsis")
                        .HasColumnName("SYNOPSIS")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("FK_CASE_SERVICE_CASE_OID");

                    b.HasIndex("Closed")
                        .HasName("IND_CASESERV_CLOSED");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_SERVICE");

                    b.HasIndex("PppuFrompos")
                        .HasName("FK_CS_PPPU_FROMPOS");

                    b.HasIndex("PppuFromprovider")
                        .HasName("FK_CS_PPPU_FROMPROVIDER");

                    b.HasIndex("PppuPos")
                        .HasName("FK_CASE_SERVICE_PPPU_OID");

                    b.HasIndex("PppuProvider")
                        .HasName("FK_CASE_SERVICE_PPPU_PROVIDE");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_CASE_SERVICE_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("CASE_SERVICE_FK_PPPU");

                    b.HasIndex("ShcdAcuity")
                        .HasName("FK_CASE_SERVICE_ACUITY");

                    b.HasIndex("ShcdDischargedTo")
                        .HasName("FK_CASE_SERVICE_DISCHARGED_T");

                    b.HasIndex("ShcdHealthStatus")
                        .HasName("FK_CASE_SERVICE_HEALTH_STATU");

                    b.HasIndex("ShcdOutcome")
                        .HasName("FK_CASE_SERVICE_OUTCOME");

                    b.HasIndex("ShcdPlace")
                        .HasName("FK_CASE_SERVICE_PLACE");

                    b.HasIndex("ShcdPriority")
                        .HasName("FK_CASE_SERVICE_PRIORITY");

                    b.HasIndex("ShcdRefstatus")
                        .HasName("CASE_SERVICE_REFSTATUS_FK");

                    b.HasIndex("SourceRef")
                        .HasName("I_CASESERVICE_SOURCEREF");

                    b.ToTable("CASE_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseTemplates", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AdminPrivacy")
                        .HasColumnName("ADMIN_PRIVACY");

                    b.Property<short>("AdminPrivacyEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ADMIN_PRIVACY_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Careplan")
                        .HasColumnName("CAREPLAN");

                    b.Property<short>("CareplanEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CAREPLAN_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CasePrivacy")
                        .HasColumnName("CASE_PRIVACY");

                    b.Property<short>("CasePrivacyEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CASE_PRIVACY_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CaseSetting")
                        .HasColumnName("CASE_SETTING");

                    b.Property<short>("CaseSettingEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CASE_SETTING_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ClinicalPrivacy")
                        .HasColumnName("CLINICAL_PRIVACY");

                    b.Property<short>("ClinicalPrivacyEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CLINICAL_PRIVACY_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Colour")
                        .HasColumnName("COLOUR");

                    b.Property<short>("ColourEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COLOUR_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EventTemplate")
                        .HasColumnName("EVENT_TEMPLATE");

                    b.Property<short>("EventTemplateEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EVENT_TEMPLATE_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Macro")
                        .HasColumnName("MACRO");

                    b.Property<short>("MacroEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MACRO_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Mix")
                        .HasColumnName("MIX");

                    b.Property<string>("MixComment")
                        .HasColumnName("MIX_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<short>("MixCommentEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MIX_COMMENT_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("MixEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MIX_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("TITLE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("TitleEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TITLE_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("AdminPrivacy")
                        .HasName("FK_CT_ADMIN_PRIVACY");

                    b.HasIndex("Careplan")
                        .HasName("FK_CASE_TEMPL_CAREPLAN");

                    b.HasIndex("CasePrivacy")
                        .HasName("FK_CT_CASE_PRIVACY");

                    b.HasIndex("CaseSetting")
                        .HasName("FK_CT_CASE_SETTING");

                    b.HasIndex("ClinicalPrivacy")
                        .HasName("FK_CT_CLINICAL_PRIVACY");

                    b.HasIndex("EventTemplate")
                        .HasName("FK_CASE_TEMPL_EVENT_TEMPL");

                    b.HasIndex("Macro")
                        .HasName("FK_CASE_TEMPL_MACRO");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_TEMPLATES");

                    b.HasIndex("Code", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("I_CODE_DELID_PARID")
                        .HasFilter("[CODE] IS NOT NULL");

                    b.ToTable("CASE_TEMPLATES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseWaitlist", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ApptId")
                        .HasColumnName("APPT_ID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<DateTime?>("Closed")
                        .HasColumnName("CLOSED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Opened")
                        .HasColumnName("OPENED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Outcome")
                        .HasColumnName("OUTCOME");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PATIENT_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Pos")
                        .HasColumnName("POS");

                    b.Property<long?>("Priority")
                        .HasColumnName("PRIORITY");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<string>("Reason")
                        .HasColumnName("REASON")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("TypeId")
                        .HasColumnName("TYPE_ID");

                    b.Property<long?>("WaitlistType")
                        .HasColumnName("WAITLIST_TYPE");

                    b.HasKey("Oid");

                    b.HasIndex("ApptId")
                        .HasName("CASE_WAITLIST_FK_APPT_ID");

                    b.HasIndex("CaseId")
                        .HasName("CASE_WAITLIST_FK_CASE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CASE_WAITLIST");

                    b.HasIndex("Outcome")
                        .HasName("FK_CASEWAITLIST_OUTCOME");

                    b.HasIndex("PatientId")
                        .HasName("FK_CASE_WAITLIST_PATIENTID");

                    b.HasIndex("Pos")
                        .HasName("FK_CASEWAITLIST_PPPU");

                    b.HasIndex("Priority")
                        .HasName("FK_CASEWAITLIST_PRIORITY");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_CASE_WAITLIST_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("CASE_WAITLIST_FK_PPPU");

                    b.HasIndex("ProviderId")
                        .HasName("FK_CASE_WAITLIST_PROVIDER");

                    b.HasIndex("TypeId")
                        .HasName("FK_CASE_WAITLIST_TYPE");

                    b.HasIndex("WaitlistType")
                        .HasName("FK_CWL_WAITLISTTYPE");

                    b.ToTable("CASE_WAITLIST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoAbnormalPresent", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AbprAbnormal")
                        .HasColumnName("ABPR_ABNORMAL")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("AbprDescription")
                        .HasColumnName("ABPR_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("AbprEmphasis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ABPR_EMPHASIS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AbprPresent")
                        .HasColumnName("ABPR_PRESENT")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_ABNORMAL_PRESEN");

                    b.ToTable("CDO_ABNORMAL_PRESENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoConceptMatch", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("ConceptOid")
                        .HasColumnName("CONCEPT_OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MatchGroupId")
                        .HasColumnName("MATCH_GROUP_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("ConceptOid")
                        .HasName("CDO_CONCEPT_MATCH_FK_CONC_OID");

                    b.HasIndex("Createdby")
                        .HasName("CDO_CONCEPT_MATCH_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_CONCEPT_MATCH_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("CDO_CONCEPT_MATCH_FK_MASTER_ID");

                    b.HasIndex("MatchGroupId")
                        .HasName("I_CDO_CONCEPT_MATCH_GROUP_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("CDO_CONCEPT_MATCH_I_MASTERVERS");

                    b.HasIndex("ConceptOid", "Version", "PartitionId")
                        .IsUnique()
                        .HasName("I_CDO_CONCEPT_MATCH_CONC_OID");

                    b.ToTable("CDO_CONCEPT_MATCH");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoConst", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("Concept")
                        .HasColumnName("CONCEPT");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<decimal>("Cvalue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CVALUE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Concept")
                        .HasName("CDO_CONST_FK_CONCEPT");

                    b.HasIndex("Created")
                        .HasName("CDO_CONST_I_CREATED");

                    b.HasIndex("Createdby")
                        .HasName("CDO_CONST_FK_CREATEDBY");

                    b.HasIndex("Deleted")
                        .HasName("CDO_CONST_I_DELETED");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_CONST_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_CONST");

                    b.HasIndex("Organization")
                        .HasName("CDO_CONST_FK_ORGANIZATION");

                    b.HasIndex("Code", "Version", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_CONST_I_CODE");

                    b.ToTable("CDO_CONST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoCounter", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Context")
                        .HasColumnName("CONTEXT");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Hcp")
                        .HasColumnName("HCP");

                    b.Property<long?>("Icount")
                        .HasColumnName("ICOUNT");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Targetcid")
                        .HasColumnName("TARGETCID");

                    b.Property<long>("Targetoid")
                        .HasColumnName("TARGETOID");

                    b.HasKey("Oid");

                    b.HasIndex("Hcp")
                        .HasName("CDO_COUNTER_FK_HCP");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_COUNTER");

                    b.HasIndex("Organization")
                        .HasName("CDO_COUNTER_FK_ORG");

                    b.HasIndex("Targetcid")
                        .HasName("I_CDO_COUNTER_TARGETCID");

                    b.HasIndex("Targetoid")
                        .HasName("CDO_COUNTER_I_TARGETOID");

                    b.ToTable("CDO_COUNTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoDataE", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<byte[]>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Heap")
                        .HasColumnName("HEAP")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RefData")
                        .HasColumnName("REF_DATA");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RefMethod")
                        .HasColumnName("REF_METHOD");

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_DATA_E");

                    b.HasIndex("RefData")
                        .HasName("CDO_DATA_E_FK_DATA");

                    b.HasIndex("RefMethod")
                        .HasName("CDO_DATA_E_FK_METHOD");

                    b.ToTable("CDO_DATA_E");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoDataEDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("ContentHash")
                        .HasColumnName("CONTENT_HASH")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("ContentSize")
                        .HasColumnName("CONTENT_SIZE");

                    b.Property<long>("DataId")
                        .HasColumnName("DATA_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("HashAlgo")
                        .HasColumnName("HASH_ALGO")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SourceCode1")
                        .HasColumnName("SOURCE_CODE1")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SourceCode2")
                        .HasColumnName("SOURCE_CODE2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DataId")
                        .HasName("FK_DATA_E_DETAILS_DATA_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_DATA_E_DETAILS");

                    b.ToTable("CDO_DATA_E_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoDataEUsage", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("DataOid")
                        .HasColumnName("DATA_OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LastViewedScale")
                        .HasColumnName("LAST_VIEWED_SCALE")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DataOid")
                        .HasName("CDO_DATA_E_USAGE_FK_DATA_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_DATA_E_USAGE");

                    b.HasIndex("PppuId")
                        .HasName("CDO_DATA_E_USAGE_FK_PPPU_ID");

                    b.HasIndex("DataOid", "PppuId")
                        .IsUnique()
                        .HasName("CDO_DATA_E_USAGE_UI");

                    b.ToTable("CDO_DATA_E_USAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoEhcr", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Dtcreated")
                        .HasColumnName("DTCREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Hcpcreatedby")
                        .HasColumnName("HCPCREATEDBY");

                    b.Property<long?>("HcpcreatedbyCid")
                        .HasColumnName("HCPCREATEDBY_CID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Patient")
                        .HasColumnName("PATIENT");

                    b.Property<long?>("PatientCid")
                        .HasColumnName("PATIENT_CID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Source")
                        .HasColumnName("SOURCE");

                    b.HasKey("Oid");

                    b.HasIndex("Hcpcreatedby")
                        .HasName("CDO_EHCR_FK_CREATEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_EHCR");

                    b.HasIndex("Patient")
                        .HasName("CDO_EHCR_FK_PATIENT");

                    b.HasIndex("Source")
                        .HasName("FK_CDOEHCR_SOURCE");

                    b.HasIndex("PatientCid", "Patient")
                        .IsUnique()
                        .HasName("CDO_EHCR_PATIENT_UN")
                        .HasFilter("[PATIENT_CID] IS NOT NULL AND [PATIENT] IS NOT NULL");

                    b.ToTable("CDO_EHCR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoEhcrsource", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Hcf")
                        .HasColumnName("HCF");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Hcf")
                        .HasName("CDO_EHCRSOURCE_FK_HCF");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_EHCRSOURCE");

                    b.ToTable("CDO_EHCRSOURCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoGrant", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Enddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ENDDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('01-JAN-3000')");

                    b.Property<long?>("Grantee")
                        .HasColumnName("GRANTEE");

                    b.Property<long>("Granttype")
                        .HasColumnName("GRANTTYPE");

                    b.Property<short>("Isclosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISCLOSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long?>("Owner")
                        .HasColumnName("OWNER");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("Startdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STARTDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('30-DEC-1899')");

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_GRANT_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("CDO_GRANT_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_GRANT_FK_DELETEDBY");

                    b.HasIndex("Grantee")
                        .HasName("CDO_GRANT_FK_GRANTEE");

                    b.HasIndex("Granttype")
                        .HasName("CDO_GRANT_I_GRANTTYPE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_GRANT");

                    b.HasIndex("Organization")
                        .HasName("CDO_GRANT_FK_ORGANIZATION");

                    b.HasIndex("Owner")
                        .HasName("CDO_GRANT_FK_OWNER");

                    b.HasIndex("Created", "Deleted")
                        .HasName("CDO_GRANT_I_TIME");

                    b.ToTable("CDO_GRANT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoHriDictionary", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("Controlprops")
                        .HasColumnName("CONTROLPROPS")
                        .HasColumnType("image");

                    b.Property<long?>("Controltype")
                        .HasColumnName("CONTROLTYPE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("HasExtProps")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HAS_EXT_PROPS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.ToTable("CDO_HRI_DICTIONARY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('?')")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<long?>("Context")
                        .HasColumnName("CONTEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Emphasis")
                        .HasColumnName("EMPHASIS");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUANTITY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("Ref1")
                        .HasColumnName("REF1");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Sourcecid")
                        .HasColumnName("SOURCECID");

                    b.Property<long>("Sourceoid")
                        .HasColumnName("SOURCEOID");

                    b.Property<long>("Targetcid")
                        .HasColumnName("TARGETCID");

                    b.Property<long>("Targetoid")
                        .HasColumnName("TARGETOID");

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_LINK_I_CODE");

                    b.HasIndex("Context")
                        .HasName("INDEX_CDO_LINK_CONTEXT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_LINK");

                    b.HasIndex("Organization")
                        .HasName("CDO_LINK_FK_ORGANIZATION");

                    b.HasIndex("Ref1")
                        .HasName("CDO_LINK_I_REF1");

                    b.HasIndex("Created", "Deleted")
                        .HasName("CDO_LINK_I_TIME");

                    b.HasIndex("Sourcecid", "Sourceoid")
                        .HasName("INDEX_CDO_LINK_SOURCE");

                    b.HasIndex("Targetcid", "Targetoid")
                        .HasName("INDEX_CDO_LINK_TARGET");

                    b.ToTable("CDO_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkCxselection", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Context")
                        .HasColumnName("CONTEXT");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Targetcid")
                        .HasColumnName("TARGETCID");

                    b.Property<long>("Targetoid")
                        .HasColumnName("TARGETOID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_LINK_CXSELECTIO");

                    b.ToTable("CDO_LINK_CXSELECTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkPhysunit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Expression")
                        .HasColumnName("EXPRESSION")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Physunit")
                        .HasColumnName("PHYSUNIT");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Expression")
                        .HasName("CDO_LINKPU_INDEX1");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_LINK_PHYSUNIT");

                    b.HasIndex("Physunit")
                        .HasName("CDO_LINK_PHYSUNIT_FK_PHYSUNIT");

                    b.ToTable("CDO_LINK_PHYSUNIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkTvcontact", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Contactid")
                        .HasColumnName("CONTACTID");

                    b.Property<long?>("Context")
                        .HasColumnName("CONTEXT");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IsFormDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_FORM_DELETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SourceCid")
                        .HasColumnName("SOURCE_CID");

                    b.Property<long?>("SourceOid")
                        .HasColumnName("SOURCE_OID");

                    b.Property<string>("Textdescription")
                        .HasColumnName("TEXTDESCRIPTION")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Contactid")
                        .HasName("CDO_LINK_TVCONTACT_FK_CONTACT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_LINK_TVCONTACT");

                    b.HasIndex("PtntId")
                        .HasName("CDO_LINK_TVCONTACT_FK_PTNT_I");

                    b.HasIndex("SourceOid")
                        .HasName("SOURCE_OID");

                    b.ToTable("CDO_LINK_TVCONTACT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUri", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Objcid")
                        .HasColumnName("OBJCID");

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Uri")
                        .HasColumnName("URI");

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_LINK_URI_I_CODE");

                    b.HasIndex("Created")
                        .HasName("CDO_LINK_URI_I_CREATED");

                    b.HasIndex("Createdby")
                        .HasName("CDO_LINK_URI_FK_CREATEDBY");

                    b.HasIndex("Deleted")
                        .HasName("CDO_LINK_URI_I_DELETED");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_LINK_URI_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_LINK_URI");

                    b.HasIndex("Organization")
                        .HasName("CDO_LINK_URI_FK_ORGANIZATION");

                    b.HasIndex("Uri")
                        .HasName("CDO_LINK_URI_FK_URI");

                    b.ToTable("CDO_LINK_URI");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUriConcept", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Obj")
                        .HasColumnName("OBJ");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Obj")
                        .HasName("CDO_LINK_URI_CONCEPT_FK_OBJ");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_LINK_URI_CONCEP");

                    b.ToTable("CDO_LINK_URI_CONCEPT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUriOrg", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Obj")
                        .HasColumnName("OBJ");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Obj")
                        .HasName("CDO_LINK_URI_ORG_FK_OBJ");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_LINK_URI_ORG");

                    b.ToTable("CDO_LINK_URI_ORG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUriPhysunit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Obj")
                        .HasColumnName("OBJ");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Obj")
                        .HasName("CDO_LINK_URI_PHYSUNIT_FK_OBJ");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_LINK_URI_PHYSUN");

                    b.ToTable("CDO_LINK_URI_PHYSUNIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUriRx", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Obj")
                        .HasColumnName("OBJ");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Obj")
                        .HasName("CDO_LINK_URI_RX_FK_OBJ");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_LINK_URI_RX");

                    b.ToTable("CDO_LINK_URI_RX");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoMeasurement", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("Accuracy")
                        .HasColumnName("ACCURACY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Expraspc")
                        .HasColumnName("EXPRASPC");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("Textset")
                        .HasColumnName("TEXTSET")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_MEASUREMENT");

                    b.ToTable("CDO_MEASUREMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoOrganization", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('?')")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Contacts")
                        .HasColumnName("CONTACTS")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_ORG_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("CDO_ORGANIZATION_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_ORGANIZATION_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_ORGANIZATION");

                    b.HasIndex("Organization")
                        .HasName("CDO_ORGANIZATION_FK_ORGAN");

                    b.ToTable("CDO_ORGANIZATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoPerson", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("AccessionPrefs")
                        .HasColumnName("ACCESSION_PREFS")
                        .HasColumnType("image");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RealId")
                        .HasColumnName("REAL_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Cid")
                        .HasName("I_CDO_PERSON_CID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_PERSON");

                    b.HasIndex("RealId")
                        .HasName("CDO_PERSON_REAL_ID_I");

                    b.ToTable("CDO_PERSON");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoPersonImage", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PersonId")
                        .HasColumnName("PERSON_ID");

                    b.Property<byte[]>("PimgData")
                        .HasColumnName("PIMG_DATA")
                        .HasColumnType("image");

                    b.Property<string>("PimgMime")
                        .HasColumnName("PIMG_MIME")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("PimgType")
                        .HasColumnName("PIMG_TYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_PERSON_IMAGE");

                    b.HasIndex("PersonId")
                        .HasName("CDO_PERSON_IMAGE_FK_PERSON_I");

                    b.ToTable("CDO_PERSON_IMAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoPhysquantity", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("A0");

                    b.Property<long?>("A1");

                    b.Property<long?>("A2");

                    b.Property<long?>("A3");

                    b.Property<long?>("A4");

                    b.Property<long?>("BasicIndex")
                        .HasColumnName("BASIC_INDEX");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('?')")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("E0");

                    b.Property<long?>("E1");

                    b.Property<long?>("E2");

                    b.Property<long?>("E3");

                    b.Property<long?>("E4");

                    b.Property<string>("Fname")
                        .HasColumnName("FNAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("Listofnames")
                        .HasColumnName("LISTOFNAMES")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("A0")
                        .HasName("CDO_PHYSQUANTITY_FK_A0");

                    b.HasIndex("A1")
                        .HasName("CDO_PHYSQUANTITY_FK_A1");

                    b.HasIndex("A2")
                        .HasName("CDO_PHYSQUANTITY_FK_A2");

                    b.HasIndex("A3")
                        .HasName("CDO_PHYSQUANTITY_FK_A3");

                    b.HasIndex("A4")
                        .HasName("CDO_PHYSQUANTITY_FK_A4");

                    b.HasIndex("Code")
                        .HasName("CDO_PQ_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("CDO_PHYSQUANTITY_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_PHYSQUANTITY_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_PHYSQUANTITY");

                    b.HasIndex("Organization")
                        .HasName("CDO_PHYSQUANTITY_FK_ORGAN");

                    b.ToTable("CDO_PHYSQUANTITY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<float?>("A");

                    b.Property<float?>("B");

                    b.Property<float?>("C");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('?')")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long?>("Convtype")
                        .HasColumnName("CONVTYPE");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("E0");

                    b.Property<long?>("E1");

                    b.Property<long?>("E2");

                    b.Property<long?>("E3");

                    b.Property<long?>("E4");

                    b.Property<string>("Fname")
                        .HasColumnName("FNAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("Hierarchy")
                        .HasColumnName("HIERARCHY");

                    b.Property<string>("Listofnames")
                        .HasColumnName("LISTOFNAMES")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Physquantity")
                        .HasColumnName("PHYSQUANTITY");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("U0");

                    b.Property<long?>("U1");

                    b.Property<long?>("U2");

                    b.Property<long?>("U3");

                    b.Property<long?>("U4");

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_PU_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("CDO_PHYSUNIT_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_PHYSUNIT_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_PHYSUNIT");

                    b.HasIndex("Organization")
                        .HasName("CDO_PHYSUNIT_FK_ORGAN");

                    b.HasIndex("Physquantity")
                        .HasName("CDO_PHYSUNIT_FK_PHYSQUANTITY");

                    b.HasIndex("U0")
                        .HasName("CDO_PHYSUNIT_FK_U0");

                    b.HasIndex("U1")
                        .HasName("CDO_PHYSUNIT_FK_U1");

                    b.HasIndex("U2")
                        .HasName("CDO_PHYSUNIT_FK_U2");

                    b.HasIndex("U3")
                        .HasName("CDO_PHYSUNIT_FK_U3");

                    b.HasIndex("U4")
                        .HasName("CDO_PHYSUNIT_FK_U4");

                    b.ToTable("CDO_PHYSUNIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoPreference", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Complexfilter")
                        .HasColumnName("COMPLEXFILTER");

                    b.Property<long>("Concept")
                        .HasColumnName("CONCEPT");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Gender")
                        .HasColumnName("GENDER");

                    b.Property<long?>("Hcp")
                        .HasColumnName("HCP");

                    b.Property<long>("Iorder")
                        .HasColumnName("IORDER");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Patient")
                        .HasColumnName("PATIENT");

                    b.Property<long?>("Physunit")
                        .HasColumnName("PHYSUNIT");

                    b.Property<long?>("Practice")
                        .HasColumnName("PRACTICE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Term")
                        .HasColumnName("TERM");

                    b.Property<float?>("Valuemax")
                        .HasColumnName("VALUEMAX");

                    b.Property<float?>("Valuemin")
                        .HasColumnName("VALUEMIN");

                    b.HasKey("Oid");

                    b.HasIndex("Complexfilter")
                        .HasName("CDO_PREFERENCE_FK_COMPLEXFIL");

                    b.HasIndex("Concept")
                        .HasName("CDO_PREFERENCE_FK_CONCEPT");

                    b.HasIndex("Hcp")
                        .HasName("CDO_PREFERENCE_FK_HCP");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_PREFERENCE");

                    b.HasIndex("Patient")
                        .HasName("CDO_PREFERENCE_FK_PATIENT");

                    b.HasIndex("Physunit")
                        .HasName("CDO_PREFERENCE_FK_PHYSUNIT");

                    b.HasIndex("Practice")
                        .HasName("CDO_PREFERENCE_FK_PRACTICE");

                    b.HasIndex("Term")
                        .HasName("CDO_PREFERENCE_FK_TERM");

                    b.ToTable("CDO_PREFERENCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRawdata", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("DataE")
                        .HasColumnName("DATA_E");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Trans")
                        .HasColumnName("TRANS");

                    b.Property<long?>("TransVersion")
                        .HasColumnName("TRANS_VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("DataE")
                        .HasName("FK_CDO_RAWDATA_DATA_E");

                    b.HasIndex("ObjGuid")
                        .HasName("CDO_RAWDATA_I_OBJ_GUID");

                    b.HasIndex("Trans")
                        .HasName("FK_CDO_RAWDATA_TRANS");

                    b.ToTable("CDO_RAWDATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRolegrant", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Enddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ENDDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('01-JAN-3000')");

                    b.Property<long>("Grantee")
                        .HasColumnName("GRANTEE");

                    b.Property<long>("Granttype")
                        .HasColumnName("GRANTTYPE");

                    b.Property<short>("Isclosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISCLOSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Owner")
                        .HasColumnName("OWNER");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("Startdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STARTDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('30-DEC-1899')");

                    b.HasKey("Oid");

                    b.HasIndex("Grantee")
                        .HasName("CDO_ROLEGRANT_FK_GRANTEE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_ROLEGRANT");

                    b.HasIndex("Owner")
                        .HasName("CDO_ROLEGRANT_FK_OWNER");

                    b.ToTable("CDO_ROLEGRANT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRx", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("CmiCid")
                        .HasColumnName("CMI_CID");

                    b.Property<long?>("CmiOid")
                        .HasColumnName("CMI_OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Concept")
                        .HasColumnName("CONCEPT");

                    b.Property<long?>("Concept2")
                        .HasColumnName("CONCEPT2");

                    b.Property<long?>("Concept3")
                        .HasColumnName("CONCEPT3");

                    b.Property<long?>("Concept4")
                        .HasColumnName("CONCEPT4");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Fpicid")
                        .HasColumnName("FPICID");

                    b.Property<long?>("Fpioid")
                        .HasColumnName("FPIOID");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnName("IDENTIFICATION_NUMBER")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long?>("Orgref")
                        .HasColumnName("ORGREF");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUANTITY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Rxsystem")
                        .HasColumnName("RXSYSTEM");

                    b.Property<byte[]>("Textblob")
                        .HasColumnName("TEXTBLOB")
                        .HasColumnType("image");

                    b.Property<string>("Upperdescription")
                        .HasColumnName("UPPERDESCRIPTION")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("CmiOid")
                        .HasName("CDO_RX_FK_CMI_OID");

                    b.HasIndex("Code")
                        .HasName("CDO_RX_I_CODE");

                    b.HasIndex("Concept")
                        .HasName("CDO_RX_FK_CONCEPT");

                    b.HasIndex("Concept2")
                        .HasName("CDO_RX_FK_CONCEPT2");

                    b.HasIndex("Concept3")
                        .HasName("CDO_RX_FK_CONCEPT3");

                    b.HasIndex("Concept4")
                        .HasName("CDO_RX_FK_CONCEPT4");

                    b.HasIndex("Created")
                        .HasName("CDO_RX_I_CREATED");

                    b.HasIndex("Createdby")
                        .HasName("CDO_RX_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_RX_FK_DELETEDBY");

                    b.HasIndex("Fpioid")
                        .HasName("CDO_RX_FK_FPIOID");

                    b.HasIndex("IdentificationNumber")
                        .HasName("CDO_RX_I_IDENTIFICATION_NUM");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RX");

                    b.HasIndex("Organization")
                        .HasName("CDO_RX_FK_ORGANIZATION");

                    b.HasIndex("Orgref")
                        .HasName("CDO_RX_FK_ORGREF");

                    b.HasIndex("Rxsystem")
                        .HasName("CDO_RX_FK_RXSYS");

                    b.HasIndex("Upperdescription")
                        .HasName("CDO_RX_I_UPPERDESCRIPTION");

                    b.ToTable("CDO_RX");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxAuthorityGroupLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FormTemplateId")
                        .HasColumnName("FORM_TEMPLATE_ID");

                    b.Property<long>("GroupId")
                        .HasColumnName("GROUP_ID");

                    b.Property<long?>("LetterTemplateId")
                        .HasColumnName("LETTER_TEMPLATE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDORXAUTHGRPLNK_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("CDORXAUTHGRLINK_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDORXAUTHGRLINK_FK_DELETEDBY");

                    b.HasIndex("FormTemplateId")
                        .HasName("CDORXAUTHGRLINK_FK_FORM");

                    b.HasIndex("GroupId")
                        .HasName("CDORXAUTHGRLINK_FK_GROUP");

                    b.HasIndex("LetterTemplateId")
                        .HasName("CDORXAUTHGRLINK_FK_LETTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RX_AUTHORITY_GR");

                    b.HasIndex("Organization")
                        .HasName("CDORXAUTHGRLINK_FK_ORG");

                    b.ToTable("CDO_RX_AUTHORITY_GROUP_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxcalcindication", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("RxciComment")
                        .HasColumnName("RXCI_COMMENT")
                        .HasColumnType("image");

                    b.Property<double?>("RxciConcvol")
                        .HasColumnName("RXCI_CONCVOL");

                    b.Property<double?>("RxciConcweight")
                        .HasColumnName("RXCI_CONCWEIGHT");

                    b.Property<DateTime?>("RxciCreateddatetime")
                        .HasColumnName("RXCI_CREATEDDATETIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("RxciCreatedpppuid")
                        .HasColumnName("RXCI_CREATEDPPPUID");

                    b.Property<double?>("RxciDosagerate")
                        .HasColumnName("RXCI_DOSAGERATE");

                    b.Property<long?>("RxciDoses")
                        .HasColumnName("RXCI_DOSES");

                    b.Property<string>("RxciIndication")
                        .HasColumnName("RXCI_INDICATION")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("RxciMaxage")
                        .HasColumnName("RXCI_MAXAGE");

                    b.Property<long?>("RxciMinage")
                        .HasColumnName("RXCI_MINAGE");

                    b.Property<DateTime?>("RxciModifieddt")
                        .HasColumnName("RXCI_MODIFIEDDT")
                        .HasColumnType("datetime");

                    b.Property<long?>("RxciModifiedpppuid")
                        .HasColumnName("RXCI_MODIFIEDPPPUID");

                    b.Property<long>("RxciPreparation")
                        .HasColumnName("RXCI_PREPARATION");

                    b.Property<string>("RxciSex")
                        .HasColumnName("RXCI_SEX")
                        .HasColumnType("char(1)");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXCALCINDICATIO");

                    b.HasIndex("RxciCreatedpppuid")
                        .HasName("FK_RXCALCINDICATION_CREATED");

                    b.HasIndex("RxciModifiedpppuid")
                        .HasName("FK_RXCALCINDICATION_MODIFIED");

                    b.HasIndex("RxciPreparation")
                        .HasName("RXCALCINDICATION_FK_RX");

                    b.ToTable("CDO_RXCALCINDICATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxcmi", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXCMI");

                    b.HasIndex("Code", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_RXCMI_UI_CODE");

                    b.ToTable("CDO_RXCMI");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxcmidetail", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("CmiCid")
                        .HasColumnName("CMI_CID");

                    b.Property<long>("CmiOid")
                        .HasColumnName("CMI_OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("HtmlText")
                        .HasColumnName("HTML_TEXT")
                        .HasColumnType("image");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PdfText")
                        .HasColumnName("PDF_TEXT")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CmiOid")
                        .HasName("CDO_RXCMIDETAIL_FK_CMI_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXCMIDETAIL");

                    b.HasIndex("Code", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_RXCMIDETAIL_UI_CODE");

                    b.ToTable("CDO_RXCMIDETAIL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxConcept", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("Comment")
                        .HasColumnName("COMMENT")
                        .HasColumnType("image");

                    b.Property<long>("ConceptOid")
                        .HasColumnName("CONCEPT_OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<long>("Degree")
                        .HasColumnName("DEGREE");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("MaxAffectedAge")
                        .HasColumnName("MAX_AFFECTED_AGE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MinAffectedAge")
                        .HasColumnName("MIN_AFFECTED_AGE")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrgRef")
                        .HasColumnName("ORG_REF");

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QualifierOid")
                        .HasColumnName("QUALIFIER_OID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SetOid")
                        .HasColumnName("SET_OID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("ConceptOid")
                        .HasName("CDO_RX_CONCEPT_FK_CONCEPT_OID");

                    b.HasIndex("Createdby")
                        .HasName("CDO_RX_CONCEPT_I_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_RX_CONCEPT_I_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("CDO_RX_CONCEPT_I_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("CDO_RX_CONCEPT_I_OBJ_GUID");

                    b.HasIndex("OrgRef")
                        .HasName("CDO_RX_CONCEPT_FK_ORG_REF");

                    b.HasIndex("Organization")
                        .HasName("CDO_RX_CONCEPT_FK_ORG");

                    b.HasIndex("QualifierOid")
                        .HasName("CDO_RX_CONCEPT_FK_QUAL_OID");

                    b.HasIndex("SetOid")
                        .HasName("CDO_RX_CONCEPT_FK_SET_OID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("CDO_RX_CONCEPT_I_MASTERVERS");

                    b.HasIndex("Code", "Version", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_RX_CONCEPT_IDX_CODE");

                    b.ToTable("CDO_RX_CONCEPT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxConceptSet", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("CDO_RX_CONCEPT_SET_I_OBJ_GUID");

                    b.HasIndex("Code", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_RX_CONCEPT_SET_IDX_CODE");

                    b.ToTable("CDO_RX_CONCEPT_SET");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxConceptSetLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("ConceptSetOid")
                        .HasColumnName("CONCEPT_SET_OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RxOid")
                        .HasColumnName("RX_OID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("ConceptSetOid")
                        .HasName("CDO_RX_CONCSETLNK_FK_SETOID");

                    b.HasIndex("Createdby")
                        .HasName("CDO_RX_CONCSETLNK_I_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_RX_CONCSETLNK_I_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("CDO_RX_CONCSETLNK_I_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("CDO_RX_CONCEPT_SET_LINK_I_OBJ_");

                    b.HasIndex("RxOid")
                        .HasName("CDO_RX_CONCSETLNK_FK_RX_OID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("CDO_RX_CONCSETLNK_I_MASTERVERS");

                    b.HasIndex("RxOid", "ConceptSetOid", "Version", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_RX_CONCSETLNK_IDX_LINK");

                    b.ToTable("CDO_RX_CONCEPT_SET_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxfpi", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("CDO_RXFPI_UK_CODE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXFPI");

                    b.ToTable("CDO_RXFPI");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxfpiColor", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("CDO_RXFPI_COLOR_UK_CODE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXFPI_COLOR");

                    b.ToTable("CDO_RXFPI_COLOR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxfpiGroup", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Comments")
                        .HasColumnName("COMMENTS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Dxcrossreference")
                        .HasColumnName("DXCROSSREFERENCE")
                        .HasColumnType("image");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Pbsbrandsubstitution")
                        .HasColumnName("PBSBRANDSUBSTITUTION")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("Texts")
                        .HasColumnName("TEXTS")
                        .HasColumnType("image");

                    b.Property<byte[]>("Therapeuticgrouppremiums")
                        .HasColumnName("THERAPEUTICGROUPPREMIUMS")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("Oid")
                        .HasName("CDO_RXFPI_GROUP_FK_OID");

                    b.ToTable("CDO_RXFPI_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxfpiImage", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Images")
                        .HasColumnName("IMAGES")
                        .HasColumnType("image");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("CDO_RXFPI_IMAGE_UK_CODE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXFPI_IMAGE");

                    b.ToTable("CDO_RXFPI_IMAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxfpiPreparation", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("Actions")
                        .HasColumnName("ACTIONS")
                        .HasColumnType("image");

                    b.Property<byte[]>("Adversereactions")
                        .HasColumnName("ADVERSEREACTIONS")
                        .HasColumnType("image");

                    b.Property<DateTime?>("Changedate")
                        .HasColumnName("CHANGEDATE")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Composition")
                        .HasColumnName("COMPOSITION")
                        .HasColumnType("image");

                    b.Property<byte[]>("Contraindications")
                        .HasColumnName("CONTRAINDICATIONS")
                        .HasColumnType("image");

                    b.Property<DateTime?>("Createdate")
                        .HasColumnName("CREATEDATE")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("image");

                    b.Property<byte[]>("Directionsforuse")
                        .HasColumnName("DIRECTIONSFORUSE")
                        .HasColumnType("image");

                    b.Property<byte[]>("Dosageandadministration")
                        .HasColumnName("DOSAGEANDADMINISTRATION")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Indications")
                        .HasColumnName("INDICATIONS")
                        .HasColumnType("image");

                    b.Property<byte[]>("Interactions")
                        .HasColumnName("INTERACTIONS")
                        .HasColumnType("image");

                    b.Property<byte[]>("Overdosage")
                        .HasColumnName("OVERDOSAGE")
                        .HasColumnType("image");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Poisonsschedule")
                        .HasColumnName("POISONSSCHEDULE")
                        .HasColumnType("image");

                    b.Property<byte[]>("Precautions")
                        .HasColumnName("PRECAUTIONS")
                        .HasColumnType("image");

                    b.Property<byte[]>("Presentation")
                        .HasColumnName("PRESENTATION")
                        .HasColumnType("image");

                    b.Property<string>("Productname")
                        .HasColumnName("PRODUCTNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("Productnameplain")
                        .HasColumnName("PRODUCTNAMEPLAIN")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Referencedate")
                        .HasColumnName("REFERENCEDATE")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Specialwarnings")
                        .HasColumnName("SPECIALWARNINGS")
                        .HasColumnType("image");

                    b.Property<byte[]>("Storage")
                        .HasColumnName("STORAGE")
                        .HasColumnType("image");

                    b.Property<byte[]>("Warnings")
                        .HasColumnName("WARNINGS")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("Oid")
                        .HasName("CDO_RXFPI_PREPARATION_FK_OID");

                    b.ToTable("CDO_RXFPI_PREPARATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxfpiProductident", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Alpha")
                        .HasColumnName("ALPHA")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<long?>("Coloroid")
                        .HasColumnName("COLOROID");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Fpipreparationcid")
                        .HasColumnName("FPIPREPARATIONCID");

                    b.Property<long>("Fpipreparationoid")
                        .HasColumnName("FPIPREPARATIONOID");

                    b.Property<long?>("Imagecid")
                        .HasColumnName("IMAGECID");

                    b.Property<long?>("Imageoid")
                        .HasColumnName("IMAGEOID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("CDO_RXFPI_PID_UK_CODE");

                    b.HasIndex("Coloroid")
                        .HasName("RXFPI_PRODUCTIDENT_FK_COLOR");

                    b.HasIndex("Fpipreparationoid")
                        .HasName("CDO_RXFPI_PID_FK_PREPOID");

                    b.HasIndex("Imageoid")
                        .HasName("RXFPI_PRODUCT_FK_IMAGE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXFPI_PRODUCTID");

                    b.ToTable("CDO_RXFPI_PRODUCTIDENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxinstr", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Agecategory")
                        .HasColumnName("AGECATEGORY");

                    b.Property<long?>("Agemax")
                        .HasColumnName("AGEMAX");

                    b.Property<long?>("Agemin")
                        .HasColumnName("AGEMIN");

                    b.Property<long?>("Asgeneric")
                        .HasColumnName("ASGENERIC");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long?>("Doseunit")
                        .HasColumnName("DOSEUNIT");

                    b.Property<decimal>("Dosevalue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DOSEVALUE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Frequnit")
                        .HasColumnName("FREQUNIT");

                    b.Property<long?>("Freqvalue")
                        .HasColumnName("FREQVALUE");

                    b.Property<long?>("Gender")
                        .HasColumnName("GENDER");

                    b.Property<short>("IsBrandSubst")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_BRAND_SUBST")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Massmax")
                        .HasColumnName("MASSMAX");

                    b.Property<long?>("Massmin")
                        .HasColumnName("MASSMIN");

                    b.Property<string>("MinDispenseInterval")
                        .HasColumnName("MIN_DISPENSE_INTERVAL")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("Mitteunit")
                        .HasColumnName("MITTEUNIT");

                    b.Property<decimal>("Mittevalue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MITTEVALUE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("NoteId")
                        .HasColumnName("NOTE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Ord")
                        .HasColumnName("ORD");

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<short>("PaperCopyRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPER_COPY_REQUIRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Parent")
                        .HasColumnName("PARENT");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Qualifier")
                        .HasColumnName("QUALIFIER");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Repeats")
                        .HasColumnName("REPEATS");

                    b.Property<string>("RepeatsComment")
                        .HasColumnName("REPEATS_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("RxName")
                        .HasColumnName("RX_NAME")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long?>("Rxpackage")
                        .HasColumnName("RXPACKAGE");

                    b.Property<long?>("Rxsource")
                        .HasColumnName("RXSOURCE");

                    b.Property<long?>("Rxsourcecid")
                        .HasColumnName("RXSOURCECID");

                    b.Property<long?>("Rxtotake")
                        .HasColumnName("RXTOTAKE");

                    b.Property<string>("Sig")
                        .HasColumnName("SIG")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<byte[]>("Textblob")
                        .HasColumnName("TEXTBLOB")
                        .HasColumnType("image");

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Agecategory")
                        .HasName("CDO_RXINSTR_FK_AGE");

                    b.HasIndex("Code")
                        .HasName("CDO_RXINSTR_I_CODE");

                    b.HasIndex("Created")
                        .HasName("CDO_RXINSTR_I_CREATED");

                    b.HasIndex("Createdby")
                        .HasName("CDO_RXINSTR_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_RXINSTR_FK_DELETEDBY");

                    b.HasIndex("Doseunit")
                        .HasName("CDO_RXINSTR_FK_DOSEUNIT");

                    b.HasIndex("Frequnit")
                        .HasName("CDO_RXINSTR_FK_FREQUNIT");

                    b.HasIndex("Mitteunit")
                        .HasName("CDO_RXINSTR_FK_MITTEUNIT");

                    b.HasIndex("NoteId")
                        .HasName("CDO_RXINSTR_FK_NOTE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXINSTR");

                    b.HasIndex("Organization")
                        .HasName("CDO_RXINSTR_FK_ORGANIZATION");

                    b.HasIndex("Parent")
                        .HasName("CDO_RXINSTR_FK_PARENT");

                    b.HasIndex("Qualifier")
                        .HasName("CDO_RXINSTR_FK_QUALIFIER");

                    b.HasIndex("Rxpackage")
                        .HasName("CDO_RXINSTR_FK_RXPACK");

                    b.HasIndex("Rxsource")
                        .HasName("CDO_RXINSTR_FK_RXSOURCE");

                    b.HasIndex("Rxtotake")
                        .HasName("CDO_RXINSTR_FK_RXTOTAKE");

                    b.ToTable("CDO_RXINSTR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxinstrNote", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Isshared")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISSHARED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnName("NOTE")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_RXINSTR_NOTE_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("CDO_RXINSTR_NOTE_FK_CREATEDB");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_RXINSTR_NOTE_FK_DELETEDB");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXINSTR_NOTE");

                    b.ToTable("CDO_RXINSTR_NOTE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxinstrPreferred", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuOid")
                        .HasColumnName("PPPU_OID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RxinstrOid")
                        .HasColumnName("RXINSTR_OID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXINSTR_PREFERR");

                    b.HasIndex("PppuOid")
                        .HasName("CDO_RXINSTR_PREFERRED_FK_PPP");

                    b.HasIndex("RxinstrOid")
                        .HasName("CDO_RXINSTR_PREFERRED_FK_RX");

                    b.ToTable("CDO_RXINSTR_PREFERRED");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxlink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Concept")
                        .HasColumnName("CONCEPT");

                    b.Property<long?>("Concept2")
                        .HasColumnName("CONCEPT2");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long?>("Orgref")
                        .HasColumnName("ORGREF");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("Q1");

                    b.Property<float?>("Q2");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Rxsource")
                        .HasColumnName("RXSOURCE");

                    b.Property<long?>("Rxtarget")
                        .HasColumnName("RXTARGET");

                    b.Property<byte[]>("Textblob")
                        .HasColumnName("TEXTBLOB")
                        .HasColumnType("image");

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_RXLINK_I_CODE");

                    b.HasIndex("Concept")
                        .HasName("CDO_RXLINK_FK_CONCEPT");

                    b.HasIndex("Concept2")
                        .HasName("CDO_RXLINK_FK_CONCEPT2");

                    b.HasIndex("Created")
                        .HasName("CDO_RXLINK_I_CREATED");

                    b.HasIndex("Createdby")
                        .HasName("CDO_RXLINK_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_RXLINK_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXLINK");

                    b.HasIndex("Organization")
                        .HasName("CDO_RXLINK_FK_ORGANIZATION");

                    b.HasIndex("Orgref")
                        .HasName("CDO_RXLINK_FK_ORGREF");

                    b.HasIndex("Rxsource")
                        .HasName("CDO_RXLINK_FK_RXSOURCE");

                    b.HasIndex("Rxtarget")
                        .HasName("CDO_RXLINK_FK_RXTARGET");

                    b.HasIndex("Rxsource", "Cid")
                        .HasName("CDO_RX_LINK_I_RXSOURCE_CID");

                    b.HasIndex("Rxtarget", "Cid")
                        .HasName("CDO_RX_LINK_I_RXTARGET_CID");

                    b.ToTable("CDO_RXLINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxlinkex", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<long>("DdiCodex")
                        .HasColumnName("DDI_CODEX");

                    b.Property<long>("Degree")
                        .HasColumnName("DEGREE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Rxsource")
                        .HasColumnName("RXSOURCE");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnName("SEVERITY")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DdiCodex")
                        .HasName("CDO_RXLINKEX_I_DDICODEX");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXLINKEX");

                    b.HasIndex("Organization")
                        .HasName("CDO_RXLINKEX_FK_ORG");

                    b.HasIndex("Rxsource")
                        .HasName("CDO_RXLINKEX_FK_RXSOURCE");

                    b.HasIndex("Code", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_RXLINKEX_I_CODE");

                    b.ToTable("CDO_RXLINKEX");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxmidcoursecorrection", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("DailyDoseAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DAILY_DOSE_ASSIGNED")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("DailyDoseMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DAILY_DOSE_MAX")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("DailyDoseMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DAILY_DOSE_MIN")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("DailyDoseUnit")
                        .HasColumnName("DAILY_DOSE_UNIT");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("MccDatetime")
                        .HasColumnName("MCC_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<decimal>("MccDosage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MCC_DOSAGE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("MccDosage2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MCC_DOSAGE2")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("MccDosageunitOid")
                        .HasColumnName("MCC_DOSAGEUNIT_OID");

                    b.Property<byte[]>("MccFreqstr")
                        .HasColumnName("MCC_FREQSTR")
                        .HasColumnType("image");

                    b.Property<long?>("MccFrequnitOid")
                        .HasColumnName("MCC_FREQUNIT_OID");

                    b.Property<long?>("MccFreqvalue")
                        .HasColumnName("MCC_FREQVALUE");

                    b.Property<byte[]>("MccNote")
                        .HasColumnName("MCC_NOTE")
                        .HasColumnType("image");

                    b.Property<long?>("MccNoteOid")
                        .HasColumnName("MCC_NOTE_OID");

                    b.Property<long>("MccRxprescrOid")
                        .HasColumnName("MCC_RXPRESCR_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DailyDoseUnit")
                        .HasName("FK_MIDCOURSE_DAILY_DOSE_UNIT");

                    b.HasIndex("MccDosageunitOid")
                        .HasName("CDO_RXMIDCOURSECORR_FK_2");

                    b.HasIndex("MccFrequnitOid")
                        .HasName("CDO_RXMIDCOURSECORR_FK_3");

                    b.HasIndex("MccNoteOid")
                        .HasName("CDO_RXMIDCOURSECORR_FK_4");

                    b.HasIndex("MccRxprescrOid")
                        .HasName("CDO_RXMIDCOURSECORR_FK_1");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXMIDCOURSECORR");

                    b.ToTable("CDO_RXMIDCOURSECORRECTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxPreferred", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuOid")
                        .HasColumnName("PPPU_OID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RxOid")
                        .HasColumnName("RX_OID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RX_PREFERRED");

                    b.HasIndex("PppuOid")
                        .HasName("CDO_RX_PREFERRED_FK_PPPU");

                    b.HasIndex("RxOid")
                        .HasName("CDO_RX_PREFERRED_FK_RX");

                    b.ToTable("CDO_RX_PREFERRED");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ActionLinkStatus")
                        .HasColumnName("ACTION_LINK_STATUS");

                    b.Property<long?>("Asgeneric")
                        .HasColumnName("ASGENERIC");

                    b.Property<string>("AuthCode")
                        .HasColumnName("AUTH_CODE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AuthDate")
                        .HasColumnName("AUTH_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AuthDateTo")
                        .HasColumnName("AUTH_DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<long?>("AuthFormId")
                        .HasColumnName("AUTH_FORM_ID");

                    b.Property<long?>("AuthLetterId")
                        .HasColumnName("AUTH_LETTER_ID");

                    b.Property<string>("AuthName")
                        .HasColumnName("AUTH_NAME")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("ContactDscdId")
                        .HasColumnName("CONTACT_DSCD_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<long>("DailyDoseAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DAILY_DOSE_ASSIGNED")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("DailyDoseMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DAILY_DOSE_MAX")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("DailyDoseMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DAILY_DOSE_MIN")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("DailyDoseUnit")
                        .HasColumnName("DAILY_DOSE_UNIT");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<string>("DispenserAddress")
                        .HasColumnName("DISPENSER_ADDRESS")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("DispenserName")
                        .HasColumnName("DISPENSER_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("DispenserOrgname")
                        .HasColumnName("DISPENSER_ORGNAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("DispenserPhones")
                        .HasColumnName("DISPENSER_PHONES")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("DoseUnitName")
                        .HasColumnName("DOSE_UNIT_NAME")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long?>("Doseunit")
                        .HasColumnName("DOSEUNIT");

                    b.Property<decimal>("Dosevalue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DOSEVALUE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("DscdId")
                        .HasColumnName("DSCD_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Efaxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EFAXCOUNT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Ehcr")
                        .HasColumnName("EHCR");

                    b.Property<short>("EprscrAllowView")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EPRSCR_ALLOW_VIEW")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EprscrCancellationReason")
                        .HasColumnName("EPRSCR_CANCELLATION_REASON")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("EprscrItemStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EPRSCR_ITEM_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("EprscrLogId")
                        .HasColumnName("EPRSCR_LOG_ID");

                    b.Property<short>("EprscrReferred")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EPRSCR_REFERRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EprscrScid")
                        .HasColumnName("EPRSCR_SCID")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<long>("EprscrSequenceNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EPRSCR_SEQUENCE_NO")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("EprscrStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EPRSCR_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("EprscrWasEprescr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EPRSCR_WAS_EPRESCR")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ExternalEntityId")
                        .HasColumnName("EXTERNAL_ENTITY_ID");

                    b.Property<DateTime?>("Finishdate")
                        .HasColumnName("FINISHDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FirstcreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FIRSTCREATED_DT")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Firstcreatedby")
                        .HasColumnName("FIRSTCREATEDBY");

                    b.Property<long?>("Frequnit")
                        .HasColumnName("FREQUNIT");

                    b.Property<long?>("Freqvalue")
                        .HasColumnName("FREQVALUE");

                    b.Property<long?>("HcpA")
                        .HasColumnName("HCP_A");

                    b.Property<short>("IsBrandSubst")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_BRAND_SUBST")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LastPrintedBy")
                        .HasColumnName("LAST_PRINTED_BY");

                    b.Property<DateTime?>("LastPrintedDt")
                        .HasColumnName("LAST_PRINTED_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("MinDispenseInterval")
                        .HasColumnName("MIN_DISPENSE_INTERVAL")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal>("MitteAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MITTE_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("MitteStr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MITTE_STR")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<short>("MitteStrAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MITTE_STR_ASSIGNED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MitteUnitName")
                        .HasColumnName("MITTE_UNIT_NAME")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long?>("Mitteunit")
                        .HasColumnName("MITTEUNIT");

                    b.Property<decimal>("Mittevalue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MITTEVALUE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("NoteId")
                        .HasColumnName("NOTE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Obs")
                        .HasColumnName("OBS");

                    b.Property<long?>("Ord")
                        .HasColumnName("ORD");

                    b.Property<long?>("OrderWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORDER_WEIGHT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("OrderedElsewhere")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORDERED_ELSEWHERE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<short>("PaperCopyRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPER_COPY_REQUIRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PaprId")
                        .HasColumnName("PAPR_ID");

                    b.Property<long?>("Parent")
                        .HasColumnName("PARENT");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PickupDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PICKUP_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("PrescriptionStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRESCRIPTION_STATUS")
                        .HasDefaultValueSql("((1))");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<string>("ProtocolId")
                        .HasColumnName("PROTOCOL_ID")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("Providerid")
                        .HasColumnName("PROVIDERID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Repeats")
                        .HasColumnName("REPEATS");

                    b.Property<string>("RepeatsComment")
                        .HasColumnName("REPEATS_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long?>("RouteShortcodeId")
                        .HasColumnName("ROUTE_SHORTCODE_ID");

                    b.Property<string>("RxName")
                        .HasColumnName("RX_NAME")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long?>("Rxpackage")
                        .HasColumnName("RXPACKAGE");

                    b.Property<long>("RxprescrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RXPRESCR_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Rxsource")
                        .HasColumnName("RXSOURCE");

                    b.Property<long?>("Rxsourcecid")
                        .HasColumnName("RXSOURCECID");

                    b.Property<long?>("Rxtotake")
                        .HasColumnName("RXTOTAKE");

                    b.Property<string>("Sig")
                        .HasColumnName("SIG")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long?>("SrcRxscheduleId")
                        .HasColumnName("SRC_RXSCHEDULE_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("StartDatePartial")
                        .HasColumnName("START_DATE_PARTIAL")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<byte[]>("Textblob")
                        .HasColumnName("TEXTBLOB")
                        .HasColumnType("image");

                    b.Property<long?>("Trans")
                        .HasColumnName("TRANS");

                    b.Property<long?>("TreatmentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TREATMENT_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.Property<DateTime?>("WrittenDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WRITTEN_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("WrittenDatePartial")
                        .HasColumnName("WRITTEN_DATE_PARTIAL")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AuthFormId")
                        .HasName("FK_CDO_RXPRESCR_AUTH_FORM");

                    b.HasIndex("AuthLetterId")
                        .HasName("FK_CDO_RXPRESCR_AUTH_LET");

                    b.HasIndex("Code")
                        .HasName("CDO_RXPRESCR_I_CODE");

                    b.HasIndex("ContactDscdId")
                        .HasName("CDO_RXPRESCR_FK_CONT_DSCD_ID");

                    b.HasIndex("Created")
                        .HasName("CDO_RXPRESCR_I_CREATED");

                    b.HasIndex("Createdby")
                        .HasName("CDO_RXPRESCR_FK_CREATEDBY");

                    b.HasIndex("DailyDoseUnit")
                        .HasName("FK_RXPRESCR_DAILY_DOSE_UNIT");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_RXPRESCR_FK_DELETEDBY");

                    b.HasIndex("Doseunit")
                        .HasName("CDO_RXPRESCR_FK_DOSEUNIT");

                    b.HasIndex("DscdId")
                        .HasName("CDO_RXPRESCR_FK_DXCODE");

                    b.HasIndex("Ehcr")
                        .HasName("CDO_RXPRESCR_FK_EHCR");

                    b.HasIndex("EprscrLogId")
                        .HasName("FK_RXPRESCR_EPRSCR_LOG");

                    b.HasIndex("EprscrScid")
                        .HasName("CDO_RXPRESCR_I_EPRSCR_SCID");

                    b.HasIndex("ExternalEntityId")
                        .HasName("FK_RXPRESCR_EXTL_ENTITY_ID");

                    b.HasIndex("Firstcreatedby")
                        .HasName("FK_FIRSTCREATEDBY");

                    b.HasIndex("Frequnit")
                        .HasName("CDO_RXPRESCR_FK_FREQUNIT");

                    b.HasIndex("HcpA")
                        .HasName("CDO_PRESCR_FK_HCP_A");

                    b.HasIndex("LastPrintedBy")
                        .HasName("FK_RXPRESCR_LAST_PRINTED_BY");

                    b.HasIndex("Mitteunit")
                        .HasName("CDO_RXPRESCR_FK_MITTEUNIT");

                    b.HasIndex("NoteId")
                        .HasName("CDO_RXPRESCR_FK_NOTE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXPRESCR");

                    b.HasIndex("Obs")
                        .HasName("CDO_RXPRESCR_FK_OBS");

                    b.HasIndex("Organization")
                        .HasName("CDO_RXPRESCR_FK_ORG");

                    b.HasIndex("PaprId")
                        .HasName("CDO_RXPRESCR_FK_PROBLEM");

                    b.HasIndex("Parent")
                        .HasName("CDO_RXPRESCR_FK_PARENT");

                    b.HasIndex("PrivacyId")
                        .HasName("CDO_RXPRESCR_FK_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("CDO_RXPRESCR_FK_PPPU");

                    b.HasIndex("Providerid")
                        .HasName("FK_CDO_RXPRESCR_PROVIDERID");

                    b.HasIndex("RouteShortcodeId")
                        .HasName("FK_RXPRESCR_ROUTE_SHORTCODE_ID");

                    b.HasIndex("Rxpackage")
                        .HasName("CDO_RXPRESCR_FK_RXPACK");

                    b.HasIndex("Rxsource")
                        .HasName("CDO_RXPRESCR_FK_RXSOURCE");

                    b.HasIndex("Rxtotake")
                        .HasName("CDO_RXPRESCR_FK_RXTOTAKE");

                    b.HasIndex("SrcRxscheduleId")
                        .HasName("FK_RXPRESCR_RXSCHEDULES");

                    b.HasIndex("Trans")
                        .HasName("CDO_RXPRESCR_FK_TRANS");

                    b.HasIndex("EprscrScid", "EprscrSequenceNo")
                        .HasName("CDO_RXPRESCR_I_EPRSCR");

                    b.ToTable("CDO_RXPRESCR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxprescrDisconInfo", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("DiscontinueDate")
                        .HasColumnName("DISCONTINUE_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ReasonComment")
                        .HasColumnName("REASON_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long?>("ReasonId")
                        .HasColumnName("REASON_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RxprescrId")
                        .HasColumnName("RXPRESCR_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXPRESCR_DISCON");

                    b.HasIndex("ReasonId")
                        .HasName("RXPRESCR_DISC_INF_FK_SHORTCO");

                    b.HasIndex("RxprescrId")
                        .HasName("RXPRESCR_DISC_INF_FK_RXPRESC");

                    b.ToTable("CDO_RXPRESCR_DISCON_INFO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxprescrlink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Sourceid")
                        .HasColumnName("SOURCEID");

                    b.Property<long>("Targetid")
                        .HasColumnName("TARGETID");

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_RXPRESCRLINK_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("RXPRESCRLINK_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RXPRESCRLINK_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXPRESCRLINK");

                    b.HasIndex("Sourceid")
                        .HasName("PK_CDO_RXPRESCRLINK_SOURCEID");

                    b.HasIndex("Targetid")
                        .HasName("PK_CDO_RXPRESCRLINK_TARGETID");

                    b.ToTable("CDO_RXPRESCRLINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxsystem", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnName("DEADLINE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DisplayValidTo")
                        .HasColumnName("DISPLAY_VALID_TO")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Importeddate")
                        .HasColumnName("IMPORTEDDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Termsetcode")
                        .IsRequired()
                        .HasColumnName("TERMSETCODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<byte[]>("Textblob")
                        .HasColumnName("TEXTBLOB")
                        .HasColumnType("image");

                    b.Property<DateTime?>("Validfrom")
                        .HasColumnName("VALIDFROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Validto")
                        .HasColumnName("VALIDTO")
                        .HasColumnType("datetime");

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("CDO_RXSYS_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_RXSYS_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXSYSTEM");

                    b.HasIndex("Organization")
                        .HasName("CDO_RXSYS_FK_ORGANIZATION");

                    b.ToTable("CDO_RXSYSTEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxxref", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Rx0")
                        .IsRequired()
                        .HasColumnName("RX0")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Rx1")
                        .IsRequired()
                        .HasColumnName("RX1")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Sys0")
                        .IsRequired()
                        .HasColumnName("SYS0")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("Sys1")
                        .IsRequired()
                        .HasColumnName("SYS1")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_RXXREF");

                    b.HasIndex("Rx0")
                        .HasName("CDO_RXXREF_I_RX0");

                    b.HasIndex("Rx1")
                        .HasName("CDO_RXXREF_I_RX1");

                    b.ToTable("CDO_RXXREF");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoSpecialPerson", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Id")
                        .HasColumnName("ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Id")
                        .HasName("CDO_SPECIAL_PERSON_I_ID");

                    b.ToTable("CDO_SPECIAL_PERSON");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTemplateLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CtlFormId")
                        .HasColumnName("CTL_FORM_ID");

                    b.Property<long>("CtlLinkType")
                        .HasColumnName("CTL_LINK_TYPE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CtlFormId")
                        .HasName("CTL_FORM_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TEMPLATE_LINKS");

                    b.ToTable("CDO_TEMPLATE_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermset", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasColumnName("COMMENT_")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long?>("Copyrights")
                        .HasColumnName("COPYRIGHTS");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Hierarchical")
                        .HasColumnName("HIERARCHICAL");

                    b.Property<string>("Maxcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MAXCODE")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Copyrights")
                        .HasName("FK_TERMSET_COPYRIGHTS");

                    b.HasIndex("Createdby")
                        .HasName("CDO_TERMSET_FK_CREATEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TERMSET");

                    b.HasIndex("Organization")
                        .HasName("CDO_TERMSET_FK_ORGAN");

                    b.HasIndex("Code", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_TERMSET_I_CODE");

                    b.ToTable("CDO_TERMSET");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CID")
                        .HasDefaultValueSql("((100010))");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Prefterm")
                        .HasColumnName("PREFTERM");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("char(1)");

                    b.Property<long>("Termset")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TERMSET")
                        .HasDefaultValueSql("((2))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("CDO_TC_FK_CREATED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TERMSET_CONCEPT");

                    b.HasIndex("Organization")
                        .HasName("TERMSET_CONCEPT_FK_ORGAN");

                    b.HasIndex("Prefterm")
                        .HasName("TERMSET_CONCEPT_FK_TERM");

                    b.HasIndex("Termset")
                        .HasName("CDO_CONCEPT_FK_TERMSET");

                    b.HasIndex("Code", "Termset", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_CONCEPT_I_CODETERMSET");

                    b.ToTable("CDO_TERMSET_CONCEPT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetCrossref", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('?')")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<long>("Concept1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CONCEPT1_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Concept2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CONCEPT2_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("STATUS")
                        .HasColumnType("char(1)");

                    b.HasKey("Oid");

                    b.HasIndex("Concept1Id")
                        .HasName("CDO_TS_CROSS_FK_CONCEPT1");

                    b.HasIndex("Concept2Id")
                        .HasName("CDO_TS_CROSS_FK_CONCEPT2");

                    b.HasIndex("Createdby")
                        .HasName("CDO_TCR_FK_CREATED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TERMSET_CROSSRE");

                    b.HasIndex("Organization")
                        .HasName("TERMSET_CROSSREF_FK_ORGAN");

                    b.HasIndex("Concept1Id", "Concept2Id", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_TSCROSSREF_I_C1C2P");

                    b.ToTable("CDO_TERMSET_CROSSREF");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetLinkcc", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('?')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PCid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("P_CID")
                        .HasDefaultValueSql("((100010))");

                    b.Property<long?>("Parent")
                        .HasColumnName("PARENT");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SCid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("S_CID")
                        .HasDefaultValueSql("((100010))");

                    b.Property<long?>("Source")
                        .HasColumnName("SOURCE");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("CDO_TLCC_CREATED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TERMSET_LINKCC");

                    b.HasIndex("Organization")
                        .HasName("TERMSET_LINKCC_FK_ORGAN");

                    b.HasIndex("Parent")
                        .HasName("CDO_TSLINKCC_FK_PARENT");

                    b.HasIndex("Source")
                        .HasName("CDO_TSLINKCC_FK_SOURCE");

                    b.HasIndex("Code", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_TSLINKCC_I_CODE");

                    b.ToTable("CDO_TERMSET_LINKCC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetLinktc", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('?')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PCid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("P_CID")
                        .HasDefaultValueSql("((100010))");

                    b.Property<long?>("Parent")
                        .HasColumnName("PARENT");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Source")
                        .HasColumnName("SOURCE");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("CDO_TLTC_CREATED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TERMSET_LINKTC");

                    b.HasIndex("Organization")
                        .HasName("TERMSET_LINKTC_FK_ORGAN");

                    b.HasIndex("Parent")
                        .HasName("CDO_TSLINKTC_FK_PARENT");

                    b.HasIndex("Source")
                        .HasName("CDO_TSLINKTC_FK_SOURCE");

                    b.HasIndex("Code", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_TSLINKTC_I_CODE");

                    b.ToTable("CDO_TERMSET_LINKTC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(240)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Plural")
                        .HasColumnName("PLURAL")
                        .HasMaxLength(240)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("char(1)");

                    b.Property<long>("Termset")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TERMSET")
                        .HasDefaultValueSql("((2))");

                    b.Property<string>("Upperdescription")
                        .HasColumnName("UPPERDESCRIPTION")
                        .HasMaxLength(240)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("TERMCODE_IND");

                    b.HasIndex("Createdby")
                        .HasName("CDO_TERMSET_TERM_FK_CREATEDB");

                    b.HasIndex("Description")
                        .HasName("CDO_TERMSET_TERMINDEX3");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TERMSET_TERM");

                    b.HasIndex("Organization")
                        .HasName("TERMSET_TERM_FK_ORGAN");

                    b.HasIndex("Termset")
                        .HasName("CDO_TERM_FK_TERMSET");

                    b.HasIndex("Upperdescription")
                        .HasName("INDEX_CDO_TERMUPPERDESCRIPTION");

                    b.HasIndex("Code", "Termset", "PartitionId")
                        .IsUnique()
                        .HasName("CDO_TERM_I_CODETERMSET");

                    b.ToTable("CDO_TERMSET_TERM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTrans", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Accessrights")
                        .HasColumnName("ACCESSRIGHTS");

                    b.Property<long>("Amendrights")
                        .HasColumnName("AMENDRIGHTS");

                    b.Property<DateTime?>("AqDtAuthorized")
                        .HasColumnName("AQ_DT_AUTHORIZED")
                        .HasColumnType("datetime");

                    b.Property<long?>("AqHcpAssigned")
                        .HasColumnName("AQ_HCP_ASSIGNED");

                    b.Property<long?>("AqHcpAssignedCid")
                        .HasColumnName("AQ_HCP_ASSIGNED_CID");

                    b.Property<long?>("AqHcpAuthorized")
                        .HasColumnName("AQ_HCP_AUTHORIZED");

                    b.Property<long?>("AqHcpAuthorizedCid")
                        .HasColumnName("AQ_HCP_AUTHORIZED_CID");

                    b.Property<long?>("AqSource")
                        .HasColumnName("AQ_SOURCE");

                    b.Property<string>("AqSourcetransref")
                        .HasColumnName("AQ_SOURCETRANSREF")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("AqWasgehr")
                        .HasColumnName("AQ_WASGEHR");

                    b.Property<long?>("AttendanceId")
                        .HasColumnName("ATTENDANCE_ID");

                    b.Property<long?>("BcaseOid")
                        .HasColumnName("BCASE_OID");

                    b.Property<short>("BlockFromPtnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BLOCK_FROM_PTNT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CaseServiceId")
                        .HasColumnName("CASE_SERVICE_ID");

                    b.Property<short>("Childprotect")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHILDPROTECT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("ContactTypeId")
                        .HasColumnName("CONTACT_TYPE_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long?>("Direction")
                        .HasColumnName("DIRECTION");

                    b.Property<long?>("DocCategoryId")
                        .HasColumnName("DOC_CATEGORY_ID");

                    b.Property<DateTime?>("Dt1")
                        .HasColumnName("DT1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dt2")
                        .HasColumnName("DT2")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Dtdisplay")
                        .HasColumnName("DTDISPLAY")
                        .HasColumnType("datetime");

                    b.Property<long>("Ehcr")
                        .HasColumnName("EHCR");

                    b.Property<long?>("EncounterType")
                        .HasColumnName("ENCOUNTER_TYPE");

                    b.Property<long>("FilingCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FILING_CATEGORY")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("Firstcreated")
                        .HasColumnName("FIRSTCREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Firstcreatedby")
                        .HasColumnName("FIRSTCREATEDBY");

                    b.Property<long?>("GroupSessionId")
                        .HasColumnName("GROUP_SESSION_ID");

                    b.Property<long?>("HcpA")
                        .HasColumnName("HCP_A");

                    b.Property<long?>("HcpACid")
                        .HasColumnName("HCP_A_CID");

                    b.Property<long?>("HcpL")
                        .HasColumnName("HCP_L");

                    b.Property<long?>("HcpLCid")
                        .HasColumnName("HCP_L_CID");

                    b.Property<short>("InclInCumulative")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INCL_IN_CUMULATIVE")
                        .HasDefaultValueSql("((-1))");

                    b.Property<short>("IsAbnormal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_ABNORMAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LocationId")
                        .HasColumnName("LOCATION_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PatientConsentBlock")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PATIENT_CONSENT_BLOCK")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long?>("Ref1")
                        .HasColumnName("REF1");

                    b.Property<long?>("Ref1Cid")
                        .HasColumnName("REF1_CID");

                    b.Property<long?>("Ref2Cid")
                        .HasColumnName("REF2_CID");

                    b.Property<long?>("Ref2Oid")
                        .HasColumnName("REF2_OID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RoleOid")
                        .HasColumnName("ROLE_OID");

                    b.Property<long?>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.Property<long>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Texts")
                        .HasColumnName("TEXTS")
                        .HasColumnType("image");

                    b.Property<long?>("Transdatatype")
                        .HasColumnName("TRANSDATATYPE");

                    b.Property<long?>("Transtype")
                        .HasColumnName("TRANSTYPE");

                    b.Property<short>("Unmatchedcopyto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UNMATCHEDCOPYTO")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Unmatchedhrm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UNMATCHEDHRM")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("AqHcpAssigned")
                        .HasName("CDO_TRANS_FK_AQ_HCP_ASSIGNED");

                    b.HasIndex("AqHcpAuthorized")
                        .HasName("CDO_TRANS_FK_AQ_HCP_AUTHORIZ");

                    b.HasIndex("AqSource")
                        .HasName("CDO_TRANS_FK_AQ_SOURCE");

                    b.HasIndex("AttendanceId")
                        .HasName("CDO_TRANS_FK_APPOINTMENT");

                    b.HasIndex("BcaseOid")
                        .HasName("CDO_TRANS_FK_BCASE_OID");

                    b.HasIndex("CaseServiceId")
                        .HasName("FK_CDO_TRANS_CS_ID");

                    b.HasIndex("Code")
                        .HasName("CDO_TRANS_I_CODE");

                    b.HasIndex("ContactTypeId")
                        .HasName("CDO_TRANS_FK_CONTACT_TYPE");

                    b.HasIndex("Createdby")
                        .HasName("CDO_TRANS_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_TRANS_FK_DELETEDBY");

                    b.HasIndex("DocCategoryId")
                        .HasName("CDO_TRANS_DOC_CATEGORY_FK");

                    b.HasIndex("Dtdisplay")
                        .HasName("I_CDO_TRANS_DTDISPLAY");

                    b.HasIndex("Ehcr")
                        .HasName("CDO_TRANS_FK_EHCR");

                    b.HasIndex("EncounterType")
                        .HasName("FK_CDOTRANS_ENCOUNTER_TYPE");

                    b.HasIndex("FilingCategory")
                        .HasName("I_CDO_TRANS_FILING_CATEGORY");

                    b.HasIndex("Firstcreated")
                        .HasName("I_CDOTRANS_FIRSTCREATED");

                    b.HasIndex("Firstcreatedby")
                        .HasName("FK_CDO_TRANS_FIRSTCREATEDBY");

                    b.HasIndex("GroupSessionId")
                        .HasName("FK_GROUP_SESSION_ID");

                    b.HasIndex("IsAbnormal")
                        .HasName("I_CDO_TRANS_IS_ABNORMAL");

                    b.HasIndex("LocationId")
                        .HasName("FK_CDOTRANS_LOCATION");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TRANS");

                    b.HasIndex("Organization")
                        .HasName("CDO_TRANS_FK_ORGANIZATION");

                    b.HasIndex("PosId")
                        .HasName("CDO_TRANS_FK_POS_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("CDO_TRANS_FK_PPPU");

                    b.HasIndex("Ref2Oid")
                        .HasName("CDO_TRANS_FK_REF2_OID");

                    b.HasIndex("RoleOid")
                        .HasName("CDO_TRANS_FK_ROLE_OID");

                    b.HasIndex("ServiceId")
                        .HasName("FK_CDOTRANS_SERVICE");

                    b.HasIndex("Code", "Version")
                        .IsUnique()
                        .HasName("I_CDOTRANS_CODEVERSION");

                    b.HasIndex("Dt1", "Cid")
                        .HasName("CDO_TRANS_I_DT1_CID");

                    b.HasIndex("Ref1", "PartitionId")
                        .HasName("CDO_TRANS_I_REF1");

                    b.HasIndex("AqHcpAssigned", "AqHcpAuthorized", "Deleted", "Ehcr")
                        .HasName("I_UNSIGNED");

                    b.HasIndex("Ehcr", "Deleted", "Dt1", "Cid", "PartitionId")
                        .HasName("CDO_TRANS_I_EHCR_DEL_DT1_CID");

                    b.ToTable("CDO_TRANS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTransdata", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AbnormalCode")
                        .HasColumnName("ABNORMAL_CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("BlockFromPtnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BLOCK_FROM_PTNT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("Code")
                        .HasColumnName("CODE");

                    b.Property<long?>("Collection")
                        .HasColumnName("COLLECTION");

                    b.Property<long?>("Concept")
                        .HasColumnName("CONCEPT");

                    b.Property<long?>("Conceptvalue")
                        .HasColumnName("CONCEPTVALUE");

                    b.Property<long?>("DataE")
                        .HasColumnName("DATA_E");

                    b.Property<DateTime?>("Dt1")
                        .HasColumnName("DT1")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Dtobserved")
                        .HasColumnName("DTOBSERVED")
                        .HasColumnType("datetime");

                    b.Property<string>("Emphasis")
                        .HasColumnName("EMPHASIS")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<short>("InclInCumulative")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INCL_IN_CUMULATIVE")
                        .HasDefaultValueSql("((-1))");

                    b.Property<long?>("Infoprovider")
                        .HasColumnName("INFOPROVIDER");

                    b.Property<long?>("LinkedobjectCid")
                        .HasColumnName("LINKEDOBJECT_CID");

                    b.Property<long?>("LinkedobjectOid")
                        .HasColumnName("LINKEDOBJECT_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Obsref")
                        .HasColumnName("OBSREF");

                    b.Property<long?>("Ord")
                        .HasColumnName("ORD");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<float?>("Qmax")
                        .HasColumnName("QMAX");

                    b.Property<float?>("Qmin")
                        .HasColumnName("QMIN");

                    b.Property<long?>("Qunit")
                        .HasColumnName("QUNIT");

                    b.Property<long?>("Qunit2")
                        .HasColumnName("QUNIT2");

                    b.Property<float?>("Qvalue")
                        .HasColumnName("QVALUE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Term")
                        .HasColumnName("TERM");

                    b.Property<byte[]>("Texts")
                        .HasColumnName("TEXTS")
                        .HasColumnType("image");

                    b.Property<long>("Trans")
                        .HasColumnName("TRANS");

                    b.Property<long>("Versionmax")
                        .HasColumnName("VERSIONMAX");

                    b.Property<long>("Versionmin")
                        .HasColumnName("VERSIONMIN");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_TRANSDATA_I_CODE");

                    b.HasIndex("Collection")
                        .HasName("CDO_TRANSDATA_FK_COLLECTION");

                    b.HasIndex("Concept")
                        .HasName("CDO_TRANSDATA_FK_CONCEPT");

                    b.HasIndex("Conceptvalue")
                        .HasName("CDO_TRANSDATA_FK_CONCEPTVALU");

                    b.HasIndex("DataE")
                        .HasName("CDO_TRANSDATA_FK_DATA_E");

                    b.HasIndex("Dt1")
                        .HasName("I_CDOTRANSDATA_DT1");

                    b.HasIndex("Infoprovider")
                        .HasName("CDO_TRANSDATA_FK_INFOPROVIDE");

                    b.HasIndex("LinkedobjectOid")
                        .HasName("CDO_TRANSDATA_I_LINKOBJ_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TRANSDATA");

                    b.HasIndex("Obsref")
                        .HasName("CDO_TRANSDATA_FK_OBSREF");

                    b.HasIndex("PosId")
                        .HasName("CDO_TRANSDATA_FK_POS_ID");

                    b.HasIndex("Qunit")
                        .HasName("CDO_TRANSDATA_FK_QUNIT");

                    b.HasIndex("Qunit2")
                        .HasName("CDO_TRANSDATA_FK_QUNIT2");

                    b.HasIndex("Qvalue")
                        .HasName("I_CDOTRANSDATA_QVALUE");

                    b.HasIndex("Term")
                        .HasName("CDO_TRANSDATA_FK_TERM");

                    b.HasIndex("Trans")
                        .HasName("CDO_TRANSDATA_FK_TRANS");

                    b.HasIndex("Trans", "Concept")
                        .HasName("CDO_TRANSDATA_I_TRANS_CONCEPT");

                    b.HasIndex("Infoprovider", "Cid", "Conceptvalue")
                        .HasName("CDO_TRANSDATA_I_UNRESOLVED");

                    b.ToTable("CDO_TRANSDATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTransdatadetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("FormDenyDuplicating")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FORM_DENY_DUPLICATING")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("FormDenyEditing")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FORM_DENY_EDITING")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("FormLanguage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FORM_LANGUAGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FormPassword")
                        .HasColumnName("FORM_PASSWORD")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("FormReprBodyId")
                        .HasColumnName("FORM_REPR_BODY_ID");

                    b.Property<long?>("FormReprExclude")
                        .HasColumnName("FORM_REPR_EXCLUDE");

                    b.Property<long?>("FormReprForceCr")
                        .HasColumnName("FORM_REPR_FORCE_CR");

                    b.Property<long?>("FormStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FORM_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("FormType")
                        .HasColumnName("FORM_TYPE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Transdata")
                        .HasColumnName("TRANSDATA");

                    b.HasKey("Oid");

                    b.HasIndex("FormReprBodyId")
                        .HasName("CDO_TDD_FK_FORM_REPR_BODY");

                    b.HasIndex("FormType")
                        .HasName("CDO_TRDATDET_FK_FORM_TYPE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TRANSDATADETAIL");

                    b.HasIndex("Transdata")
                        .HasName("CDO_TRANSDATADETAILS_FK_TRAN");

                    b.ToTable("CDO_TRANSDATADETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTransPppu", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("TrppHasseen")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRPP_HASSEEN")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("TrppPppu")
                        .HasColumnName("TRPP_PPPU");

                    b.Property<long>("TrppTrans")
                        .HasColumnName("TRPP_TRANS");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("CDO_TRANS_PPPU_I_OBJ_GUID");

                    b.HasIndex("TrppPppu")
                        .HasName("CDO_TRANS_PPPU_FK_PPPU");

                    b.HasIndex("TrppTrans")
                        .HasName("CDO_TRANS_PPPU_FK_TRANS");

                    b.ToTable("CDO_TRANS_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTransProvInterestLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Copiedto")
                        .HasColumnName("COPIEDTO");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<string>("Creatorcomment")
                        .HasColumnName("CREATORCOMMENT")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<string>("ProviderSourceInfo")
                        .HasColumnName("PROVIDER_SOURCE_INFO")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Signed")
                        .HasColumnName("SIGNED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Signedby")
                        .HasColumnName("SIGNEDBY");

                    b.Property<long?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Transcid")
                        .HasColumnName("TRANSCID");

                    b.Property<long>("Transoid")
                        .HasColumnName("TRANSOID");

                    b.HasKey("Oid");

                    b.HasIndex("Copiedto")
                        .HasName("CDOTRANSPIL_FK_COPIEDTO");

                    b.HasIndex("Createdby")
                        .HasName("CDOTRANSPRVINTLNK_FK_CREATEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_TRANS_PROV_INTE");

                    b.HasIndex("PosId")
                        .HasName("CDOTRANSPIL_FK_POS_ID");

                    b.HasIndex("Signedby")
                        .HasName("CDOTRANSPIL_FK_SIGNEDBY");

                    b.HasIndex("Transoid")
                        .HasName("CDOTRANSPIL_FK_TRANS");

                    b.ToTable("CDO_TRANS_PROV_INTEREST_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoUri", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Uri")
                        .HasColumnName("URI")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("CDO_URI_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("CDO_URI_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CDO_URI_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CDO_URI");

                    b.HasIndex("Organization")
                        .HasName("CDO_URI_FK_ORGANIZATION");

                    b.HasIndex("Created", "Deleted")
                        .HasName("CDO_URI_I_TIME");

                    b.ToTable("CDO_URI");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CidOidRef", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ObjCid")
                        .HasColumnName("OBJ_CID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ObjOid")
                        .HasColumnName("OBJ_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CID_OID_REF");

                    b.ToTable("CID_OID_REF");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ClaimRanges", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CrnAccount")
                        .HasColumnName("CRN_ACCOUNT");

                    b.Property<DateTime?>("CrnCreatedDate")
                        .HasColumnName("CRN_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("CrnInprovinceEnd")
                        .HasColumnName("CRN_INPROVINCE_END");

                    b.Property<long?>("CrnInprovinceStart")
                        .HasColumnName("CRN_INPROVINCE_START");

                    b.Property<long?>("CrnOutprovinceEnd")
                        .HasColumnName("CRN_OUTPROVINCE_END");

                    b.Property<long?>("CrnOutprovinceStart")
                        .HasColumnName("CRN_OUTPROVINCE_START");

                    b.Property<string>("CrnPassword")
                        .HasColumnName("CRN_PASSWORD")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CrnAccount")
                        .IsUnique()
                        .HasName("I_CRN_ACCOUNT");

                    b.HasIndex("ObjGuid")
                        .HasName("CLAIM_RANGES_I_OBJ_GUID");

                    b.ToTable("CLAIM_RANGES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ComplexFilter", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Ageargument")
                        .HasColumnName("AGEARGUMENT");

                    b.Property<long?>("Ageoperation")
                        .HasColumnName("AGEOPERATION");

                    b.Property<long?>("CmflServiceId")
                        .HasColumnName("CMFL_SERVICE_ID");

                    b.Property<long?>("ConceptId")
                        .HasColumnName("CONCEPT_ID");

                    b.Property<string>("DiagnoseDescr")
                        .HasColumnName("DIAGNOSE_DESCR")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long?>("DiagnoseId")
                        .HasColumnName("DIAGNOSE_ID");

                    b.Property<long>("DiseaseMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DISEASE_MODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("DontUseStatuses")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DONT_USE_STATUSES")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("DxActivestatusex")
                        .HasColumnName("DX_ACTIVESTATUSEX");

                    b.Property<long?>("DxConceptId")
                        .HasColumnName("DX_CONCEPT_ID");

                    b.Property<long?>("DxIn")
                        .HasColumnName("DX_IN");

                    b.Property<long?>("DxTimeFrame")
                        .HasColumnName("DX_TIME_FRAME");

                    b.Property<string>("FilterCaption")
                        .HasColumnName("FILTER_CAPTION")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("Filtertype")
                        .HasColumnName("FILTERTYPE");

                    b.Property<long?>("FindObjectOid")
                        .HasColumnName("FIND_OBJECT_OID");

                    b.Property<string>("Gender")
                        .HasColumnName("GENDER")
                        .HasColumnType("char(1)");

                    b.Property<long?>("HriMode")
                        .HasColumnName("HRI_MODE");

                    b.Property<long?>("HriNewMode")
                        .HasColumnName("HRI_NEW_MODE");

                    b.Property<long?>("HriOperator")
                        .HasColumnName("HRI_OPERATOR");

                    b.Property<long?>("HriTimeFrame")
                        .HasColumnName("HRI_TIME_FRAME");

                    b.Property<long?>("HriType")
                        .HasColumnName("HRI_TYPE");

                    b.Property<long?>("HriTypeAddn")
                        .HasColumnName("HRI_TYPE_ADDN");

                    b.Property<string>("HriValue")
                        .HasColumnName("HRI_VALUE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("Inverted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INVERTED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsUsualRx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_USUAL_RX")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Macro")
                        .HasColumnName("MACRO")
                        .HasMaxLength(4096)
                        .IsUnicode(false);

                    b.Property<short>("NotDiagnoseDescr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NOT_DIAGNOSE_DESCR")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("NotDiagnoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NOT_DIAGNOSE_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("NotNotesText")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NOT_NOTES_TEXT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NotesText")
                        .HasColumnName("NOTES_TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("NotesTimeFrame")
                        .HasColumnName("NOTES_TIME_FRAME");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientStatuses")
                        .HasColumnName("PATIENT_STATUSES");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RxArgument")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RX_ARGUMENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RxNewMode")
                        .HasColumnName("RX_NEW_MODE");

                    b.Property<string>("RxText")
                        .HasColumnName("RX_TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("RxTimeFrame")
                        .HasColumnName("RX_TIME_FRAME");

                    b.Property<string>("ServiceDescr")
                        .HasColumnName("SERVICE_DESCR")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long?>("ServiceMode")
                        .HasColumnName("SERVICE_MODE");

                    b.Property<long?>("ServiceTimeFrame")
                        .HasColumnName("SERVICE_TIME_FRAME");

                    b.Property<long?>("TermsetId")
                        .HasColumnName("TERMSET_ID");

                    b.HasKey("Oid");

                    b.HasIndex("CmflServiceId")
                        .HasName("CMFL_SERVICE_ID_FK");

                    b.HasIndex("ConceptId")
                        .HasName("FK_COMPLEX_FILTER_CONCEPT_ID");

                    b.HasIndex("DiagnoseId")
                        .HasName("FK_COMFILTER_DIAGNOSE_ID");

                    b.HasIndex("DxConceptId")
                        .HasName("FK_CF_DX_CONCEPT_ID");

                    b.HasIndex("FindObjectOid")
                        .HasName("COMP_FILTER_FK_FIND_OBJECT_O");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_COMPLEX_FILTER");

                    b.HasIndex("TermsetId")
                        .HasName("FK_COMPLEX_FILTER_TERMSET_ID");

                    b.ToTable("COMPLEX_FILTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ConcurrentUsersLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("CulDate")
                        .HasColumnName("CUL_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CulNextDate")
                        .HasColumnName("CUL_NEXT_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("CulSessions")
                        .HasColumnName("CUL_SESSIONS");

                    b.Property<long>("CulUsers")
                        .HasColumnName("CUL_USERS");

                    b.HasKey("Oid");

                    b.HasIndex("CulNextDate")
                        .HasName("CUL_I_NEXT_DATE");

                    b.ToTable("CONCURRENT_USERS_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ConfirmedLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("ConfirmedDate")
                        .HasColumnName("CONFIRMED_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("LogComment")
                        .HasColumnName("LOG_COMMENT")
                        .HasColumnType("image");

                    b.Property<long?>("MainPatientId")
                        .HasColumnName("MAIN_PATIENT_ID");

                    b.Property<long?>("MethodId")
                        .HasColumnName("METHOD_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RegAction")
                        .HasColumnName("REG_ACTION");

                    b.Property<long?>("RegReason")
                        .HasColumnName("REG_REASON");

                    b.Property<long>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<long?>("UsualdrId")
                        .HasColumnName("USUALDR_ID");

                    b.HasKey("Oid");

                    b.HasIndex("MainPatientId")
                        .HasName("CONFIRMED_LOG_FK_MAIN_PATIEN");

                    b.HasIndex("MethodId")
                        .HasName("CONFIRMED_LOG_FK_METHOD_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CONFIRMED_LOG");

                    b.HasIndex("PatientId")
                        .HasName("CONFIRMED_LOG_FK_PATIENT_ID");

                    b.HasIndex("UserId")
                        .HasName("CONFIRMED_LOG_FK_USER_ID");

                    b.HasIndex("UsualdrId")
                        .HasName("CONFIRMED_LOG_FK_USUALDR");

                    b.ToTable("CONFIRMED_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ContactActionLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("CoalActioned")
                        .HasColumnName("COAL_ACTIONED")
                        .HasColumnType("datetime");

                    b.Property<short>("CoalBill")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COAL_BILL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CoalCaseid")
                        .HasColumnName("COAL_CASEID");

                    b.Property<long?>("CoalCntcOid")
                        .HasColumnName("COAL_CNTC_OID");

                    b.Property<DateTime?>("CoalConcluded")
                        .HasColumnName("COAL_CONCLUDED")
                        .HasColumnType("datetime");

                    b.Property<string>("CoalDescription")
                        .HasColumnName("COAL_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("CoalHowConcluded")
                        .HasColumnName("COAL_HOW_CONCLUDED");

                    b.Property<string>("CoalInvoiceNote")
                        .HasColumnName("COAL_INVOICE_NOTE")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("CoalInvoiceOid")
                        .HasColumnName("COAL_INVOICE_OID");

                    b.Property<short>("CoalIsMasterService")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COAL_IS_MASTER_SERVICE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CoalLinkCid")
                        .HasColumnName("COAL_LINK_CID");

                    b.Property<long?>("CoalLinkOid")
                        .HasColumnName("COAL_LINK_OID");

                    b.Property<long?>("CoalParentServiceOid")
                        .HasColumnName("COAL_PARENT_SERVICE_OID");

                    b.Property<long?>("CoalPatient")
                        .HasColumnName("COAL_PATIENT");

                    b.Property<DateTime?>("CoalPending")
                        .HasColumnName("COAL_PENDING")
                        .HasColumnType("datetime");

                    b.Property<long?>("CoalPos")
                        .HasColumnName("COAL_POS");

                    b.Property<long?>("CoalProvider")
                        .HasColumnName("COAL_PROVIDER");

                    b.Property<double?>("CoalQuantity")
                        .HasColumnName("COAL_QUANTITY");

                    b.Property<long?>("CoalQuoteId")
                        .HasColumnName("COAL_QUOTE_ID");

                    b.Property<long?>("CoalRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COAL_RATE")
                        .HasDefaultValueSql("((-1))");

                    b.Property<DateTime?>("CoalReceived")
                        .HasColumnName("COAL_RECEIVED")
                        .HasColumnType("datetime");

                    b.Property<long?>("CoalServiceOid")
                        .HasColumnName("COAL_SERVICE_OID");

                    b.Property<short>("CoalSrvforceontonextinv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COAL_SRVFORCEONTONEXTINV")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CoalStatus")
                        .HasColumnName("COAL_STATUS");

                    b.Property<long?>("CoalVerb")
                        .HasColumnName("COAL_VERB");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("CoalCaseid")
                        .HasName("FK_COAL_CASEID");

                    b.HasIndex("CoalCntcOid")
                        .HasName("CAL_FK_CNTC_OID");

                    b.HasIndex("CoalInvoiceOid")
                        .HasName("COAL_FK_INVOICE_OID");

                    b.HasIndex("CoalLinkCid")
                        .HasName("COAL_I_LINKCID");

                    b.HasIndex("CoalLinkOid")
                        .HasName("CONTACT_ACTION_LINK_I_LOID");

                    b.HasIndex("CoalParentServiceOid")
                        .HasName("COAL_FK_PARENT_SERVICE_OID");

                    b.HasIndex("CoalPatient")
                        .HasName("COAL_PATIENT_FK");

                    b.HasIndex("CoalPos")
                        .HasName("COAL_POS_FK");

                    b.HasIndex("CoalProvider")
                        .HasName("COAL_PROVIDER_FK");

                    b.HasIndex("CoalQuoteId")
                        .HasName("FK_CAL_QUOTEID");

                    b.HasIndex("CoalRate")
                        .HasName("CONTACT_ACTION_LINK_FK_RATE");

                    b.HasIndex("CoalServiceOid")
                        .HasName("COAL_FK_SERVICE_OID");

                    b.HasIndex("Code")
                        .HasName("CONTACTACTIONLINK_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("ACTION_LINK_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("ACTION_LINK_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CONTACT_ACTION_LINK");

                    b.ToTable("CONTACT_ACTION_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ContactDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long?>("CaseServiceId")
                        .HasColumnName("CASE_SERVICE_ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("ContactFormId")
                        .HasColumnName("CONTACT_FORM_ID");

                    b.Property<long?>("ContactFormVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CONTACT_FORM_VERSION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ContactId")
                        .HasColumnName("CONTACT_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("ExternalActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EXTERNAL_ACTIVITY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("CONTACT_DETAILS_FK_CASE_ID");

                    b.HasIndex("CaseServiceId")
                        .HasName("FK_CONTACT_DETAILS_CS_ID");

                    b.HasIndex("Code")
                        .HasName("CONTACT_DETAILS_I_CODE");

                    b.HasIndex("ContactFormId")
                        .HasName("CONTACT_DETAILS_FK_FORM_ID");

                    b.HasIndex("ContactId")
                        .HasName("CONTACT_DETAILS_FK_CONTACT_I");

                    b.HasIndex("Createdby")
                        .HasName("CONTACT_DETAILS_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CONTACT_DETAILS_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CONTACT_DETAILS");

                    b.ToTable("CONTACT_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CorrectName", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("CnAbbrevName")
                        .HasColumnName("CN_ABBREV_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CnCorrectName")
                        .HasColumnName("CN_CORRECT_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.ToTable("CORRECT_NAME");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CrossMacroPartitionLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CmplMacroId")
                        .HasColumnName("CMPL_MACRO_ID");

                    b.Property<long>("CmplPartitionId")
                        .HasColumnName("CMPL_PARTITION_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("CmplPartitionId")
                        .HasName("FK_CMPL_PARTITION");

                    b.HasIndex("Createdby")
                        .HasName("CMPL__FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CMPL__FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("CMPL__FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CROSS_MACRO_PARTITI");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("CMPL__I_MASTERVERS");

                    b.ToTable("CROSS_MACRO_PARTITION_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CrossPartitionMacro", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("CpmCode")
                        .IsRequired()
                        .HasColumnName("CPM_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("CpmDescription")
                        .HasColumnName("CPM_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("CpmMacroBlobId")
                        .HasColumnName("CPM_MACRO_BLOB_ID");

                    b.Property<long>("CpmTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CPM_TIMEOUT")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("CpmMacroBlobId")
                        .HasName("CPM_FK_MACRO_BLOB_ID");

                    b.HasIndex("Createdby")
                        .HasName("CPM__FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("CPM__FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("CPM__FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CROSS_PARTITION_MAC");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("CPM__I_MASTERVERS");

                    b.HasIndex("CpmCode", "Deleted", "PartitionId")
                        .IsUnique()
                        .HasName("CPM_I_PARTCODEDEL");

                    b.ToTable("CROSS_PARTITION_MACRO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CrossPartitionMacroAudit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CpmaMacroId")
                        .HasColumnName("CPMA_MACRO_ID");

                    b.Property<long>("CpmaPatientId")
                        .HasColumnName("CPMA_PATIENT_ID");

                    b.Property<long>("CpmaProviderId")
                        .HasColumnName("CPMA_PROVIDER_ID");

                    b.Property<DateTime>("CpmaRunningDate")
                        .HasColumnName("CPMA_RUNNING_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("CpmaRunningPartitionId")
                        .HasColumnName("CPMA_RUNNING_PARTITION_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CpmaMacroId")
                        .HasName("FK_CMPA_MACRO");

                    b.HasIndex("CpmaPatientId")
                        .HasName("FK_CMPA_PATIENT");

                    b.HasIndex("CpmaProviderId")
                        .HasName("FK_CMPA_PPPU");

                    b.HasIndex("CpmaRunningPartitionId")
                        .HasName("FK_CMPA_PARTITION");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_CROSS_PARTITION_MA1");

                    b.ToTable("CROSS_PARTITION_MACRO_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CustomerViewsStorage", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("Source")
                        .IsRequired()
                        .HasColumnName("SOURCE")
                        .HasColumnType("image");

                    b.HasKey("Name");

                    b.ToTable("CUSTOMER_VIEWS_STORAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DatabaseInfo", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("DiName")
                        .IsRequired()
                        .HasColumnName("DI_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("DiValue")
                        .HasColumnName("DI_VALUE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DiName")
                        .IsUnique()
                        .HasName("DATABASEINFO_UK_NAME");

                    b.ToTable("DATABASE_INFO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DataImportLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FinishedDt")
                        .HasColumnName("FINISHED_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ScheduledTaskId")
                        .HasColumnName("SCHEDULED_TASK_ID");

                    b.Property<DateTime>("StartedDt")
                        .HasColumnName("STARTED_DT")
                        .HasColumnType("datetime");

                    b.Property<long>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DATA_IMPORT_LOG");

                    b.HasIndex("ScheduledTaskId")
                        .HasName("FK_DILOG_SCHEDULED_TASK");

                    b.ToTable("DATA_IMPORT_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DataImportLogFile", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("DataImportLogId")
                        .HasColumnName("DATA_IMPORT_LOG_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FinishedDt")
                        .HasColumnName("FINISHED_DT")
                        .HasColumnType("datetime");

                    b.Property<long>("FtpFileId")
                        .HasColumnName("FTP_FILE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartedDt")
                        .HasColumnName("STARTED_DT")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("DataImportLogId")
                        .HasName("FK_DILOGFILE_LOGID");

                    b.HasIndex("FtpFileId")
                        .HasName("FK_DILOGFILE_FTPFILEID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DATA_IMPORT_LOG_FIL");

                    b.ToTable("DATA_IMPORT_LOG_FILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DataOutputLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("DolActionType")
                        .HasColumnName("DOL_ACTION_TYPE");

                    b.Property<string>("DolDescription")
                        .HasColumnName("DOL_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DolStartDateTime")
                        .HasColumnName("DOL_START_DATE_TIME")
                        .HasColumnType("datetime");

                    b.Property<long>("DolUserId")
                        .HasColumnName("DOL_USER_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DolUserId")
                        .HasName("FK_DATA_OUTPUT_LOG_PPPU");

                    b.HasIndex("ObjGuid")
                        .HasName("DATA_OUTPUT_LOG_I_OBJ_GUID");

                    b.ToTable("DATA_OUTPUT_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DateCycle", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DcDate")
                        .HasColumnName("DC_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DcEndDate")
                        .HasColumnName("DC_END_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DcStartDate")
                        .HasColumnName("DC_START_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DcDate")
                        .HasName("DATE_CYCLE_I_DC_DATE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DATE_CYCLE");

                    b.ToTable("DATE_CYCLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DbfileSpace", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("DbfileAvailableSpace")
                        .HasColumnName("DBFileAvailableSpace")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("DbfileName")
                        .HasColumnName("DBFileName")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("DbfilePath")
                        .HasColumnName("DBFilePath")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<decimal?>("DbfileSize")
                        .HasColumnName("DBFileSize")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("DbfileUsedSpace")
                        .HasColumnName("DBFileUsedSpace")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Dbname")
                        .HasColumnName("DBName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("LogId");

                    b.ToTable("DBFileSpace");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DbReadOnly", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("Currentmode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CURRENTMODE")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.ToTable("DB_READ_ONLY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DbReadOnlyLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("Changedate")
                        .HasColumnName("CHANGEDATE")
                        .HasColumnType("datetime");

                    b.Property<short>("Tomode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TOMODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Userid")
                        .HasColumnName("USERID");

                    b.HasKey("Oid");

                    b.HasIndex("Userid")
                        .HasName("DB_READ_ONLY_LOG_FK_USER");

                    b.ToTable("DB_READ_ONLY_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DeployedOfflineMessage", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<long?>("DomAcknowledgeTo")
                        .HasColumnName("DOM_ACKNOWLEDGE_TO");

                    b.Property<byte[]>("DomContent")
                        .HasColumnName("DOM_CONTENT")
                        .HasColumnType("image");

                    b.Property<DateTime>("DomFromDate")
                        .HasColumnName("DOM_FROM_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DomGeneratedAt")
                        .HasColumnName("DOM_GENERATED_AT")
                        .HasColumnType("datetime");

                    b.Property<short>("DomIsOutgoing")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DOM_IS_OUTGOING")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("DomSessionId")
                        .HasColumnName("DOM_SESSION_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DomAcknowledgeTo")
                        .HasName("FK_DOM_ACKNOWLEDGE_TO");

                    b.HasIndex("DomSessionId")
                        .HasName("FK_DOM_SESSION_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("DEPLOYED_OFFLINE_MESSAGE_I_OBJ");

                    b.ToTable("DEPLOYED_OFFLINE_MESSAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DeployedOfflineMessagePtnt", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<byte[]>("DompContent")
                        .HasColumnName("DOMP_CONTENT")
                        .HasColumnType("image");

                    b.Property<DateTime>("DompFromDate")
                        .HasColumnName("DOMP_FROM_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DompGeneratedAt")
                        .HasColumnName("DOMP_GENERATED_AT")
                        .HasColumnType("datetime");

                    b.Property<long>("DompMessageId")
                        .HasColumnName("DOMP_MESSAGE_ID");

                    b.Property<long>("DompPatientId")
                        .HasColumnName("DOMP_PATIENT_ID");

                    b.Property<long>("DompSessionId")
                        .HasColumnName("DOMP_SESSION_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DompMessageId")
                        .HasName("FK_DOMP_MESSAGE_ID");

                    b.HasIndex("DompPatientId")
                        .HasName("FK_DOMP_PATIENT_ID");

                    b.HasIndex("DompSessionId")
                        .HasName("FK_DOMP_SESSION_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("DEPLOYED_OFFLINE_MESSAGE_PTNT_");

                    b.ToTable("DEPLOYED_OFFLINE_MESSAGE_PTNT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DeployedOfflinePatient", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<long>("DopPatientId")
                        .HasColumnName("DOP_PATIENT_ID");

                    b.Property<short>("DopPatientIsSyncActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DOP_PATIENT_IS_SYNC_ACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("DopSessionId")
                        .HasColumnName("DOP_SESSION_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DopPatientId")
                        .HasName("FK_DOP_PATIENT_ID");

                    b.HasIndex("DopSessionId")
                        .HasName("FK_DOP_SESSION_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("DEPLOYED_OFFLINE_PATIENT_I_OBJ");

                    b.ToTable("DEPLOYED_OFFLINE_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DeployedOfflineSession", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<string>("DosName")
                        .IsRequired()
                        .HasColumnName("DOS_NAME")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("DosObjectsToDeploy")
                        .HasColumnName("DOS_OBJECTS_TO_DEPLOY")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.ToTable("DEPLOYED_OFFLINE_SESSION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Deposits", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<decimal>("ActualCash")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ACTUAL_CASH")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("BankAccount")
                        .HasColumnName("BANK_ACCOUNT")
                        .HasMaxLength(47)
                        .IsUnicode(false);

                    b.Property<string>("BankAccountParsed")
                        .HasColumnName("BANK_ACCOUNT_PARSED")
                        .HasMaxLength(47)
                        .IsUnicode(false);

                    b.Property<short>("CashWarning")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CASH_WARNING")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Comments")
                        .HasColumnName("COMMENTS")
                        .HasColumnType("image");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnName("CREATED_DT")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("DepositerId")
                        .HasColumnName("DEPOSITER_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FinRefNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FIN_REF_NUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FinRefType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FIN_REF_TYPE")
                        .HasColumnType("char(2)")
                        .HasDefaultValueSql("('')");

                    b.Property<short>("IsReconciled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_RECONCILED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDt")
                        .HasColumnName("MODIFIED_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Reference")
                        .HasColumnName("REFERENCE")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("TakenDate")
                        .HasColumnName("TAKEN_DATE")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TOTAL")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.HasKey("Oid");

                    b.HasIndex("CreatedBy")
                        .HasName("DEPOSITS_FK_CREATED_BY");

                    b.HasIndex("DepositerId")
                        .HasName("DEPOSITS_FK_DEPOSITER_ID");

                    b.HasIndex("ModifiedBy")
                        .HasName("DEPOSITS_FK_MODIFIED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DEPOSITS");

                    b.HasIndex("PosId")
                        .HasName("DEPOSITS_FK_POS_ID");

                    b.HasIndex("ProviderId")
                        .HasName("DEPOSITS_FK_PROVIDER_ID");

                    b.HasIndex("FinRefType", "FinRefNum")
                        .HasName("DEPOSIT_REF_TYPE_NUM");

                    b.ToTable("DEPOSITS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DiagnosesForCase", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnName("CLOSED_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("DiagnoseId")
                        .HasColumnName("DIAGNOSE_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnName("OPEN_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Principal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRINCIPAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("FK_DIAG_CASE_ID");

                    b.HasIndex("DiagnoseId")
                        .HasName("FK_DIAG_DIAGNOSE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DIAGNOSES_FOR_CASE");

                    b.HasIndex("ProviderId")
                        .HasName("FK_DIAG_PROVIDER_ID");

                    b.ToTable("DIAGNOSES_FOR_CASE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DictationHandler", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("DichHandler")
                        .HasColumnName("DICH_HANDLER");

                    b.Property<long>("DichProvider")
                        .HasColumnName("DICH_PROVIDER");

                    b.Property<long?>("DichType")
                        .HasColumnName("DICH_TYPE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DichHandler")
                        .HasName("DICT_HAND_FK_HANDLER");

                    b.HasIndex("DichProvider")
                        .HasName("DICT_HAND_FK_PROVIDER");

                    b.HasIndex("DichType")
                        .HasName("DICT_HAND_FK_TYPE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DICTATION_HANDLER");

                    b.ToTable("DICTATION_HANDLER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Dictations", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime?>("DicCreated")
                        .HasColumnName("DIC_CREATED")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("DicData")
                        .HasColumnName("DIC_DATA")
                        .HasColumnType("image");

                    b.Property<string>("DicDetail")
                        .HasColumnName("DIC_DETAIL")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("DicPatient")
                        .HasColumnName("DIC_PATIENT");

                    b.Property<long?>("DicProvider")
                        .HasColumnName("DIC_PROVIDER");

                    b.Property<long?>("DicType")
                        .HasColumnName("DIC_TYPE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DicPatient")
                        .HasName("DICTATION_FK_PATIENT");

                    b.HasIndex("DicProvider")
                        .HasName("DICTATIONS_FK_PPPU_ID");

                    b.HasIndex("DicType")
                        .HasName("DICTATIONS_FK_TYPE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DICTATIONS");

                    b.ToTable("DICTATIONS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Dictionary", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("DictName")
                        .HasColumnName("DICT_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("DictType")
                        .HasColumnName("DICT_TYPE");

                    b.Property<byte[]>("Dictionary1")
                        .HasColumnName("DICTIONARY")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Loaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOADED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DICTIONARY");

                    b.ToTable("DICTIONARY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Diseasecode", b =>
                {
                    b.Property<long>("DscdId")
                        .HasColumnName("DSCD_ID");

                    b.Property<DateTime>("Changed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Concept")
                        .HasColumnName("CONCEPT");

                    b.Property<long?>("Conceptcid")
                        .HasColumnName("CONCEPTCID");

                    b.Property<long?>("ConceptcidMon1")
                        .HasColumnName("CONCEPTCID_MON1");

                    b.Property<long?>("ConceptcidMon2")
                        .HasColumnName("CONCEPTCID_MON2");

                    b.Property<long?>("ConceptoidMon1")
                        .HasColumnName("CONCEPTOID_MON1");

                    b.Property<long?>("ConceptoidMon2")
                        .HasColumnName("CONCEPTOID_MON2");

                    b.Property<string>("DscdCode")
                        .IsRequired()
                        .HasColumnName("DSCD_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long>("DscdDeletedid")
                        .HasColumnName("DSCD_DELETEDID");

                    b.Property<string>("DscdDescription")
                        .HasColumnName("DSCD_DESCRIPTION")
                        .HasMaxLength(240)
                        .IsUnicode(false);

                    b.Property<long?>("DscdGroup")
                        .HasColumnName("DSCD_GROUP");

                    b.Property<string>("DscdKeywords")
                        .HasColumnName("DSCD_KEYWORDS")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("DscdOutputcode")
                        .HasColumnName("DSCD_OUTPUTCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long>("DscdSysid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DSCD_SYSID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("DscdSystem")
                        .HasColumnName("DSCD_SYSTEM");

                    b.Property<string>("DscdSystemcode")
                        .HasColumnName("DSCD_SYSTEMCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long?>("DscdTravelDisease")
                        .HasColumnName("DSCD_TRAVEL_DISEASE");

                    b.Property<long>("DscdType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DSCD_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DscdUrl")
                        .HasColumnName("DSCD_URL")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Modifiedby")
                        .HasColumnName("MODIFIEDBY");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Term")
                        .HasColumnName("TERM");

                    b.Property<long?>("TermoidMon1")
                        .HasColumnName("TERMOID_MON1");

                    b.Property<long?>("TermoidMon2")
                        .HasColumnName("TERMOID_MON2");

                    b.HasKey("DscdId");

                    b.HasIndex("Concept")
                        .HasName("DISEASECODE_FK_CONCEPT");

                    b.HasIndex("ConceptoidMon1")
                        .HasName("DISEASECODE_FK_CONCEPT_MON1");

                    b.HasIndex("ConceptoidMon2")
                        .HasName("DISEASECODE_FK_CONCEPT_MON2");

                    b.HasIndex("DscdCode")
                        .HasName("DSCD_CODE_IND");

                    b.HasIndex("DscdGroup")
                        .HasName("DISEASECODE_FK_GROUP");

                    b.HasIndex("DscdKeywords")
                        .HasName("INDEX_DISEASECODE_KEYWORDS");

                    b.HasIndex("DscdTravelDisease")
                        .HasName("DSCD_TRAVEL_DISEASE_FK");

                    b.HasIndex("Modifiedby")
                        .HasName("FK_DISEASE_MODIFIEDBY_PPPU");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DISEASECODE");

                    b.HasIndex("Term")
                        .HasName("DISEASECODE_FK_TERM");

                    b.HasIndex("TermoidMon1")
                        .HasName("DISEASECODE_FK_TERM_MON1");

                    b.HasIndex("TermoidMon2")
                        .HasName("DISEASECODE_FK_TERM_MON2");

                    b.HasIndex("DscdSysid", "DscdDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("DISEASECODE_SYSID");

                    b.HasIndex("DscdCode", "DscdType", "DscdDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("DSCDCODEDELETEDID");

                    b.ToTable("DISEASECODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DiseasecodeForPart", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("DcfpAdverseRx")
                        .HasColumnName("DCFP_ADVERSE_RX");

                    b.Property<long>("DcfpDx")
                        .HasColumnName("DCFP_DX");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DcfpAdverseRx")
                        .HasName("DCFP_FK_RX");

                    b.HasIndex("DcfpDx")
                        .HasName("DCFP_FK_DX");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DISEASECODE_FOR_PAR");

                    b.HasIndex("DcfpDx", "PartitionId")
                        .IsUnique()
                        .HasName("DFP_UI_DCFP_DX");

                    b.ToTable("DISEASECODE_FOR_PART");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DiseasecodePreferred", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("DscdId")
                        .HasColumnName("DSCD_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DscdId")
                        .HasName("DISEASECODE_PREFERRED_FK_DC");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DISEASECODE_PREFERR");

                    b.HasIndex("PppuId")
                        .HasName("DISEASECODE_PREFERRED_FK_PPP");

                    b.ToTable("DISEASECODE_PREFERRED");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DiseaseMonitors", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("ConceptId")
                        .HasColumnName("CONCEPT_ID");

                    b.Property<long?>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("InstrDefContent")
                        .HasColumnName("INSTR_DEF_CONTENT");

                    b.Property<long>("MonitorConceptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MONITOR_CONCEPT_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("MrBoolHigh")
                        .HasColumnName("MR_BOOL_HIGH");

                    b.Property<float?>("MrBoolLow")
                        .HasColumnName("MR_BOOL_LOW");

                    b.Property<DateTime?>("MrDatetimeHigh")
                        .HasColumnName("MR_DATETIME_HIGH")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MrDatetimeLow")
                        .HasColumnName("MR_DATETIME_LOW")
                        .HasColumnType("datetime");

                    b.Property<float?>("MrMaxHigh")
                        .HasColumnName("MR_MAX_HIGH");

                    b.Property<float?>("MrMaxLow")
                        .HasColumnName("MR_MAX_LOW");

                    b.Property<long?>("MrMaxunitId")
                        .HasColumnName("MR_MAXUNIT_ID");

                    b.Property<float?>("MrMinHigh")
                        .HasColumnName("MR_MIN_HIGH");

                    b.Property<float?>("MrMinLow")
                        .HasColumnName("MR_MIN_LOW");

                    b.Property<byte[]>("MrMultitext")
                        .HasColumnName("MR_MULTITEXT")
                        .HasColumnType("image");

                    b.Property<string>("MrText")
                        .HasColumnName("MR_TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("MrUnitId")
                        .HasColumnName("MR_UNIT_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Principal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRINCIPAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("TimelineNum")
                        .HasColumnName("TIMELINE_NUM");

                    b.Property<long?>("TimelineUnit")
                        .HasColumnName("TIMELINE_UNIT");

                    b.HasKey("Oid");

                    b.HasIndex("ConceptId")
                        .HasName("DM_FK_CONCEPT_ID");

                    b.HasIndex("InstrDefContent")
                        .HasName("FK_INSTR_DEF_CONTENT");

                    b.HasIndex("MonitorConceptId")
                        .HasName("FK_DM_TC_MONITOR_CONCEPT_ID");

                    b.HasIndex("MrMaxunitId")
                        .HasName("FK_MR_MAXUNIT_ID");

                    b.HasIndex("MrUnitId")
                        .HasName("FK_MR_UNIT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DISEASE_MONITORS");

                    b.ToTable("DISEASE_MONITORS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DistGroups", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GroupName")
                        .HasColumnName("GROUP_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Owner")
                        .HasColumnName("OWNER");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RoleCid")
                        .HasColumnName("ROLE_CID");

                    b.Property<long?>("RoleOid")
                        .HasColumnName("ROLE_OID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DIST_GROUPS");

                    b.HasIndex("Owner")
                        .HasName("DIST_GROUPS_FK_OWNER");

                    b.HasIndex("RoleOid")
                        .HasName("FK_ROLE_OID");

                    b.ToTable("DIST_GROUPS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DistNames", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("DistGroupOid")
                        .HasColumnName("DIST_GROUP_OID");

                    b.Property<string>("DistName")
                        .HasColumnName("DIST_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DistGroupOid")
                        .HasName("DIST_NAMES_FK_GROUP");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DIST_NAMES");

                    b.ToTable("DIST_NAMES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DocLibrary", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CategoryId")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("DocLibDataId")
                        .HasColumnName("DOC_LIB_DATA_ID");

                    b.Property<string>("Docname")
                        .IsRequired()
                        .HasColumnName("DOCNAME")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivateTo")
                        .HasColumnName("PRIVATE_TO");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CategoryId")
                        .HasName("DOC_LIBRARY_FK_CATEGORY_ID");

                    b.HasIndex("DocLibDataId")
                        .HasName("DOC_LIBRARY_FK_DATA");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DOC_LIBRARY");

                    b.HasIndex("PrivateTo")
                        .HasName("DOC_LIBRARY_FK_PRIVATE");

                    b.ToTable("DOC_LIBRARY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DocLibraryCategory", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasColumnName("CAT_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ParentId")
                        .HasColumnName("PARENT_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DOC_LIBRARY_CATEGOR");

                    b.HasIndex("ParentId")
                        .HasName("DOC_LIBRARY_CATEGORY_FK_PARE");

                    b.ToTable("DOC_LIBRARY_CATEGORY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DocLibraryData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("DocData")
                        .HasColumnName("DOC_DATA")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DOC_LIBRARY_DATA");

                    b.ToTable("DOC_LIBRARY_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DocumentKeyword", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("DkKeyword")
                        .HasColumnName("DK_KEYWORD")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<long>("DocumentCid")
                        .HasColumnName("DOCUMENT_CID");

                    b.Property<long>("DocumentOid")
                        .HasColumnName("DOCUMENT_OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DkKeyword")
                        .HasName("IND_DOC_KEY_DK_KEYWORD");

                    b.HasIndex("DocumentOid")
                        .HasName("IND_DOC_KEY_DOCUMENT_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_DOCUMENT_KEYWORD");

                    b.ToTable("DOCUMENT_KEYWORD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DynamicdateOutcomes", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<long?>("DateValue")
                        .HasColumnName("DATE_VALUE");

                    b.Property<long?>("Dateis")
                        .HasColumnName("DATEIS");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Fromdate")
                        .HasColumnName("FROMDATE");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Outcome")
                        .HasColumnName("OUTCOME");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Status")
                        .HasColumnName("STATUS");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.Property<long?>("VisitId")
                        .HasColumnName("VISIT_ID");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("DYNAMICDATES_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("DYNAMICDATES_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("DYNAMICDATE_OUTCOMES_FK_MASTER");

                    b.HasIndex("Outcome")
                        .HasName("FK_DYNAMICDATE_OUTCOME");

                    b.HasIndex("VisitId")
                        .HasName("FK_DYNAMICDATE_VISIT");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("DYNAMICDATES_I_MASTERVERS");

                    b.ToTable("DYNAMICDATE_OUTCOMES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Emessage", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("DeliveredBy")
                        .HasColumnName("DELIVERED_BY");

                    b.Property<long>("DoAfterFailure")
                        .HasColumnName("DO_AFTER_FAILURE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("MacroTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MACRO_TIMEOUT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("MaxRetries")
                        .HasColumnName("MAX_RETRIES");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("ServiceData")
                        .HasColumnName("SERVICE_DATA")
                        .HasColumnType("image");

                    b.Property<byte[]>("ServiceMacro")
                        .HasColumnName("SERVICE_MACRO")
                        .HasColumnType("image");

                    b.Property<long>("ServiceType")
                        .HasColumnName("SERVICE_TYPE");

                    b.Property<long?>("Timeout")
                        .HasColumnName("TIMEOUT");

                    b.Property<long?>("ViewRoleid")
                        .HasColumnName("VIEW_ROLEID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EMESSAGE");

                    b.HasIndex("PosId")
                        .HasName("FK_EMESSAGE_POS_ID");

                    b.HasIndex("ViewRoleid")
                        .HasName("VIEW_ROLEID_FK");

                    b.HasIndex("Code", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("EMSERVICE_CODE_UI")
                        .HasFilter("[CODE] IS NOT NULL");

                    b.HasIndex("Name", "ServiceType", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("EMSERVICE_NAME_UI")
                        .HasFilter("[NAME] IS NOT NULL");

                    b.ToTable("EMESSAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EncounterDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("EdeAutocreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EDE_AUTOCREATED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("EdeEditMode")
                        .HasColumnName("EDE_EDIT_MODE");

                    b.Property<long>("EdeEncounterId")
                        .HasColumnName("EDE_ENCOUNTER_ID");

                    b.Property<long?>("EdeProvForOtherix")
                        .HasColumnName("EDE_PROV_FOR_OTHERIX");

                    b.Property<long?>("EdeProvForPathology")
                        .HasColumnName("EDE_PROV_FOR_PATHOLOGY");

                    b.Property<long?>("EdeProvForRadiology")
                        .HasColumnName("EDE_PROV_FOR_RADIOLOGY");

                    b.Property<long?>("EdeProvForScripts")
                        .HasColumnName("EDE_PROV_FOR_SCRIPTS");

                    b.Property<short>("EdeReadonly")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EDE_READONLY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("EdeEncounterId")
                        .HasName("FK_ENC_DETAILS_CDO_TRANS_ID");

                    b.HasIndex("EdeProvForOtherix")
                        .HasName("FK_ENC_DETAILS_PROV_IX");

                    b.HasIndex("EdeProvForPathology")
                        .HasName("FK_ENC_DETAILS_PROV_PATH");

                    b.HasIndex("EdeProvForRadiology")
                        .HasName("FK_ENC_DETAILS_PROV_RAD");

                    b.HasIndex("EdeProvForScripts")
                        .HasName("FK_ENC_DETAILS_PROV_SCRIPTS");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ENCOUNTER_DETAILS");

                    b.ToTable("ENCOUNTER_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Entityids", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<DateTime?>("Changed")
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("DATE_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EntityValue")
                        .HasColumnName("ENTITY_VALUE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ExtProviderId")
                        .HasColumnName("EXT_PROVIDER_ID");

                    b.Property<string>("Identifier")
                        .HasColumnName("IDENTIFIER")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("Master")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrgMemberId")
                        .HasColumnName("ORG_MEMBER_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasColumnName("SOURCE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Sourceref")
                        .HasColumnName("SOURCEREF")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("ENTITYIDS_FK_CASE_ID");

                    b.HasIndex("EntityValue")
                        .HasName("ENTITYIDS_I_VALUE");

                    b.HasIndex("ExtProviderId")
                        .HasName("ENTITYIDS_FK_EXT_PROVIDER_ID");

                    b.HasIndex("Identifier")
                        .HasName("ENTITYIDS_I_IDENTIFIER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ENTITYIDS");

                    b.HasIndex("OrgMemberId")
                        .HasName("ENTITYIDS_FK_ORG_MEMBER_ID");

                    b.HasIndex("PatientId")
                        .HasName("ENTITYIDS_FK_PATIENT_ID");

                    b.HasIndex("PppuId")
                        .HasName("ENTITYIDS_FK_PPPU_ID");

                    b.HasIndex("Source")
                        .HasName("ENTITYIDS_I_SOURCE");

                    b.HasIndex("Sourceref")
                        .HasName("I_ENTITYIDS_SOURCEREF");

                    b.ToTable("ENTITYIDS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EobCodes", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("AgencyId")
                        .HasColumnName("AGENCY_ID");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("AmountType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AMOUNT_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AgencyId")
                        .HasName("EOB_CODES_FK_AGENCY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EOB_CODES");

                    b.HasIndex("AgencyId", "Code")
                        .IsUnique()
                        .HasName("EOB_CODES_UK_CODE");

                    b.ToTable("EOB_CODES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EobLines", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<decimal>("AmountClaimed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AMOUNT_CLAIMED")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("AmountPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AMOUNT_PAID")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("BatchPos")
                        .HasColumnName("BATCH_POS")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("Cardflag")
                        .HasColumnName("CARDFLAG")
                        .HasColumnType("char(2)");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EobBatch")
                        .HasColumnName("EOB_BATCH");

                    b.Property<long?>("InvoiceLineId")
                        .HasColumnName("INVOICE_LINE_ID");

                    b.Property<string>("Issuenumber")
                        .HasColumnName("ISSUENUMBER")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Itemnum")
                        .HasColumnName("ITEMNUM")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("Medicarenumber")
                        .HasColumnName("MEDICARENUMBER")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Processed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROCESSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("EobBatch")
                        .HasName("EOB_LINES_FK_BATCH");

                    b.HasIndex("InvoiceLineId")
                        .HasName("EOB_LINES_FK_INVOICE_LINE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EOB_LINES");

                    b.ToTable("EOB_LINES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EprescriptionLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MessageBodyId")
                        .HasColumnName("MESSAGE_BODY_ID");

                    b.Property<long>("MessageStatus")
                        .HasColumnName("MESSAGE_STATUS");

                    b.Property<long>("MessageType")
                        .HasColumnName("MESSAGE_TYPE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PrescrStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRESCR_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Scid")
                        .HasColumnName("SCID")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MessageBodyId")
                        .HasName("FK_EPRESCR_LOG_BLOB");

                    b.ToTable("EPRESCRIPTION_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EspecialAuthorityAudit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("TransId")
                        .HasColumnName("TRANS_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("ESPECIAL_AUTHORITY_AUDIT_I_OBJ");

                    b.HasIndex("TransId")
                        .HasName("FK_ESPECAUTHORAUDT_TRANSID");

                    b.ToTable("ESPECIAL_AUTHORITY_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Example", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExmpCode")
                        .IsRequired()
                        .HasColumnName("EXMP_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("ExmpDescription")
                        .IsRequired()
                        .HasColumnName("EXMP_DESCRIPTION")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXAMPLE");

                    b.HasIndex("ExmpCode", "PartitionId")
                        .IsUnique()
                        .HasName("EXMP_CODE");

                    b.ToTable("EXAMPLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExcludeFromSummary", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LinkCid")
                        .HasColumnName("LINK_CID");

                    b.Property<long>("LinkOid")
                        .HasColumnName("LINK_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("EXCLUDE_FROM_SUMMARY_I_OBJ_GUI");

                    b.ToTable("EXCLUDE_FROM_SUMMARY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExportAck", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EackDate")
                        .HasColumnName("EACK_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("EackErrorCode")
                        .HasColumnName("EACK_ERROR_CODE");

                    b.Property<DateTime?>("EackFiledate")
                        .HasColumnName("EACK_FILEDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("EackFilename")
                        .HasColumnName("EACK_FILENAME")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("EackFilesize")
                        .HasColumnName("EACK_FILESIZE");

                    b.Property<DateTime?>("EackPaymentPrdStart")
                        .HasColumnName("EACK_PAYMENT_PRD_START")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EackProcessed")
                        .HasColumnName("EACK_PROCESSED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EackReceived")
                        .HasColumnName("EACK_RECEIVED")
                        .HasColumnType("datetime");

                    b.Property<long?>("EackRegisteredPatients")
                        .HasColumnName("EACK_REGISTERED_PATIENTS");

                    b.Property<long?>("EackType")
                        .HasColumnName("EACK_TYPE");

                    b.Property<long>("ExevOid")
                        .HasColumnName("EXEV_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ExevOid")
                        .HasName("EXPORT_ACK_FK_EXEV_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXPORT_ACK");

                    b.ToTable("EXPORT_ACK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExportAckMsg", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AmsgCauseDescr")
                        .HasColumnName("AMSG_CAUSE_DESCR")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("AmsgMsgCode")
                        .HasColumnName("AMSG_MSG_CODE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("AmsgProcessed")
                        .HasColumnName("AMSG_PROCESSED");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("EackOid")
                        .HasColumnName("EACK_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("EackOid")
                        .HasName("EXPORT_ACK_MSG_FK_EACK_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXPORT_ACK_MSG");

                    b.HasIndex("PppuId")
                        .HasName("EXPORT_ACK_MSG_FK_PPPU_ID");

                    b.HasIndex("PtntId")
                        .HasName("EXPORT_ACK_MSG_FK_PTNT_ID");

                    b.ToTable("EXPORT_ACK_MSG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExportEvent", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExevControlId")
                        .HasColumnName("EXEV_CONTROL_ID")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime>("ExevDate")
                        .HasColumnName("EXEV_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ExevFilename")
                        .HasColumnName("EXEV_FILENAME")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("ExevPatientsCnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EXEV_PATIENTS_CNT")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXPORT_EVENT");

                    b.ToTable("EXPORT_EVENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Exportfields", b =>
                {
                    b.Property<long>("FmtFieldid")
                        .HasColumnName("FMT_FIELDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FmtFielddata")
                        .IsRequired()
                        .HasColumnName("FMT_FIELDDATA")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long>("FmtFieldlength")
                        .HasColumnName("FMT_FIELDLENGTH");

                    b.Property<long>("FmtFieldseq")
                        .HasColumnName("FMT_FIELDSEQ");

                    b.Property<long>("FmtFieldstyle")
                        .HasColumnName("FMT_FIELDSTYLE");

                    b.Property<long>("FmtRecid")
                        .HasColumnName("FMT_RECID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("FmtFieldid");

                    b.HasIndex("FmtFieldseq")
                        .HasName("FMT_FIELDSEQ");

                    b.HasIndex("FmtRecid")
                        .HasName("EXPORTFIELDS_FK_REC");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXPORTFIELDS");

                    b.ToTable("EXPORTFIELDS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Exportrecords", b =>
                {
                    b.Property<long>("FmtRecordid")
                        .HasColumnName("FMT_RECORDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FmtFmtid")
                        .HasColumnName("FMT_FMTID");

                    b.Property<long>("FmtRecchildren")
                        .HasColumnName("FMT_RECCHILDREN");

                    b.Property<string>("FmtRecdata")
                        .IsRequired()
                        .HasColumnName("FMT_RECDATA")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long>("FmtRecparent")
                        .HasColumnName("FMT_RECPARENT");

                    b.Property<long>("FmtRecseq")
                        .HasColumnName("FMT_RECSEQ");

                    b.Property<long>("FmtRecstyle")
                        .HasColumnName("FMT_RECSTYLE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("FmtRecordid");

                    b.HasIndex("FmtFmtid")
                        .HasName("FMT_FMTID");

                    b.HasIndex("FmtRecseq")
                        .HasName("FMT_RECSEQ");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXPORTRECORDS");

                    b.ToTable("EXPORTRECORDS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExtAsrMsg", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("EasmIsprocessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EASM_ISPROCESSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("EasmKind")
                        .HasColumnName("EASM_KIND");

                    b.Property<string>("EasmType")
                        .HasColumnName("EASM_TYPE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("EasmVersion")
                        .HasColumnName("EASM_VERSION");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXT_ASR_MSG");

                    b.HasIndex("PtntId")
                        .HasName("EXT_ASR_MSG_FK_PTNT_ID");

                    b.ToTable("EXT_ASR_MSG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExternalEntity", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SourceObjPath")
                        .HasColumnName("SOURCE_OBJ_PATH")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("SourceTransId")
                        .HasColumnName("SOURCE_TRANS_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("EXTERNAL_ENTITY_I_OBJ_GUID");

                    b.HasIndex("SourceTransId")
                        .HasName("FK_EXT_ENT_SOURCE_TRANS_ID");

                    b.ToTable("EXTERNAL_ENTITY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExternalproviderPreferred", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ExprId")
                        .HasColumnName("EXPR_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ExprId")
                        .HasName("FK_EXTERNALPROVIDER_PREFERE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXTERNALPROVIDER_PR");

                    b.HasIndex("PppuId")
                        .HasName("FK_EXTERNALPROVIDER_PREFERP");

                    b.ToTable("EXTERNALPROVIDER_PREFERRED");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Externalprovidertext", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("EptxText")
                        .HasColumnName("EPTX_TEXT")
                        .HasColumnType("image");

                    b.Property<long>("ExprId")
                        .HasColumnName("EXPR_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ExprId")
                        .HasName("EXT_PROV_TEXT_FK_EXPR_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXTERNALPROVIDERTEX");

                    b.ToTable("EXTERNALPROVIDERTEXT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExtProviderEformat", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SpecKind")
                        .HasColumnName("SPEC_KIND");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXT_PROVIDER_EFORMA");

                    b.HasIndex("PppuId")
                        .HasName("FK_EFORMAT_PPPU_ID");

                    b.ToTable("EXT_PROVIDER_EFORMAT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExtProviderEformatMacro", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("EformatId")
                        .HasColumnName("EFORMAT_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("ProcessMacro")
                        .HasColumnName("PROCESS_MACRO")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("ValidateMacro")
                        .HasColumnName("VALIDATE_MACRO")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("EformatId")
                        .HasName("FK_EFORMAT_MACRO_EFORMAT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXT_PROVIDER_EFORM1");

                    b.ToTable("EXT_PROVIDER_EFORMAT_MACRO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExtProviderScannedForm", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("EpsfDesignBlobId")
                        .HasColumnName("EPSF_DESIGN_BLOB_ID");

                    b.Property<long>("EpsfKind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EPSF_KIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("EpsfLanguage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EPSF_LANGUAGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EpsfName")
                        .HasColumnName("EPSF_NAME")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("EpsfPppuId")
                        .HasColumnName("EPSF_PPPU_ID");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("EP_SCAN_FRM_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("EP_SCAN_FRM_FK_DELETEDBY");

                    b.HasIndex("EpsfDesignBlobId")
                        .HasName("FK_EPSF_DESIGN_BLOB_ID");

                    b.HasIndex("EpsfPppuId")
                        .HasName("FK_EPSF_PPPU_ID");

                    b.HasIndex("MasterId")
                        .HasName("EP_SCAN_FRM_FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXT_PROVIDER_SCANNE");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("EP_SCAN_FRM_I_MASTERVERS");

                    b.HasIndex("EpsfName", "EpsfKind", "PartitionId")
                        .HasName("EPSF_I_NAME");

                    b.ToTable("EXT_PROVIDER_SCANNED_FORM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Extracts", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<short>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CONFIRMED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("Datetimeexecuted")
                        .HasColumnName("DATETIMEEXECUTED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("ExtrLine")
                        .HasColumnName("EXTR_LINE")
                        .HasColumnType("image");

                    b.Property<string>("Extracttype")
                        .HasColumnName("EXTRACTTYPE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Firstdate")
                        .HasColumnName("FIRSTDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("Firstitem")
                        .HasColumnName("FIRSTITEM");

                    b.Property<long?>("Forpos")
                        .HasColumnName("FORPOS");

                    b.Property<long?>("Forprovider")
                        .HasColumnName("FORPROVIDER");

                    b.Property<long?>("Foruser")
                        .HasColumnName("FORUSER");

                    b.Property<DateTime?>("Lastdate")
                        .HasColumnName("LASTDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("Lastitem")
                        .HasColumnName("LASTITEM");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Outputtype")
                        .HasColumnName("OUTPUTTYPE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Pppuexecuted")
                        .HasColumnName("PPPUEXECUTED");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Subtype1")
                        .HasColumnName("SUBTYPE1");

                    b.Property<string>("Uncpath")
                        .HasColumnName("UNCPATH")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Firstitem")
                        .HasName("EXTRACTS_FK_FIRSTITEM");

                    b.HasIndex("Forpos")
                        .HasName("EXTRACTS_FOREIGN_FORPOS");

                    b.HasIndex("Forprovider")
                        .HasName("EXTRACTS_FOREIGN_FORPROVIDER");

                    b.HasIndex("Foruser")
                        .HasName("EXTRACTS_FK_FORUSER");

                    b.HasIndex("Lastitem")
                        .HasName("EXTRACTS_FK_LASTITEM");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_EXTRACTS");

                    b.HasIndex("Pppuexecuted")
                        .HasName("EXTRACTS_FOREIGN_PPPUEXECUTE");

                    b.HasIndex("Subtype1")
                        .HasName("EXTR_SUBTYPE1_I");

                    b.ToTable("EXTRACTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FavouriteData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FAVOURITE_DATA");

                    b.ToTable("FAVOURITE_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FavouriteFolders", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FfCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FF_COUNT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FfName")
                        .HasColumnName("FF_NAME")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("FfPath")
                        .HasColumnName("FF_PATH")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("FfUserId")
                        .HasColumnName("FF_USER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FfUserId")
                        .HasName("FR_FOLDERS_FK_USER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FAVOURITE_FOLDERS");

                    b.ToTable("FAVOURITE_FOLDERS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FavouriteUrl", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FuCount")
                        .HasColumnName("FU_COUNT");

                    b.Property<long?>("FuDataId")
                        .HasColumnName("FU_DATA_ID");

                    b.Property<DateTime?>("FuDateLast")
                        .HasColumnName("FU_DATE_LAST")
                        .HasColumnType("datetime");

                    b.Property<string>("FuDescription")
                        .HasColumnName("FU_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("FuFoldersId")
                        .HasColumnName("FU_FOLDERS_ID");

                    b.Property<string>("FuInfo")
                        .HasColumnName("FU_INFO")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FuShared")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FU_SHARED")
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("FuUrl")
                        .HasColumnName("FU_URL")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("FuUserId")
                        .HasColumnName("FU_USER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FuDataId")
                        .HasName("FAVOURITE_URL_FK_DATA");

                    b.HasIndex("FuFoldersId")
                        .HasName("FR_URL_FK_FOLDERS_ID");

                    b.HasIndex("FuUserId")
                        .HasName("FR_URL_FK_USER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FAVOURITE_URL");

                    b.ToTable("FAVOURITE_URL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FaxedLetters", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FaxlJobId")
                        .HasColumnName("FAXL_JOB_ID");

                    b.Property<long>("FaxlLetterId")
                        .HasColumnName("FAXL_LETTER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FaxlJobId")
                        .HasName("FK_FAX_LETTER_JOB");

                    b.HasIndex("FaxlLetterId")
                        .HasName("FK_FAXL_LETTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FAXED_LETTERS");

                    b.ToTable("FAXED_LETTERS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FaxJobs", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FaxjAckDate")
                        .HasColumnName("FAXJ_ACK_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxjAckText")
                        .HasColumnName("FAXJ_ACK_TEXT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long>("FaxjAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FAXJ_ATTEMPTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("FaxjCreatedDate")
                        .HasColumnName("FAXJ_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("FaxjDocId")
                        .HasColumnName("FAXJ_DOC_ID");

                    b.Property<string>("FaxjDocType")
                        .HasColumnName("FAXJ_DOC_TYPE")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<long?>("FaxjEserviceid")
                        .HasColumnName("FAXJ_ESERVICEID");

                    b.Property<string>("FaxjJobDescription")
                        .HasColumnName("FAXJ_JOB_DESCRIPTION")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("FaxjNumber")
                        .HasColumnName("FAXJ_NUMBER")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("FaxjRecipient")
                        .HasColumnName("FAXJ_RECIPIENT");

                    b.Property<string>("FaxjRecpDesc")
                        .HasColumnName("FAXJ_RECP_DESC")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("FaxjSender")
                        .HasColumnName("FAXJ_SENDER");

                    b.Property<string>("FaxjServiceJobId")
                        .HasColumnName("FAXJ_SERVICE_JOB_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("FaxjStatus")
                        .HasColumnName("FAXJ_STATUS");

                    b.Property<string>("FaxjStatusDescription")
                        .HasColumnName("FAXJ_STATUS_DESCRIPTION")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FaxjDocId")
                        .HasName("FK_FAX_JOB_DOC");

                    b.HasIndex("FaxjEserviceid")
                        .HasName("FK_FAXJ_EMESSAGE");

                    b.HasIndex("FaxjRecipient")
                        .HasName("FK_FAXJ_RECIPIENT");

                    b.HasIndex("FaxjSender")
                        .HasName("FK_FAXJ_SENDER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FAX_JOBS");

                    b.ToTable("FAX_JOBS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Financialperiod", b =>
                {
                    b.Property<long>("FnprId")
                        .HasColumnName("FNPR_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FnprEnddate")
                        .HasColumnName("FNPR_ENDDATE")
                        .HasColumnType("datetime");

                    b.Property<long>("FnprNumber")
                        .HasColumnName("FNPR_NUMBER");

                    b.Property<long>("FnprType")
                        .HasColumnName("FNPR_TYPE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("TrnsIdLast")
                        .HasColumnName("TRNS_ID_LAST");

                    b.HasKey("FnprId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FINANCIALPERIOD");

                    b.HasIndex("TrnsIdLast")
                        .HasName("FINANCIALPERIOD_FK_LAST");

                    b.HasIndex("FnprType", "FnprNumber", "PartitionId")
                        .IsUnique()
                        .HasName("FNPR_TYPENUMBER");

                    b.ToTable("FINANCIALPERIOD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FinancialReportsByMacros", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Macro1")
                        .HasColumnName("MACRO1")
                        .HasColumnType("image");

                    b.Property<byte[]>("Macro2")
                        .HasColumnName("MACRO2")
                        .HasColumnType("image");

                    b.Property<byte[]>("Macro3")
                        .HasColumnName("MACRO3")
                        .HasColumnType("image");

                    b.Property<byte[]>("Macro4")
                        .HasColumnName("MACRO4")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FINANCIAL_REPORTS_B");

                    b.ToTable("FINANCIAL_REPORTS_BY_MACROS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FinancialReportsTemplates", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("AutoPrint")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUTO_PRINT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<byte[]>("Component")
                        .HasColumnName("COMPONENT")
                        .HasColumnType("image");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("DATE_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("DATECREATED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PayeeProvider")
                        .HasColumnName("PAYEE_PROVIDER");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("Trial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRIAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<long?>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FINANCIAL_REPORTS_T");

                    b.HasIndex("PayeeProvider")
                        .HasName("FINRPTS_TEMPLATES_");

                    b.HasIndex("PosId")
                        .HasName("FIN_REP_TEMPL_FK_POS");

                    b.HasIndex("UserId")
                        .HasName("FR_TEMPLATES_FK_USER_ID");

                    b.ToTable("FINANCIAL_REPORTS_TEMPLATES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Financialyear", b =>
                {
                    b.Property<long>("FnyrId")
                        .HasColumnName("FNYR_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FnprIdMonth")
                        .HasColumnName("FNPR_ID_MONTH");

                    b.Property<long?>("FnprIdTax")
                        .HasColumnName("FNPR_ID_TAX");

                    b.Property<long?>("FnprIdUser")
                        .HasColumnName("FNPR_ID_USER");

                    b.Property<DateTime>("FnyrEnddate")
                        .HasColumnName("FNYR_ENDDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("FnyrId");

                    b.HasIndex("FnprIdMonth")
                        .HasName("FNPR_MONTH");

                    b.HasIndex("FnprIdTax")
                        .HasName("FNPR_TAX");

                    b.HasIndex("FnprIdUser")
                        .HasName("FNPR_USER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FINANCIALYEAR");

                    b.ToTable("FINANCIALYEAR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FindObjects", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("FoAsync")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FO_ASYNC")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("FoData")
                        .HasColumnName("FO_DATA")
                        .HasColumnType("image");

                    b.Property<string>("FoDescription")
                        .HasColumnName("FO_DESCRIPTION")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("FoDirect")
                        .HasColumnName("FO_DIRECT")
                        .HasColumnType("char(1)");

                    b.Property<long?>("FoFolder")
                        .HasColumnName("FO_FOLDER");

                    b.Property<short>("FoForUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FO_FOR_USER")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("FoLimit")
                        .HasColumnName("FO_LIMIT")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("FoName")
                        .HasColumnName("FO_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("FoPosId")
                        .HasColumnName("FO_POS_ID");

                    b.Property<long?>("FoRoleId")
                        .HasColumnName("FO_ROLE_ID");

                    b.Property<long?>("FoTimeout")
                        .HasColumnName("FO_TIMEOUT");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FoFolder")
                        .HasName("FIND_OBJECTS_FK_FOLDER");

                    b.HasIndex("FoPosId")
                        .HasName("FK_FIND_OBJECTS_POS");

                    b.HasIndex("FoRoleId")
                        .HasName("FK_FIND_OBJECTS_ROLE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FIND_OBJECTS");

                    b.ToTable("FIND_OBJECTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FindObjectsGroup", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FogFolder")
                        .HasColumnName("FOG_FOLDER");

                    b.Property<long?>("FogPosId")
                        .HasColumnName("FOG_POS_ID");

                    b.Property<long?>("FogRoleId")
                        .HasColumnName("FOG_ROLE_ID");

                    b.Property<byte[]>("Header")
                        .HasColumnName("HEADER")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("TITLE")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FogFolder")
                        .HasName("FIND_OBJECTS_GROUP_FK_FOLDER");

                    b.HasIndex("FogPosId")
                        .HasName("FK_FIND_OBJECTS_GROUP_POS");

                    b.HasIndex("FogRoleId")
                        .HasName("FK_FIND_OBJECTS_GROUP_ROLE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FIND_OBJECTS_GROUP");

                    b.ToTable("FIND_OBJECTS_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FindObjectsGroupLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FindObjectGroupOid")
                        .HasColumnName("FIND_OBJECT_GROUP_OID");

                    b.Property<long?>("FindObjectOid")
                        .HasColumnName("FIND_OBJECT_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("UseHeader")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_HEADER")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("UsePageBreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_PAGE_BREAK")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("UseTitle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_TITLE")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("FindObjectGroupOid")
                        .HasName("FOGL_FK_FIND_OBJECT_GROUP");

                    b.HasIndex("FindObjectOid")
                        .HasName("FOGL_FK_FIND_OBJECT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FIND_OBJECTS_GROUP_");

                    b.ToTable("FIND_OBJECTS_GROUP_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FindObjectsTree", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FotName")
                        .HasColumnName("FOT_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("FotParent")
                        .HasColumnName("FOT_PARENT");

                    b.Property<long?>("FotPosId")
                        .HasColumnName("FOT_POS_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FotParent")
                        .HasName("FIND_OBJECTS_TREE_FK_PARENT");

                    b.HasIndex("FotPosId")
                        .HasName("FK_FIND_OBJECTS_TREE_POS");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FIND_OBJECTS_TREE");

                    b.ToTable("FIND_OBJECTS_TREE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Flowchartdef", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FcCaption")
                        .IsRequired()
                        .HasColumnName("FC_CAPTION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<long>("FcComplexFilterOid")
                        .HasColumnName("FC_COMPLEX_FILTER_OID");

                    b.Property<long>("FcDisplayMedicationsMode")
                        .HasColumnName("FC_DISPLAY_MEDICATIONS_MODE");

                    b.Property<long>("FcDisplayPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FC_DISPLAY_PERIOD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("FcDisplayTimeDimension")
                        .HasColumnName("FC_DISPLAY_TIME_DIMENSION");

                    b.Property<long>("FcDisplayTimeMode")
                        .HasColumnName("FC_DISPLAY_TIME_MODE");

                    b.Property<long>("FcIntervalData")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FC_INTERVAL_DATA")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("FcIntervalPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FC_INTERVAL_PERIOD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("FcIntervalType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FC_INTERVAL_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("FcLowerPanelContent")
                        .HasColumnName("FC_LOWER_PANEL_CONTENT");

                    b.Property<long?>("FcLowerPanelGuidelineOid")
                        .HasColumnName("FC_LOWER_PANEL_GUIDELINE_OID");

                    b.Property<long?>("FcLowerPanelHeight")
                        .HasColumnName("FC_LOWER_PANEL_HEIGHT");

                    b.Property<long>("FcLowerPanelOpen")
                        .HasColumnName("FC_LOWER_PANEL_OPEN");

                    b.Property<string>("FcLowerPanelUrl")
                        .HasColumnName("FC_LOWER_PANEL_URL")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("FcLowerPanelUrlDescr")
                        .HasColumnName("FC_LOWER_PANEL_URL_DESCR")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<byte[]>("FcMeasures")
                        .HasColumnName("FC_MEASURES")
                        .HasColumnType("image");

                    b.Property<long>("FcMedicationShowMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FC_MEDICATION_SHOW_MODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("FcMedicationsCodes")
                        .HasColumnName("FC_MEDICATIONS_CODES")
                        .HasColumnType("image");

                    b.Property<DateTime?>("FcOffsetDate")
                        .HasColumnName("FC_OFFSET_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("FcOffsetType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FC_OFFSET_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("FcOffsetUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FC_OFFSET_UNIT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("FcOffsetUnitType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FC_OFFSET_UNIT_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("FcScrollColumnWidth")
                        .HasColumnName("FC_SCROLL_COLUMN_WIDTH");

                    b.Property<long>("FcWorkingDirection")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FC_WORKING_DIRECTION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("FcZoomLevel")
                        .HasColumnName("FC_ZOOM_LEVEL");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FcComplexFilterOid")
                        .HasName("FLOWCHARTDEF_FK2");

                    b.HasIndex("FcLowerPanelGuidelineOid")
                        .HasName("FLOWCHARTDEF_FK1");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FLOWCHARTDEF");

                    b.HasIndex("Code", "PartitionId")
                        .IsUnique()
                        .HasName("FLOWCHARTDEF_UQ1");

                    b.ToTable("FLOWCHARTDEF");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FtpFile", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FileKind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FILE_KIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("FileModified")
                        .HasColumnName("FILE_MODIFIED")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnName("FILE_PATH")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("FileSize")
                        .HasColumnName("FILE_SIZE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FTP_FILE");

                    b.ToTable("FTP_FILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FtpFileLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FtpFileId")
                        .HasColumnName("FTP_FILE_ID");

                    b.Property<string>("Logtxt")
                        .IsRequired()
                        .HasColumnName("LOGTXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FtpFileId")
                        .HasName("FK_FTPFILELOG_FTPFILEID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_FTP_FILE_LOG");

                    b.ToTable("FTP_FILE_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Gp2gpFormat", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Destination")
                        .HasColumnName("DESTINATION");

                    b.Property<long>("Direction")
                        .HasColumnName("DIRECTION");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("ExportimportMacro")
                        .HasColumnName("EXPORTIMPORT_MACRO")
                        .HasColumnType("image");

                    b.Property<long>("ExportimportMacroTimeout")
                        .HasColumnName("EXPORTIMPORT_MACRO_TIMEOUT");

                    b.Property<short>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PreviewMacro")
                        .HasColumnName("PREVIEW_MACRO")
                        .HasColumnType("image");

                    b.Property<long>("PreviewMacroTimeout")
                        .HasColumnName("PREVIEW_MACRO_TIMEOUT");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("ValidateMacro")
                        .HasColumnName("VALIDATE_MACRO")
                        .HasColumnType("image");

                    b.Property<long>("ValidateMacroTimeout")
                        .HasColumnName("VALIDATE_MACRO_TIMEOUT");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("GP2GP_FORMAT_I_OBJ_GUID");

                    b.ToTable("GP2GP_FORMAT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Gp2gpLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Activity")
                        .HasColumnName("ACTIVITY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<string>("DestinationProviderName")
                        .HasColumnName("DESTINATION_PROVIDER_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EdiAddress")
                        .HasColumnName("EDI_ADDRESS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("ErrorMessage")
                        .HasColumnName("ERROR_MESSAGE")
                        .HasColumnType("image");

                    b.Property<short>("ExcludePrivateInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EXCLUDE_PRIVATE_INFO")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("FILE_NAME")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long?>("FormatId")
                        .HasColumnName("FORMAT_ID");

                    b.Property<long>("LoggedUserId")
                        .HasColumnName("LOGGED_USER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PatientConsent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PATIENT_CONSENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnName("PATIENT_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PatientNhi")
                        .IsRequired()
                        .HasColumnName("PATIENT_NHI")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SourceProviderName")
                        .HasColumnName("SOURCE_PROVIDER_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("WorkstationIp")
                        .IsRequired()
                        .HasColumnName("WORKSTATION_IP")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("LoggedUserId")
                        .HasName("FK_GP2GPLOG_LOGGEDUSER");

                    b.HasIndex("ObjGuid")
                        .HasName("GP2GP_LOG_I_OBJ_GUID");

                    b.ToTable("GP2GP_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GroupSession", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("GsChanged")
                        .HasColumnName("GS_CHANGED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("GsCreated")
                        .HasColumnName("GS_CREATED")
                        .HasColumnType("datetime");

                    b.Property<long>("GsProviderId")
                        .HasColumnName("GS_PROVIDER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GsProviderId")
                        .HasName("FK_GS_PROVIDER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_GROUP_SESSION");

                    b.ToTable("GROUP_SESSION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GroupSessionProvider", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("GspGroupSessionId")
                        .HasColumnName("GSP_GROUP_SESSION_ID");

                    b.Property<long>("GspProviderId")
                        .HasColumnName("GSP_PROVIDER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GspGroupSessionId")
                        .HasName("FK_GSP_GROUP_SESSION_ID");

                    b.HasIndex("GspProviderId")
                        .HasName("FK_GSP_PROVIDER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_GROUP_SESSION_PROVI");

                    b.ToTable("GROUP_SESSION_PROVIDER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Guideline", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("GlApplyToDescendants")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_APPLY_TO_DESCENDANTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("GlAutomaticRun")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_AUTOMATIC_RUN")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("GlCareplanId")
                        .HasColumnName("GL_CAREPLAN_ID");

                    b.Property<long?>("GlClickAction")
                        .HasColumnName("GL_CLICK_ACTION");

                    b.Property<byte[]>("GlClickMacro")
                        .HasColumnName("GL_CLICK_MACRO")
                        .HasColumnType("image");

                    b.Property<long?>("GlComplexFilterId")
                        .HasColumnName("GL_COMPLEX_FILTER_ID");

                    b.Property<long?>("GlConceptId")
                        .HasColumnName("GL_CONCEPT_ID");

                    b.Property<short>("GlEncCodedToDiagnosis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_ENC_CODED_TO_DIAGNOSIS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("GlIndApplyToDesc")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_IND_APPLY_TO_DESC")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("GlIndConceptId")
                        .HasColumnName("GL_IND_CONCEPT_ID");

                    b.Property<short>("GlIndIsActiveProblem")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_IND_IS_ACTIVE_PROBLEM")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("GlIsGroupMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_IS_GROUP_MEMBER")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("GlMacro")
                        .HasColumnName("GL_MACRO")
                        .HasColumnType("image");

                    b.Property<byte[]>("GlMacroIcons")
                        .HasColumnName("GL_MACRO_ICONS")
                        .HasColumnType("image");

                    b.Property<long?>("GlMainConceptId")
                        .HasColumnName("GL_MAIN_CONCEPT_ID");

                    b.Property<string>("GlName")
                        .HasColumnName("GL_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<byte[]>("GlNarrative")
                        .HasColumnName("GL_NARRATIVE")
                        .HasColumnType("image");

                    b.Property<long?>("GlPatientFilterId")
                        .HasColumnName("GL_PATIENT_FILTER_ID");

                    b.Property<long?>("GlPatientGroupId")
                        .HasColumnName("GL_PATIENT_GROUP_ID");

                    b.Property<long?>("GlPersonId")
                        .HasColumnName("GL_PERSON_ID");

                    b.Property<long?>("GlScheduledTaskId")
                        .HasColumnName("GL_SCHEDULED_TASK_ID");

                    b.Property<short>("GlSearchCncptInProblems")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_SEARCH_CNCPT_IN_PROBLEMS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("GlSource")
                        .HasColumnName("GL_SOURCE")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long>("GlType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("GlUpdated")
                        .HasColumnName("GL_UPDATED")
                        .HasColumnType("datetime");

                    b.Property<short>("GlUseAlerts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_USE_ALERTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("GlUsePatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_USE_PATIENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("GlUseScreening")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GL_USE_SCREENING")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GlCareplanId")
                        .HasName("GL_CAREPLAN_ID_FK");

                    b.HasIndex("GlComplexFilterId")
                        .HasName("GL_COMPLEX_FILTER_ID_FK");

                    b.HasIndex("GlConceptId")
                        .HasName("GL_CONCEPT_ID_FK");

                    b.HasIndex("GlIndConceptId")
                        .HasName("GL_IND_CONCEPT_ID_FK");

                    b.HasIndex("GlMainConceptId")
                        .HasName("GLMAINCONCEPT_FK");

                    b.HasIndex("GlPatientFilterId")
                        .HasName("GL_PATIENT_FILTER_ID_FK");

                    b.HasIndex("GlPatientGroupId")
                        .HasName("GL_PATIENT_GROUP_ID_FK");

                    b.HasIndex("GlPersonId")
                        .HasName("GL_PERSON_ID_FK");

                    b.HasIndex("GlScheduledTaskId")
                        .HasName("GL_SCHEDULED_TASK_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_GUIDELINE");

                    b.ToTable("GUIDELINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineCdRecommendLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("GcdrCycleDataId")
                        .HasColumnName("GCDR_CYCLE_DATA_ID");

                    b.Property<long>("GcdrRecommendationId")
                        .HasColumnName("GCDR_RECOMMENDATION_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GcdrCycleDataId")
                        .HasName("GCDR_CYCLE_DATA_ID_FK");

                    b.HasIndex("GcdrRecommendationId")
                        .HasName("GCDR_RECOMMENDATION_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_GUIDELINE_CD_RECOMM");

                    b.ToTable("GUIDELINE_CD_RECOMMEND_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineCycle", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("GlcDatetime")
                        .HasColumnName("GLC_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<long>("GlcGuidelineId")
                        .HasColumnName("GLC_GUIDELINE_ID");

                    b.Property<long>("GlcStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GLC_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GlcGuidelineId")
                        .HasName("GLC_GUIDELINE_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_GUIDELINE_CYCLE");

                    b.ToTable("GUIDELINE_CYCLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineCycleData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("GlcdChecked")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GLCD_CHECKED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("GlcdComment")
                        .HasColumnName("GLCD_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long>("GlcdCycleId")
                        .HasColumnName("GLCD_CYCLE_ID");

                    b.Property<DateTime?>("GlcdDate")
                        .HasColumnName("GLCD_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("GlcdPatientId")
                        .HasColumnName("GLCD_PATIENT_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GlcdCycleId")
                        .HasName("GLCD_CYCLE_ID_FK");

                    b.HasIndex("GlcdPatientId")
                        .HasName("GLCD_PATIENT_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_GUIDELINE_CYCLE_DAT");

                    b.ToTable("GUIDELINE_CYCLE_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineCycleTemp", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("GctGuidelineCycleId")
                        .HasColumnName("GCT_GUIDELINE_CYCLE_ID");

                    b.Property<long>("GctPackCount")
                        .HasColumnName("GCT_PACK_COUNT");

                    b.Property<long>("GctPackNumber")
                        .HasColumnName("GCT_PACK_NUMBER");

                    b.Property<long>("GctPartitionId")
                        .HasColumnName("GCT_PARTITION_ID");

                    b.Property<byte[]>("GctPatientIds")
                        .HasColumnName("GCT_PATIENT_IDS")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("GctGuidelineCycleId")
                        .HasName("GCT_GUIDELINE_CYCLE_ID_FK");

                    b.ToTable("GUIDELINE_CYCLE_TEMP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineInactivity", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("GlinGuidelineId")
                        .HasColumnName("GLIN_GUIDELINE_ID");

                    b.Property<short>("GlinIsInactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GLIN_IS_INACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("GlinPppuId")
                        .HasColumnName("GLIN_PPPU_ID");

                    b.Property<long?>("GlinRecommendationId")
                        .HasColumnName("GLIN_RECOMMENDATION_ID");

                    b.Property<long?>("GlinSituationId")
                        .HasColumnName("GLIN_SITUATION_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GlinGuidelineId")
                        .HasName("GLIN_GUIDELINE_ID_FK");

                    b.HasIndex("GlinPppuId")
                        .HasName("GLIN_PPPU_ID_FK");

                    b.HasIndex("GlinRecommendationId")
                        .HasName("GLIN_RECOMMENDATION_ID_FK");

                    b.HasIndex("GlinSituationId")
                        .HasName("GLIN_SITUATION_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_GUIDELINE_INACTIVIT");

                    b.ToTable("GUIDELINE_INACTIVITY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidsProgress", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COMPLETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("KeyField")
                        .HasColumnName("KEY_FIELD")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("LastProcessed")
                        .HasColumnName("LAST_PROCESSED");

                    b.Property<string>("Tablename")
                        .HasColumnName("TABLENAME")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("VersionedData")
                        .HasColumnName("VERSIONED_DATA")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.ToTable("GUIDS_PROGRESS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Headline", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("HlCategory")
                        .HasColumnName("HL_CATEGORY");

                    b.Property<DateTime?>("HlDateFrom")
                        .HasColumnName("HL_DATE_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("HlDateTo")
                        .HasColumnName("HL_DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("HlDeatailed")
                        .HasColumnName("HL_DEATAILED")
                        .HasColumnType("image");

                    b.Property<long?>("HlHeadlineType")
                        .HasColumnName("HL_HEADLINE_TYPE");

                    b.Property<long?>("HlImageindex")
                        .HasColumnName("HL_IMAGEINDEX");

                    b.Property<short>("HlInactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HL_INACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("HlOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HL_ORDER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("HlOrganisation")
                        .HasColumnName("HL_ORGANISATION");

                    b.Property<short>("HlRequireAck")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HL_REQUIRE_ACK")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("HlShortdescr")
                        .HasColumnName("HL_SHORTDESCR")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("HlShowOnce")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HL_SHOW_ONCE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("HlSummary")
                        .HasColumnName("HL_SUMMARY")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<string>("HlUrl")
                        .HasColumnName("HL_URL")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("HlCategory")
                        .HasName("HL_FK_CATEGORY");

                    b.HasIndex("HlOrder")
                        .HasName("HEADLINE_I_HL_ORDER");

                    b.HasIndex("HlOrganisation")
                        .HasName("HEADLINE_FK_ORG_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_HEADLINE");

                    b.ToTable("HEADLINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HeadlinePresenter", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("HlpDontShow")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HLP_DONT_SHOW")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("HlpHeadlineId")
                        .HasColumnName("HLP_HEADLINE_ID");

                    b.Property<long?>("HlpPatientId")
                        .HasColumnName("HLP_PATIENT_ID");

                    b.Property<long>("HlpUserId")
                        .HasColumnName("HLP_USER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("HlpHeadlineId")
                        .HasName("HLP_FK_HEADLINE_ID");

                    b.HasIndex("HlpPatientId")
                        .HasName("HLP_FK_PATIENT_ID");

                    b.HasIndex("HlpUserId")
                        .HasName("HLP_FK_USER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_HEADLINE_PRESENTER");

                    b.ToTable("HEADLINE_PRESENTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HeadlineRole", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("HlrChecked")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HLR_CHECKED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("HlrHeadlineId")
                        .HasColumnName("HLR_HEADLINE_ID");

                    b.Property<long?>("HlrRoleId")
                        .HasColumnName("HLR_ROLE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("HlrHeadlineId")
                        .HasName("HLR_FK_HEADLINE_ID");

                    b.HasIndex("HlrRoleId")
                        .HasName("HLR_FK_ROLE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_HEADLINE_ROLE");

                    b.ToTable("HEADLINE_ROLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HealthlinkForm", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("DataAttributes")
                        .HasColumnName("DATA_ATTRIBUTES")
                        .HasColumnType("image");

                    b.Property<byte[]>("DataContainer")
                        .HasColumnName("DATA_CONTAINER")
                        .HasColumnType("image");

                    b.Property<byte[]>("DataView")
                        .HasColumnName("DATA_VIEW")
                        .HasColumnType("image");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("EformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EFORM_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FormDescription")
                        .HasColumnName("FORM_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("FormStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FORM_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OrgStructureId")
                        .HasColumnName("ORG_STRUCTURE_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("FK_HEALTHLINK_FORM_CASE");

                    b.HasIndex("CreatedBy")
                        .HasName("FK_HEALTHLINK_FORM_PPPU");

                    b.HasIndex("ObjGuid")
                        .HasName("HEALTHLINK_FORM_I_OBJ_GUID");

                    b.HasIndex("OrgStructureId")
                        .HasName("FK_HEALTHLINK_ORG_STRCTR");

                    b.HasIndex("PatientId")
                        .HasName("FK_HEALTHLINK_FORM_PTNT");

                    b.ToTable("HEALTHLINK_FORM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HelpInfo", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("HlpBody")
                        .HasColumnName("HLP_BODY")
                        .HasColumnType("image");

                    b.Property<string>("HlpCode")
                        .HasColumnName("HLP_CODE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("HlpHeader")
                        .HasColumnName("HLP_HEADER")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<byte[]>("HlpLinks")
                        .HasColumnName("HLP_LINKS")
                        .HasColumnType("image");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_HELP_INFO");

                    b.ToTable("HELP_INFO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HelpInfoLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("HilConcept")
                        .HasColumnName("HIL_CONCEPT");

                    b.Property<long>("HilHelpinfo")
                        .HasColumnName("HIL_HELPINFO");

                    b.Property<long?>("HilOrganization")
                        .HasColumnName("HIL_ORGANIZATION");

                    b.Property<long?>("HilProblemType")
                        .HasColumnName("HIL_PROBLEM_TYPE");

                    b.Property<long?>("HilShortcode")
                        .HasColumnName("HIL_SHORTCODE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("HilConcept")
                        .HasName("FK_HELP_INFO_LINKS_CONCEPT");

                    b.HasIndex("HilHelpinfo")
                        .HasName("FK_HELP_INFO_LINKS_HELPINFO");

                    b.HasIndex("HilOrganization")
                        .HasName("FK_HELP_INFO_LINKS_ORG");

                    b.HasIndex("HilShortcode")
                        .HasName("FK_HELP_INFO_LINKS_SHORTCODE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_HELP_INFO_LINKS");

                    b.ToTable("HELP_INFO_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HicData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("BatchId")
                        .HasColumnName("BATCH_ID");

                    b.Property<byte[]>("BinaryData")
                        .HasColumnName("BINARY_DATA")
                        .HasColumnType("image");

                    b.Property<long?>("DataType")
                        .HasColumnName("DATA_TYPE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ReportRequestId")
                        .HasColumnName("REPORT_REQUEST_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SignedBy")
                        .HasColumnName("SIGNED_BY");

                    b.Property<DateTime?>("SignedOn")
                        .HasColumnName("SIGNED_ON")
                        .HasColumnType("datetime");

                    b.Property<long?>("TransId")
                        .HasColumnName("TRANS_ID");

                    b.Property<string>("TransactionId")
                        .HasColumnName("TRANSACTION_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("BatchId")
                        .HasName("HIC_DATA_FK_BATCH");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_HIC_DATA");

                    b.HasIndex("SignedBy")
                        .HasName("HIC_DATA_FK_SIGNED_BY");

                    b.HasIndex("TransId")
                        .HasName("HIC_DATA_FK_TRANS");

                    b.ToTable("HIC_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HicTransmissions", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AttemptId")
                        .HasColumnName("ATTEMPT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IsSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_SUCCESS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnName("RECEIVE_DATE")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ReceiveReport")
                        .HasColumnName("RECEIVE_REPORT")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SendData")
                        .HasColumnName("SEND_DATA");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnName("SEND_DATE")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("SendReport")
                        .HasColumnName("SEND_REPORT")
                        .HasColumnType("image");

                    b.Property<long?>("TransmType")
                        .HasColumnName("TRANSM_TYPE");

                    b.Property<string>("TransmissionId")
                        .HasColumnName("TRANSMISSION_ID")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AttemptId")
                        .HasName("HIC_TRANS_FK_ATTEMPT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_HIC_TRANSMISSIONS");

                    b.HasIndex("SendData")
                        .HasName("HIC_TRANSM_FK_DATA");

                    b.ToTable("HIC_TRANSMISSIONS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HisCdoTransdata", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AbnormalFlag")
                        .HasColumnName("ABNORMAL_FLAG");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("Code")
                        .HasColumnName("CODE");

                    b.Property<long?>("Collection")
                        .HasColumnName("COLLECTION");

                    b.Property<long?>("Concept")
                        .HasColumnName("CONCEPT");

                    b.Property<long?>("Conceptvalue")
                        .HasColumnName("CONCEPTVALUE");

                    b.Property<long?>("DataE")
                        .HasColumnName("DATA_E");

                    b.Property<long?>("DiagnosisId")
                        .HasColumnName("DIAGNOSIS_ID");

                    b.Property<DateTime?>("Dt1")
                        .HasColumnName("DT1")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dtobserved")
                        .HasColumnName("DTOBSERVED")
                        .HasColumnType("datetime");

                    b.Property<string>("Emphasis")
                        .HasColumnName("EMPHASIS")
                        .HasColumnType("char(2)");

                    b.Property<long?>("Infoprovider")
                        .HasColumnName("INFOPROVIDER");

                    b.Property<long?>("Obsref")
                        .HasColumnName("OBSREF");

                    b.Property<long?>("Ord")
                        .HasColumnName("ORD");

                    b.Property<long>("PartitionId")
                        .HasColumnName("PARTITION_ID");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<float?>("Qmax")
                        .HasColumnName("QMAX");

                    b.Property<float?>("Qmin")
                        .HasColumnName("QMIN");

                    b.Property<long?>("Qunit")
                        .HasColumnName("QUNIT");

                    b.Property<long?>("Qunit2")
                        .HasColumnName("QUNIT2");

                    b.Property<float?>("Qvalue")
                        .HasColumnName("QVALUE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Term")
                        .HasColumnName("TERM");

                    b.Property<byte[]>("Texts")
                        .HasColumnName("TEXTS")
                        .HasColumnType("image");

                    b.Property<long>("Trans")
                        .HasColumnName("TRANS");

                    b.Property<long>("Versionmax")
                        .HasColumnName("VERSIONMAX");

                    b.Property<long>("Versionmin")
                        .HasColumnName("VERSIONMIN");

                    b.HasKey("Oid");

                    b.ToTable("HIS_CDO_TRANSDATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HisCdoTransdatadetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime");

                    b.Property<long?>("FormReprBodyId")
                        .HasColumnName("FORM_REPR_BODY_ID");

                    b.Property<long?>("FormReprExclude")
                        .HasColumnName("FORM_REPR_EXCLUDE");

                    b.Property<long?>("FormReprForceCr")
                        .HasColumnName("FORM_REPR_FORCE_CR");

                    b.Property<long?>("FormStatus")
                        .HasColumnName("FORM_STATUS");

                    b.Property<long?>("FormType")
                        .HasColumnName("FORM_TYPE");

                    b.Property<long>("PartitionId")
                        .HasColumnName("PARTITION_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Transdata")
                        .HasColumnName("TRANSDATA");

                    b.HasKey("Oid");

                    b.ToTable("HIS_CDO_TRANSDATADETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HiserviceAudit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EmessageId")
                        .HasColumnName("EMESSAGE_ID");

                    b.Property<string>("IhiNumber")
                        .HasColumnName("IHI_NUMBER")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("MessageId")
                        .HasColumnName("MESSAGE_ID")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OperationType")
                        .HasColumnName("OPERATION_TYPE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("PosHpiO")
                        .HasColumnName("POS_HPI_O")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("PppuHpiI")
                        .HasColumnName("PPPU_HPI_I")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("WebServiceVersion")
                        .HasColumnName("WEB_SERVICE_VERSION")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("EmessageId")
                        .HasName("FK_HISERVICE_AUDIT_EMSG");

                    b.HasIndex("PatientId")
                        .HasName("FK_HISERVICE_AUDIT_PATIENT");

                    b.HasIndex("PppuId")
                        .HasName("FK_HISERVICE_AUDIT_PPPU");

                    b.ToTable("HISERVICE_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HisoSession", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("Attributes")
                        .HasColumnName("ATTRIBUTES")
                        .HasColumnType("image");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiredOn")
                        .HasColumnName("EXPIRED_ON")
                        .HasColumnType("datetime");

                    b.Property<long?>("FormId")
                        .HasColumnName("FORM_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrgId")
                        .HasColumnName("ORG_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SessionKey")
                        .IsRequired()
                        .HasColumnName("SESSION_KEY")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("I_HSESSION_CASE_ID");

                    b.HasIndex("FormId")
                        .HasName("I_HSESSION_FORM_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("HISO_SESSION_I_OBJ_GUID");

                    b.HasIndex("OrgId")
                        .HasName("I_HSESSION_ORG_ID");

                    b.HasIndex("PatientId")
                        .HasName("I_HSESSION_PATIENT");

                    b.HasIndex("PppuId")
                        .HasName("I_HSESSION_PPPU_ID");

                    b.ToTable("HISO_SESSION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HisTransdataDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime");

                    b.Property<long>("PartitionId")
                        .HasColumnName("PARTITION_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SourceId")
                        .HasColumnName("SOURCE_ID")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.ToTable("HIS_TRANSDATA_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Icd", b =>
                {
                    b.Property<long>("IcdId")
                        .HasColumnName("ICD_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("IcdDescription")
                        .HasColumnName("ICD_DESCRIPTION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IcdIdentifier")
                        .HasColumnName("ICD_IDENTIFIER")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IcdId");

                    b.HasIndex("IcdDescription")
                        .HasName("ICD_DESCRIPTIONX");

                    b.HasIndex("IcdIdentifier")
                        .HasName("ICD_IDENTIFIERX");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ICD");

                    b.ToTable("ICD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImConference", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IsClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_CLOSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrgStructureId")
                        .HasColumnName("ORG_STRUCTURE_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_IM_CONFERENCE");

                    b.HasIndex("OrgStructureId")
                        .HasName("FK_IMCONFERENCE_ORGSTRUCTURE");

                    b.ToTable("IM_CONFERENCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImCreator", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("ConfId")
                        .HasColumnName("CONF_ID");

                    b.Property<long>("Creator")
                        .HasColumnName("CREATOR");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ConfId")
                        .HasName("IM_CREATOR_FK_CONF");

                    b.HasIndex("Creator")
                        .HasName("IM_CREATOR_FK_PPPU");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_IM_CREATOR");

                    b.ToTable("IM_CREATOR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImpexpEvent", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("AckDate")
                        .HasColumnName("ACK_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AckDateReceived")
                        .HasColumnName("ACK_DATE_RECEIVED")
                        .HasColumnType("datetime");

                    b.Property<string>("AckFilename")
                        .HasColumnName("ACK_FILENAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("AckStatus")
                        .HasColumnName("ACK_STATUS");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ErrDate")
                        .HasColumnName("ERR_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ErrDateReceived")
                        .HasColumnName("ERR_DATE_RECEIVED")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrFilename")
                        .HasColumnName("ERR_FILENAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("EventDate")
                        .HasColumnName("EVENT_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("FILENAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MessageControlId")
                        .HasColumnName("MESSAGE_CONTROL_ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_IMPEXP_EVENT");

                    b.ToTable("IMPEXP_EVENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportedData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("ImporterId")
                        .HasColumnName("IMPORTER_ID");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("Sourcedata")
                        .HasColumnName("SOURCEDATA")
                        .HasColumnType("image");

                    b.Property<long?>("TransId")
                        .HasColumnName("TRANS_ID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("IMPDATA__FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("IMPDATA__FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("IMPDATA__FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("IMPORTED_DATA_I_OBJ_GUID");

                    b.HasIndex("TransId")
                        .HasName("FK_IMPORTED_DATA_TRANS_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("IMPDATA__I_MASTERVERS");

                    b.ToTable("IMPORTED_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ImloFileDate")
                        .HasColumnName("IMLO_FILE_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ImloFileName")
                        .IsRequired()
                        .HasColumnName("IMLO_FILE_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ImloFileType")
                        .HasColumnName("IMLO_FILE_TYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("ImloImportDate")
                        .HasColumnName("IMLO_IMPORT_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("ImloResult")
                        .HasColumnName("IMLO_RESULT");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_IMPORT_LOG");

                    b.ToTable("IMPORT_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportsLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ComputerName")
                        .HasColumnName("COMPUTER_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EmessageId")
                        .HasColumnName("EMESSAGE_ID");

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FileNameMoved")
                        .HasColumnName("FILE_NAME_MOVED")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("IsServer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_SERVER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LogDataId")
                        .HasColumnName("LOG_DATA_ID");

                    b.Property<DateTime>("LogDate")
                        .HasColumnName("LOG_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("MessageId")
                        .HasColumnName("MESSAGE_ID")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("MessageType")
                        .HasColumnName("MESSAGE_TYPE")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("EmessageId")
                        .HasName("FK_IMPORTSLOG_EMESSAGE_ID");

                    b.HasIndex("LogDataId")
                        .HasName("FK_IMPORTSLOG_LOGDATA");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_IMPORTS_LOG");

                    b.HasIndex("PosId")
                        .HasName("FK_IMPORTSLOG_POS_ID");

                    b.ToTable("IMPORTS_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportsLogData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_IMPORTS_LOG_DATA");

                    b.ToTable("IMPORTS_LOG_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportsLogDetail", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Code")
                        .HasColumnName("CODE");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ErrorCode")
                        .HasColumnName("ERROR_CODE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("ErrorDataId")
                        .HasColumnName("ERROR_DATA_ID");

                    b.Property<DateTime>("ErrorDate")
                        .HasColumnName("ERROR_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("ErrorType")
                        .HasColumnName("ERROR_TYPE");

                    b.Property<long>("LogId")
                        .HasColumnName("LOG_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ObjectCid")
                        .HasColumnName("OBJECT_CID");

                    b.Property<long?>("ObjectOid")
                        .HasColumnName("OBJECT_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ErrorDataId")
                        .HasName("FK_IMPORTSLOGDETAIL_ERROR_DATA");

                    b.HasIndex("LogId")
                        .HasName("FK_IMPORTSLOGDETAIL_LOG_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_IMPORTS_LOG_DETAIL");

                    b.ToTable("IMPORTS_LOG_DETAIL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportTracking", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ImtrMasterDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IMTR_MASTER_DATE_TIME")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('30-DEC-1899')");

                    b.Property<long>("ImtrMasterVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IMTR_MASTER_VERSION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ImtrObjectCid")
                        .HasColumnName("IMTR_OBJECT_CID");

                    b.Property<string>("ImtrObjectGuid")
                        .IsRequired()
                        .HasColumnName("IMTR_OBJECT_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ImtrSessionId")
                        .HasColumnName("IMTR_SESSION_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ImtrObjectGuid")
                        .HasName("I_IMTR_GUID");

                    b.HasIndex("ImtrSessionId")
                        .HasName("FK_IMTR_SESSION");

                    b.HasIndex("ObjGuid")
                        .HasName("IMPORT_TRACKING_I_OBJ_GUID");

                    b.ToTable("IMPORT_TRACKING");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImSender", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MsgId")
                        .HasColumnName("MSG_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Sender")
                        .HasColumnName("SENDER");

                    b.HasKey("Oid");

                    b.HasIndex("MsgId")
                        .HasName("IM_SENDER_FK_MSG");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_IM_SENDER");

                    b.HasIndex("Sender")
                        .HasName("IM_SENDER_FK_PPPU");

                    b.ToTable("IM_SENDER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImSticker", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MsgCid")
                        .HasColumnName("MSG_CID");

                    b.Property<long>("MsgOid")
                        .HasColumnName("MSG_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ReceivedOn")
                        .HasColumnName("RECEIVED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Receiver")
                        .HasColumnName("RECEIVER");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MsgOid")
                        .HasName("IM_STIKER_FK_MESSAGE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_IM_STICKER");

                    b.HasIndex("Receiver")
                        .HasName("IM_STICKER_FK_RECEIVER");

                    b.ToTable("IM_STICKER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Infant", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("InfnApgar1")
                        .HasColumnName("INFN_APGAR1");

                    b.Property<long?>("InfnApgar2")
                        .HasColumnName("INFN_APGAR2");

                    b.Property<DateTime?>("InfnDob")
                        .HasColumnName("INFN_DOB")
                        .HasColumnType("datetime");

                    b.Property<long?>("InfnFeeding")
                        .HasColumnName("INFN_FEEDING");

                    b.Property<long?>("InfnFilenum")
                        .HasColumnName("INFN_FILENUM");

                    b.Property<string>("InfnGender")
                        .HasColumnName("INFN_GENDER")
                        .HasColumnType("char(1)");

                    b.Property<string>("InfnHealth")
                        .HasColumnName("INFN_HEALTH")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("InfnName")
                        .HasColumnName("INFN_NAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<long>("InfnNum")
                        .HasColumnName("INFN_NUM");

                    b.Property<long?>("InfnOutcome")
                        .HasColumnName("INFN_OUTCOME");

                    b.Property<long>("InfnPregnancy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INFN_PREGNANCY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("InfnStatus")
                        .HasColumnName("INFN_STATUS");

                    b.Property<long?>("InfnWeight")
                        .HasColumnName("INFN_WEIGHT");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("InfnFilenum")
                        .HasName("INFANT_FK_INFN_FILENUM");

                    b.HasIndex("InfnOutcome")
                        .HasName("INFANT_FK_INFN_OUTCOME");

                    b.HasIndex("InfnPregnancy")
                        .HasName("INFANT_FK_INFN_PREGNANCY");

                    b.HasIndex("InfnStatus")
                        .HasName("INFANT_FK_INFN_STATUS");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_INFANT");

                    b.ToTable("INFANT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InstantMessage", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("ConfId")
                        .HasColumnName("CONF_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MsgText")
                        .HasColumnName("MSG_TEXT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("SentOn")
                        .HasColumnName("SENT_ON")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("ConfId")
                        .HasName("INSTANT_MESSAGE_FK_CONFERENC");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_INSTANT_MESSAGE");

                    b.HasIndex("SentOn")
                        .HasName("INSTANTMESSAGE_I_SENTON");

                    b.ToTable("INSTANT_MESSAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InstructionTemplate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Disease")
                        .HasColumnName("DISEASE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Measure")
                        .HasColumnName("MEASURE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("TITLE")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Disease")
                        .HasName("FK_INSTR_TEMPLATE_DISEASE");

                    b.HasIndex("Measure")
                        .HasName("FK_INSTR_TEMPLATE_MEASURE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_INSTRUCTION_TEMPLAT");

                    b.HasIndex("Disease", "Measure", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("I_INSTR_TEMPL_DISEASE_MEASURE");

                    b.ToTable("INSTRUCTION_TEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InstructionTemplateLine", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Content")
                        .HasColumnName("CONTENT");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("MeasureValue")
                        .HasColumnName("MEASURE_VALUE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Template")
                        .HasColumnName("TEMPLATE");

                    b.HasKey("Oid");

                    b.HasIndex("Content")
                        .HasName("FK_INSTR_TEMPL_LINE_CONTENT");

                    b.HasIndex("MeasureValue")
                        .HasName("FK_INSTR_LINE_MEASURE_VALUE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_INSTRUCTION_TEMPLA1");

                    b.HasIndex("Template")
                        .HasName("FK_INSTR_LINE_TEMPLATE");

                    b.ToTable("INSTRUCTION_TEMPLATE_LINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InventoryAudit1", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IaCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IA_CANCELLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("IaDate")
                        .HasColumnName("IA_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("IaDispenseAdmin")
                        .HasColumnName("IA_DISPENSE_ADMIN");

                    b.Property<long?>("IaDispenseAdminDiluent")
                        .HasColumnName("IA_DISPENSE_ADMIN_DILUENT");

                    b.Property<long?>("IaInvoiceLine")
                        .HasColumnName("IA_INVOICE_LINE");

                    b.Property<long>("IaLocation")
                        .HasColumnName("IA_LOCATION");

                    b.Property<long>("IaMoveType")
                        .HasColumnName("IA_MOVE_TYPE");

                    b.Property<string>("IaNote")
                        .HasColumnName("IA_NOTE")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<long?>("IaOpNum")
                        .HasColumnName("IA_OP_NUM");

                    b.Property<string>("IaOrderNum")
                        .HasColumnName("IA_ORDER_NUM")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("IaPatientId")
                        .HasColumnName("IA_PATIENT_ID");

                    b.Property<double?>("IaQuantity")
                        .HasColumnName("IA_QUANTITY");

                    b.Property<long?>("IaRecallImm")
                        .HasColumnName("IA_RECALL_IMM");

                    b.Property<long?>("IaRecallImmDiluent")
                        .HasColumnName("IA_RECALL_IMM_DILUENT");

                    b.Property<long>("IaStockItem")
                        .HasColumnName("IA_STOCK_ITEM");

                    b.Property<long?>("IaStockLot")
                        .HasColumnName("IA_STOCK_LOT");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("IaDispenseAdmin")
                        .HasName("IA_RDA_FK");

                    b.HasIndex("IaDispenseAdminDiluent")
                        .HasName("INVENTORY_AUDIT_RDA_DILUENT_FK");

                    b.HasIndex("IaLocation")
                        .HasName("INVENTORY_AUDIT_LOCATION_FK");

                    b.HasIndex("IaMoveType")
                        .HasName("INVENTORY_AUDIT_MOVE_FK");

                    b.HasIndex("IaPatientId")
                        .HasName("FK_INVENTORY_AUDIT_PTNT_ID");

                    b.HasIndex("IaRecallImm")
                        .HasName("INVENTORY_AUDIT_RECALL_IMM_FK");

                    b.HasIndex("IaRecallImmDiluent")
                        .HasName("INVENTORY_AUDIT_RECALL_IMMD_FK");

                    b.HasIndex("IaStockItem")
                        .HasName("INVENTORY_AUDIT_STOCKITEM_FK");

                    b.HasIndex("IaStockLot")
                        .HasName("INVENTORY_AUDIT_STOCK_LOT_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("INVENTORY_AUDIT_I_OBJ_GUID");

                    b.ToTable("INVENTORY_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InventoryLevelsEom", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COST")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MonthId")
                        .HasColumnName("MONTH_ID");

                    b.Property<decimal>("MovementsCm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOVEMENTS_CM")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<decimal>("OpeningLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OPENING_LEVEL")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<decimal>("SalesCm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SALES_CM")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_INVENTORY_LEVELS_EO");

                    b.HasIndex("PosId")
                        .HasName("FK_IL_EOM_POS_ID");

                    b.HasIndex("ServiceId")
                        .HasName("FK_IL_EOM_SERVICE_ID");

                    b.ToTable("INVENTORY_LEVELS_EOM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InvestigationFormData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ControlKind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CONTROL_KIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISACTIVE")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("LongDescription")
                        .HasColumnName("LONG_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("INVESTIGATION_FORM_DATA_I_OBJ_");

                    b.HasIndex("Code", "Deletedid")
                        .IsUnique()
                        .HasName("INV_FORM_DATA_I_CODE");

                    b.ToTable("INVESTIGATION_FORM_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Kpi", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("KpiCalculationmacro")
                        .HasColumnName("KPI_CALCULATIONMACRO")
                        .HasColumnType("image");

                    b.Property<long?>("KpiComparsiontype")
                        .HasColumnName("KPI_COMPARSIONTYPE");

                    b.Property<long?>("KpiDefaultgraph")
                        .HasColumnName("KPI_DEFAULTGRAPH");

                    b.Property<string>("KpiDescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KPI_DESCRIPTION")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<short>("KpiEnablePrivacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KPI_ENABLE_PRIVACY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("KpiFormat")
                        .HasColumnName("KPI_FORMAT")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<byte[]>("KpiMacro")
                        .HasColumnName("KPI_MACRO")
                        .HasColumnType("image");

                    b.Property<string>("KpiName")
                        .HasColumnName("KPI_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("KpiOrderno")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KPI_ORDERNO")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("KpiOutputvalue")
                        .HasColumnName("KPI_OUTPUTVALUE");

                    b.Property<long>("KpiProcess")
                        .HasColumnName("KPI_PROCESS");

                    b.Property<long?>("KpiPublishtype")
                        .HasColumnName("KPI_PUBLISHTYPE");

                    b.Property<float?>("KpiTargethi")
                        .HasColumnName("KPI_TARGETHI");

                    b.Property<float?>("KpiTargetlo")
                        .HasColumnName("KPI_TARGETLO");

                    b.Property<long?>("KpiTreenode")
                        .HasColumnName("KPI_TREENODE");

                    b.Property<long?>("KpiType")
                        .HasColumnName("KPI_TYPE");

                    b.Property<long?>("KpiViewperiod")
                        .HasColumnName("KPI_VIEWPERIOD");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("KpiDefaultgraph")
                        .HasName("FK_KPI_KPI_DEFAULTGRAPH");

                    b.HasIndex("KpiProcess")
                        .HasName("KPI_PROCESS_FK");

                    b.HasIndex("KpiTreenode")
                        .HasName("KPI_TREENODE_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI");

                    b.ToTable("KPI");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiCycle", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("CycleDate")
                        .HasColumnName("CYCLE_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_COMPLETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsScheduled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_SCHEDULED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ProcessId")
                        .HasColumnName("PROCESS_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI_CYCLE");

                    b.HasIndex("ProcessId")
                        .HasName("KPI_CYCLE_PROCESS_FK");

                    b.ToTable("KPI_CYCLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<double?>("DataValue")
                        .HasColumnName("DATA_VALUE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SeriesId")
                        .HasColumnName("SERIES_ID");

                    b.Property<long>("VariableId")
                        .HasColumnName("VARIABLE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI_DATA");

                    b.HasIndex("PppuId")
                        .HasName("KPI_DATA_FK_PPPU");

                    b.HasIndex("PtntId")
                        .HasName("KPI_DATA_FK_PTNT");

                    b.HasIndex("SeriesId")
                        .HasName("KPI_DATA_SERIES_FK");

                    b.HasIndex("VariableId")
                        .HasName("KPI_DATA_VARIABLE_FK");

                    b.ToTable("KPI_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiGraph", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("KpgChartdef")
                        .HasColumnName("KPG_CHARTDEF")
                        .HasColumnType("image");

                    b.Property<long?>("KpgCompareCid")
                        .HasColumnName("KPG_COMPARE_CID");

                    b.Property<long?>("KpgCompareid")
                        .HasColumnName("KPG_COMPAREID");

                    b.Property<long?>("KpgCompareto")
                        .HasColumnName("KPG_COMPARETO");

                    b.Property<long?>("KpgCreatefor")
                        .HasColumnName("KPG_CREATEFOR");

                    b.Property<string>("KpgName")
                        .HasColumnName("KPG_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("KpgOverlays")
                        .HasColumnName("KPG_OVERLAYS")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("KpgPeriod")
                        .HasColumnName("KPG_PERIOD");

                    b.Property<long?>("KpgType")
                        .HasColumnName("KPG_TYPE");

                    b.Property<long?>("KpiId")
                        .HasColumnName("KPI_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("KpiId")
                        .HasName("KPI_GRAPH_KPI_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI_GRAPH");

                    b.ToTable("KPI_GRAPH");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiGroupTable", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("KpgtName")
                        .HasColumnName("KPGT_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("KpgtTreenodeId")
                        .HasColumnName("KPGT_TREENODE_ID");

                    b.Property<long?>("KpgtVisibleResults")
                        .HasColumnName("KPGT_VISIBLE_RESULTS");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("KpgtTreenodeId")
                        .HasName("FK_KPI_GROUP_TABLE_TREENODE");

                    b.HasIndex("ObjGuid")
                        .HasName("KPI_GROUP_TABLE_I_OBJ_GUID");

                    b.ToTable("KPI_GROUP_TABLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiGroupTableColumn", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("KpgtcDisplayName")
                        .HasColumnName("KPGTC_DISPLAY_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("KpgtcKind")
                        .HasColumnName("KPGTC_KIND");

                    b.Property<string>("KpgtcName")
                        .HasColumnName("KPGTC_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("KpgtcOrderno")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KPGTC_ORDERNO")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("KpgtcTableId")
                        .HasColumnName("KPGTC_TABLE_ID");

                    b.Property<short>("KpgtcVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KPGTC_VISIBLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("KpgtcTableId")
                        .HasName("FK_KPI_GRP_TBL_COLUMN_TABLE");

                    b.HasIndex("ObjGuid")
                        .HasName("KPI_GROUP_TABLE_COLUMN_I_OBJ_G");

                    b.ToTable("KPI_GROUP_TABLE_COLUMN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiMember", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("KpiId")
                        .HasColumnName("KPI_ID");

                    b.Property<long>("MemberCid")
                        .HasColumnName("MEMBER_CID");

                    b.Property<long>("MemberOid")
                        .HasColumnName("MEMBER_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("KpiId")
                        .HasName("KPI_MEMBER_KPI_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI_MEMBER");

                    b.ToTable("KPI_MEMBER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiProcess", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("KppName")
                        .HasColumnName("KPP_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long?>("KppTaskOid")
                        .HasColumnName("KPP_TASK_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("KppTaskOid")
                        .HasName("KPI_PROCESS_TASK_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI_PROCESS");

                    b.ToTable("KPI_PROCESS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiSeries", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CycleId")
                        .HasColumnName("CYCLE_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("EXPIRY_DATE")
                        .HasColumnType("datetime");

                    b.Property<short>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_COMPLETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_PUBLISHED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("KpiId")
                        .HasColumnName("KPI_ID");

                    b.Property<double?>("KpiTargetHi")
                        .HasColumnName("KPI_TARGET_HI");

                    b.Property<double?>("KpiTargetLo")
                        .HasColumnName("KPI_TARGET_LO");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CycleId")
                        .HasName("KPI_SERIES_CYCLE_FK");

                    b.HasIndex("KpiId")
                        .HasName("KPI_SERIES_KPI_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI_SERIES");

                    b.ToTable("KPI_SERIES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiSeriesLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("KslKpiSeriesId")
                        .HasColumnName("KSL_KPI_SERIES_ID");

                    b.Property<long?>("KslOrgStructureId")
                        .HasColumnName("KSL_ORG_STRUCTURE_ID");

                    b.Property<long?>("KslPartitionId")
                        .HasColumnName("KSL_PARTITION_ID");

                    b.Property<long?>("KslPartitionStructureId")
                        .HasColumnName("KSL_PARTITION_STRUCTURE_ID");

                    b.Property<long?>("KslPatientGroupId")
                        .HasColumnName("KSL_PATIENT_GROUP_ID");

                    b.Property<long?>("KslPppuId")
                        .HasColumnName("KSL_PPPU_ID");

                    b.Property<long?>("KslProviderGroupId")
                        .HasColumnName("KSL_PROVIDER_GROUP_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("KslKpiSeriesId")
                        .HasName("KSL_KPI_SERIES_ID_FK");

                    b.HasIndex("KslOrgStructureId")
                        .HasName("KSL_ORG_STRUCTURE_ID_FK");

                    b.HasIndex("KslPartitionId")
                        .HasName("FK_KSL_PARTITION_ID");

                    b.HasIndex("KslPartitionStructureId")
                        .HasName("FK_KSL_PARTITION_STRUCTURE_ID");

                    b.HasIndex("KslPatientGroupId")
                        .HasName("FK_KSL_PATIENT_GROUP_ID");

                    b.HasIndex("KslPppuId")
                        .HasName("KSL_PPPU_ID_FK");

                    b.HasIndex("KslProviderGroupId")
                        .HasName("KSL_PROVIDER_GROUP_ID_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI_SERIES_LINK");

                    b.ToTable("KPI_SERIES_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiTree", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("KptrDefaulttable")
                        .HasColumnName("KPTR_DEFAULTTABLE");

                    b.Property<short>("KptrEnablePrivacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KPTR_ENABLE_PRIVACY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("KptrName")
                        .HasColumnName("KPTR_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("KptrParent")
                        .HasColumnName("KPTR_PARENT");

                    b.Property<long?>("KptrProcess")
                        .HasColumnName("KPTR_PROCESS");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("KptrDefaulttable")
                        .HasName("FK_KPI_TREE_DEFAULTTABLE");

                    b.HasIndex("KptrParent")
                        .HasName("KPI_TREE_FK_PARENT");

                    b.HasIndex("KptrProcess")
                        .HasName("KPI_TREE_PROCESS_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI_TREE");

                    b.ToTable("KPI_TREE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiVariable", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("KpiId")
                        .HasColumnName("KPI_ID");

                    b.Property<string>("KpvName")
                        .HasColumnName("KPV_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<short>("KpvPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KPV_PRIMARY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("KPI_VARIABLE_I_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("KPI_VARIABLE_I_DELETEDBY");

                    b.HasIndex("KpiId")
                        .HasName("KPI_VARIABLE_KPI_FK");

                    b.HasIndex("MasterId")
                        .HasName("KPI_VARIABLE_I_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_KPI_VARIABLE");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("KPI_VARIABLE_I_MASTERVERS");

                    b.ToTable("KPI_VARIABLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LegacyDiseaseLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("LdlDate")
                        .HasColumnName("LDL_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("LdlDiseaseId")
                        .HasColumnName("LDL_DISEASE_ID");

                    b.Property<long>("LdlPatientId")
                        .HasColumnName("LDL_PATIENT_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("LdlDiseaseId")
                        .HasName("LDL_FK_LDL_DISEASE_ID");

                    b.HasIndex("LdlPatientId")
                        .HasName("LDL_FK_LDL_PATIENT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_LEGACY_DISEASE_LINK");

                    b.ToTable("LEGACY_DISEASE_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LegalStatusChanges", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LscCreatedBy")
                        .HasColumnName("LSC_CREATED_BY");

                    b.Property<DateTime>("LscCreatedOn")
                        .HasColumnName("LSC_CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("LscEventId")
                        .HasColumnName("LSC_EVENT_ID");

                    b.Property<long>("LscModifiedBy")
                        .HasColumnName("LSC_MODIFIED_BY");

                    b.Property<DateTime>("LscModifiedOn")
                        .HasColumnName("LSC_MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("LscCreatedBy")
                        .HasName("FK_LSC_CREATED_BY");

                    b.HasIndex("LscEventId")
                        .HasName("FK_LSC_EVENT_ID");

                    b.HasIndex("LscModifiedBy")
                        .HasName("FK_LSC_MODIFIED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_LEGAL_STATUS_CHANGE");

                    b.ToTable("LEGAL_STATUS_CHANGES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LegalStatusSections", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LssChangeId")
                        .HasColumnName("LSS_CHANGE_ID");

                    b.Property<long>("LssSectionId")
                        .HasColumnName("LSS_SECTION_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("LssChangeId")
                        .HasName("FK_LSS_CHANGE_ID");

                    b.HasIndex("LssSectionId")
                        .HasName("FK_LSS_SECTION_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_LEGAL_STATUS_SECTIO");

                    b.ToTable("LEGAL_STATUS_SECTIONS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LegalStatusTsections", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LstEventTemplateId")
                        .HasColumnName("LST_EVENT_TEMPLATE_ID");

                    b.Property<long>("LstSectionId")
                        .HasColumnName("LST_SECTION_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("LstEventTemplateId")
                        .HasName("FK_LST_EVENT_TEMPLATE_ID");

                    b.HasIndex("LstSectionId")
                        .HasName("FK_LST_SECTION_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_LEGAL_STATUS_TSECTI");

                    b.ToTable("LEGAL_STATUS_TSECTIONS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Letter", b =>
                {
                    b.Property<long>("LttrId")
                        .HasColumnName("LTTR_ID");

                    b.Property<long?>("CntcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CNTC_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long?>("DocCategoryId")
                        .HasColumnName("DOC_CATEGORY_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("LttrAddressId")
                        .HasColumnName("LTTR_ADDRESS_ID");

                    b.Property<long?>("LttrCase")
                        .HasColumnName("LTTR_CASE");

                    b.Property<long?>("LttrCode")
                        .HasColumnName("LTTR_CODE");

                    b.Property<long?>("LttrContentId")
                        .HasColumnName("LTTR_CONTENT_ID");

                    b.Property<DateTime?>("LttrCreated")
                        .HasColumnName("LTTR_CREATED")
                        .HasColumnType("datetime");

                    b.Property<long>("LttrCtmTypes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_CTM_TYPES")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LttrCustomMarginBottom")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_CUSTOM_MARGIN_BOTTOM")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LttrCustomMarginLeft")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_CUSTOM_MARGIN_LEFT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LttrCustomMarginRight")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_CUSTOM_MARGIN_RIGHT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LttrCustomMarginTop")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_CUSTOM_MARGIN_TOP")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LttrDate")
                        .HasColumnName("LTTR_DATE")
                        .HasColumnType("datetime");

                    b.Property<short>("LttrDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_DELETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LttrDocCategoryId")
                        .HasColumnName("LTTR_DOC_CATEGORY_ID");

                    b.Property<long?>("LttrLetterheadId")
                        .HasColumnName("LTTR_LETTERHEAD_ID");

                    b.Property<long?>("LttrOrientation")
                        .HasColumnName("LTTR_ORIENTATION");

                    b.Property<long?>("LttrOrigTemplateId")
                        .HasColumnName("LTTR_ORIG_TEMPLATE_ID");

                    b.Property<long?>("LttrPaperformat")
                        .HasColumnName("LTTR_PAPERFORMAT");

                    b.Property<short>("LttrPlainTextVars")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_PLAIN_TEXT_VARS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LttrPos")
                        .HasColumnName("LTTR_POS");

                    b.Property<long?>("LttrPrintletterhead")
                        .HasColumnName("LTTR_PRINTLETTERHEAD");

                    b.Property<long?>("LttrProvider")
                        .HasColumnName("LTTR_PROVIDER");

                    b.Property<long?>("LttrReasonId")
                        .HasColumnName("LTTR_REASON_ID");

                    b.Property<long?>("LttrRtfId")
                        .HasColumnName("LTTR_RTF_ID");

                    b.Property<short>("LttrShowAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_SHOW_ADDRESS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("LttrShowLetterhead")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_SHOW_LETTERHEAD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("LttrStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("LttrStoreOnPrint")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_STORE_ON_PRINT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LttrSubject1")
                        .HasColumnName("LTTR_SUBJECT1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LttrSubject2")
                        .HasColumnName("LTTR_SUBJECT2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("LttrTags")
                        .HasColumnName("LTTR_TAGS")
                        .HasColumnType("image");

                    b.Property<long?>("LttrTemplateCategory")
                        .HasColumnName("LTTR_TEMPLATE_CATEGORY");

                    b.Property<long?>("LttrTextFormat")
                        .HasColumnName("LTTR_TEXT_FORMAT");

                    b.Property<long?>("LttrToId")
                        .HasColumnName("LTTR_TO_ID");

                    b.Property<string>("LttrToString")
                        .HasColumnName("LTTR_TO_STRING")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("LttrToText")
                        .HasColumnName("LTTR_TO_TEXT")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("LttrToType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_TO_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("LttrType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_TYPE")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("LttrUseCustomMargins")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTR_USE_CUSTOM_MARGINS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LttrUsualSystemId")
                        .HasColumnName("LTTR_USUAL_SYSTEM_ID");

                    b.Property<DateTime?>("LttrWasPrinted")
                        .HasColumnName("LTTR_WAS_PRINTED")
                        .HasColumnType("datetime");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SrcGuid")
                        .HasColumnName("SRC_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("LttrId");

                    b.HasIndex("CntcId")
                        .HasName("LETTER_FK_CNTC");

                    b.HasIndex("Createdby")
                        .HasName("LETTER_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("LETTER_FK_DELETEDBY");

                    b.HasIndex("DocCategoryId")
                        .HasName("LETTER_DOC_CATEGORY_FK");

                    b.HasIndex("LttrAddressId")
                        .HasName("FK_LTTR_ADDRESS_ID");

                    b.HasIndex("LttrCase")
                        .HasName("LETTER_FK_BCASE");

                    b.HasIndex("LttrContentId")
                        .HasName("FK_LTTR_CONTENT_ID");

                    b.HasIndex("LttrDate")
                        .HasName("LETTER_LTTR_DATE_I");

                    b.HasIndex("LttrDocCategoryId")
                        .HasName("FK_LETTER_DOC_CATEGORY");

                    b.HasIndex("LttrLetterheadId")
                        .HasName("FK_LTTR_LETTERHEAD_ID");

                    b.HasIndex("LttrOrigTemplateId")
                        .HasName("FK_LETTER_ORIG_TEMPLATE");

                    b.HasIndex("LttrPos")
                        .HasName("LETTER_FK_POS");

                    b.HasIndex("LttrProvider")
                        .HasName("LETTER_FK_LTTR_PROVIDER");

                    b.HasIndex("LttrReasonId")
                        .HasName("I_LETTER_REASON");

                    b.HasIndex("LttrRtfId")
                        .HasName("FK_LETTER_RTF_DATA");

                    b.HasIndex("LttrTemplateCategory")
                        .HasName("LTTR_FOREIGN_TEMPLATE_CATEGO");

                    b.HasIndex("LttrType")
                        .HasName("LETTER_LTTR_TYPE_I");

                    b.HasIndex("LttrUsualSystemId")
                        .HasName("FK_LETTER_USUAL_SYSTEM");

                    b.HasIndex("MasterId")
                        .HasName("FK_LETTER_MASTER_ID");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_LETTER_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("LETTER_FK_PPPU");

                    b.HasIndex("PtntId")
                        .HasName("LETTER_FK_PTNT_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("LETTER_I_MASTERVERS");

                    b.HasIndex("ObjGuid", "Version", "PartitionId")
                        .IsUnique()
                        .HasName("I_LETTER_OBJ_GUID");

                    b.ToTable("LETTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LetterData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<byte[]>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("image");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("LETTER_DATA__FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("LETTER_DATA__FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("LETTER_DATA_FK_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_LETTER_DATA");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("LETTER_DATA__I_MASTERVERS");

                    b.ToTable("LETTER_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LetterRecipient", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("LtreIsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTRE_IS_MAIN")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("LtreLetterId")
                        .HasColumnName("LTRE_LETTER_ID");

                    b.Property<long?>("LtrePatientId")
                        .HasColumnName("LTRE_PATIENT_ID");

                    b.Property<long?>("LtrePosId")
                        .HasColumnName("LTRE_POS_ID");

                    b.Property<long?>("LtreProviderExtproviderId")
                        .HasColumnName("LTRE_PROVIDER_EXTPROVIDER_ID");

                    b.Property<string>("LtreRecipientCode")
                        .IsRequired()
                        .HasColumnName("LTRE_RECIPIENT_CODE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("LtreRecipientName")
                        .IsRequired()
                        .HasColumnName("LTRE_RECIPIENT_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("LtreType")
                        .HasColumnName("LTRE_TYPE");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("LETTER_RECIPI__FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("LETTER_RECIPI__FK_DELETEDBY");

                    b.HasIndex("LtreLetterId")
                        .HasName("FK_LTRE_LETTER_ID");

                    b.HasIndex("LtrePatientId")
                        .HasName("FK_LTRE_PATIENT_ID");

                    b.HasIndex("LtrePosId")
                        .HasName("FK_LTRE_POS_ID");

                    b.HasIndex("LtreProviderExtproviderId")
                        .HasName("FK_LTRE_PROV_EXTPROV_ID");

                    b.HasIndex("MasterId")
                        .HasName("LETTER_RECIPIENT_FK_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_LETTER_RECIPIENT");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("LETTER_RECIPI__I_MASTERVERS");

                    b.ToTable("LETTER_RECIPIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Lettertemplatecategory", b =>
                {
                    b.Property<long>("LttcId")
                        .HasColumnName("LTTC_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LttcDeletedid")
                        .HasColumnName("LTTC_DELETEDID");

                    b.Property<string>("LttcName")
                        .IsRequired()
                        .HasColumnName("LTTC_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("LttcParentid")
                        .HasColumnName("LTTC_PARENTID");

                    b.Property<long?>("LttcType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LTTC_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("LttcId");

                    b.HasIndex("LttcParentid")
                        .HasName("LETTERTEMPLCAT_FK_PARENT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_LETTERTEMPLATECATEG");

                    b.ToTable("LETTERTEMPLATECATEGORY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LinkedEmr", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LinkedPtntId")
                        .HasColumnName("LINKED_PTNT_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("LinkedPtntId")
                        .HasName("LINKED_EMR_FK_LINKED_PTNT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("LINKED_EMR_I_OBJ_GUID");

                    b.HasIndex("PtntId")
                        .HasName("LINKED_EMR_FK_PTNT_ID");

                    b.HasIndex("PtntId", "LinkedPtntId")
                        .IsUnique()
                        .HasName("LINKED_EMR_IDX_UQ_LINK");

                    b.ToTable("LINKED_EMR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Links", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("LnkDescription")
                        .HasColumnName("LNK_DESCRIPTION")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long>("LnkDestinationCid")
                        .HasColumnName("LNK_DESTINATION_CID");

                    b.Property<long>("LnkDestinationOid")
                        .HasColumnName("LNK_DESTINATION_OID");

                    b.Property<long>("LnkDestinationPartition")
                        .HasColumnName("LNK_DESTINATION_PARTITION");

                    b.Property<string>("LnkGuid")
                        .IsRequired()
                        .HasColumnName("LNK_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("LnkIsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LNK_IS_DELETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LnkOwnerCid")
                        .HasColumnName("LNK_OWNER_CID");

                    b.Property<long?>("LnkOwnerOid")
                        .HasColumnName("LNK_OWNER_OID");

                    b.Property<long>("LnkOwnerPartition")
                        .HasColumnName("LNK_OWNER_PARTITION");

                    b.HasKey("Oid");

                    b.HasIndex("LnkDestinationPartition")
                        .HasName("FK_LNK_DESTINATION_PARTITION");

                    b.HasIndex("LnkOwnerOid")
                        .HasName("LINKS_I_LNK_OWNER_OID");

                    b.HasIndex("LnkOwnerPartition")
                        .HasName("FK_LNK_OWNER_PARTITION");

                    b.HasIndex("LnkGuid", "LnkOwnerPartition")
                        .IsUnique()
                        .HasName("LINKS_LNK_GUID");

                    b.ToTable("LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Logs", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnName("EVENT_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("EventType")
                        .HasColumnName("EVENT_TYPE");

                    b.Property<string>("Legend")
                        .HasColumnName("LEGEND")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long>("MessageType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MESSAGE_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("Request")
                        .HasColumnName("REQUEST")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("EventDate")
                        .HasName("LOGS_EVENT_DATE_I");

                    b.HasIndex("ObjGuid")
                        .HasName("LOGS_I_OBJ_GUID");

                    b.HasIndex("PatientId")
                        .HasName("FK_LOGS_PATIENT");

                    b.HasIndex("PppuId")
                        .HasName("FK_LOGS_PPPU_ID");

                    b.ToTable("LOGS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Lookuplist", b =>
                {
                    b.Property<long>("LklsId")
                        .HasColumnName("LKLS_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LklsChanged")
                        .HasColumnName("LKLS_CHANGED")
                        .HasColumnType("datetime");

                    b.Property<string>("LklsCode")
                        .IsRequired()
                        .HasColumnName("LKLS_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long>("LklsDeletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LKLS_DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LklsDescription")
                        .HasColumnName("LKLS_DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("LklsTag")
                        .HasColumnName("LKLS_TAG");

                    b.Property<long?>("LklsTag2")
                        .HasColumnName("LKLS_TAG2");

                    b.Property<long>("LklsType")
                        .HasColumnName("LKLS_TYPE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("LklsId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_LOOKUPLIST");

                    b.HasIndex("LklsType", "LklsCode", "LklsDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("LKLS_TYPECODE");

                    b.ToTable("LOOKUPLIST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Macrolog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Macroid")
                        .HasColumnName("MACROID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Pppuid")
                        .HasColumnName("PPPUID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Rundate")
                        .HasColumnName("RUNDATE")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("Macroid")
                        .HasName("FK_SHORTCODEMACROLOG");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MACROLOG");

                    b.HasIndex("Pppuid")
                        .HasName("FK_PPPUMACROLOG");

                    b.ToTable("MACROLOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MacroOnUpdate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ObjectAction")
                        .HasColumnName("OBJECT_ACTION");

                    b.Property<long>("ObjectCid")
                        .HasColumnName("OBJECT_CID");

                    b.Property<long?>("ObjectMacro")
                        .HasColumnName("OBJECT_MACRO");

                    b.Property<long>("OrgStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORG_STRUCTURE_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PostMacro")
                        .HasColumnName("POST_MACRO");

                    b.Property<long?>("PreMacro")
                        .HasColumnName("PRE_MACRO");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MACRO_ON_UPDATE");

                    b.HasIndex("ObjectMacro")
                        .HasName("FK_OBJECT_MACRO");

                    b.HasIndex("OrgStructureId")
                        .HasName("FK_ORG_STRUCTURE_ID");

                    b.HasIndex("PostMacro")
                        .HasName("FK_OBJECT_POST_MACRO");

                    b.HasIndex("PreMacro")
                        .HasName("FK_OBJECT_PRE_MACRO");

                    b.HasIndex("OrgStructureId", "ObjectCid", "ObjectAction")
                        .IsUnique()
                        .HasName("MACRO_ON_UPDATE_UI");

                    b.ToTable("MACRO_ON_UPDATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MaestroAdaptor", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("CAPTION")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("CaptionUpper")
                        .IsRequired()
                        .HasColumnName("CAPTION_UPPER")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateFile")
                        .HasColumnName("DATE_FILE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateInstall")
                        .HasColumnName("DATE_INSTALL")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MainFileName")
                        .IsRequired()
                        .HasColumnName("MAIN_FILE_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnName("VERSION")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("MAESTRO_ADAPTOR_I_OBJ_GUID");

                    b.HasIndex("CaptionUpper", "Deletedid")
                        .IsUnique()
                        .HasName("I_MAESTRO_ADAPTOR_CAPTION_UP");

                    b.ToTable("MAESTRO_ADAPTOR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MaestroAdaptorFile", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Adaptor")
                        .HasColumnName("ADAPTOR");

                    b.Property<DateTime?>("DateFile")
                        .HasColumnName("DATE_FILE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("FileContent")
                        .HasColumnName("FILE_CONTENT")
                        .HasColumnType("image");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("FILE_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("FileNameUpper")
                        .IsRequired()
                        .HasColumnName("FILE_NAME_UPPER")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Adaptor")
                        .HasName("FK_MAESTRO_ADAPT_FILE_ADAPT");

                    b.HasIndex("FileNameUpper")
                        .IsUnique()
                        .HasName("I_MAESTRO_ADAPTOR_FILE_NAME");

                    b.HasIndex("ObjGuid")
                        .HasName("MAESTRO_ADAPTOR_FILE_I_OBJ_GUI");

                    b.ToTable("MAESTRO_ADAPTOR_FILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MaestroAdaptorInstance", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Adaptor")
                        .HasColumnName("ADAPTOR");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("CAPTION")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Notes")
                        .HasColumnName("NOTES")
                        .HasColumnType("image");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Properties")
                        .HasColumnName("PROPERTIES")
                        .HasColumnType("image");

                    b.Property<long?>("QueueIn")
                        .HasColumnName("QUEUE_IN");

                    b.Property<long?>("QueueOut")
                        .HasColumnName("QUEUE_OUT");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ScheduledTaskId")
                        .HasColumnName("SCHEDULED_TASK_ID");

                    b.HasKey("Oid");

                    b.HasIndex("Adaptor")
                        .HasName("FK_MAESTRO_ADAPT_INST_ADAP");

                    b.HasIndex("ObjGuid")
                        .HasName("MAESTRO_ADAPTOR_INSTANCE_I_OBJ");

                    b.HasIndex("QueueIn")
                        .HasName("FK_MAESTRO_ADAPT_INST_Q_IN");

                    b.HasIndex("QueueOut")
                        .HasName("FK_MAESTRO_ADAPT_INST_Q_OUT");

                    b.HasIndex("ScheduledTaskId")
                        .HasName("FK_MAESTRO_ADAPT_INST_TASK");

                    b.ToTable("MAESTRO_ADAPTOR_INSTANCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ManualMatchingLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("MmlCase")
                        .HasColumnName("MML_CASE");

                    b.Property<DateTime>("MmlDate")
                        .HasColumnName("MML_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("MmlPatient")
                        .HasColumnName("MML_PATIENT");

                    b.Property<long?>("MmlProvider")
                        .HasColumnName("MML_PROVIDER");

                    b.Property<long>("MmlTransactionCid")
                        .HasColumnName("MML_TRANSACTION_CID");

                    b.Property<long>("MmlTransactionOid")
                        .HasColumnName("MML_TRANSACTION_OID");

                    b.Property<long>("MmlType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MML_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MmlUser")
                        .HasColumnName("MML_USER");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MmlCase")
                        .HasName("FK_MML_CASE");

                    b.HasIndex("MmlPatient")
                        .HasName("FK_MML_PATIENT");

                    b.HasIndex("MmlProvider")
                        .HasName("FK_MML_PROVIDER");

                    b.HasIndex("MmlTransactionOid")
                        .HasName("FK_MML_TRANSACTION");

                    b.HasIndex("MmlUser")
                        .HasName("FK_MML_USER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MANUAL_MATCHING_LOG");

                    b.ToTable("MANUAL_MATCHING_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Manualtransdetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AICatId")
                        .HasColumnName("A_I_CAT_ID");

                    b.Property<long?>("AIDep")
                        .HasColumnName("A_I_DEP");

                    b.Property<string>("AISword")
                        .HasColumnName("A_I_SWORD")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<long?>("AIType")
                        .HasColumnName("A_I_TYPE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ImgTypeId")
                        .HasColumnName("IMG_TYPE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("TSupp")
                        .HasColumnName("T_SUPP");

                    b.Property<byte[]>("TemplIcon")
                        .HasColumnName("TEMPL_ICON")
                        .HasColumnType("image");

                    b.Property<long?>("TemplOwnerId")
                        .HasColumnName("TEMPL_OWNER_ID");

                    b.Property<long>("TemplType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMPL_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("TransId")
                        .HasColumnName("TRANS_ID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("AIDep")
                        .HasName("FK_A_I_DEP");

                    b.HasIndex("AIType")
                        .HasName("FK_A_I_TYPE");

                    b.HasIndex("Code")
                        .HasName("MANUALTRANSDETAILS_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("MANUALTRANSDET_KF_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("MANUALTRANSDET_KF_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MANUALTRANSDETAILS");

                    b.HasIndex("TSupp")
                        .HasName("FK_T_SUPP");

                    b.HasIndex("TemplOwnerId")
                        .HasName("FK_TEMPL_OWNER_ID");

                    b.HasIndex("TransId")
                        .HasName("M_TRANSDET_CDO_TRANS_FK");

                    b.ToTable("MANUALTRANSDETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Maxids", b =>
                {
                    b.Property<string>("Tablename")
                        .HasColumnName("TABLENAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long>("Maxid")
                        .HasColumnName("MAXID");

                    b.HasKey("Tablename");

                    b.ToTable("MAXIDS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.McedtLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("ActionDetail")
                        .HasColumnName("ACTION_DETAIL")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("ActionResult")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ACTION_RESULT")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("EndUserId")
                        .HasColumnName("END_USER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ReceivedOn")
                        .HasColumnName("RECEIVED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RequestAuditId")
                        .HasColumnName("REQUEST_AUDIT_ID")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RequestedOn")
                        .HasColumnName("REQUESTED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("ResponseAuditId")
                        .HasColumnName("RESPONSE_AUDIT_ID")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("ResponseCode")
                        .HasColumnName("RESPONSE_CODE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<byte[]>("ResponseMessage")
                        .HasColumnName("RESPONSE_MESSAGE")
                        .HasColumnType("image");

                    b.Property<long?>("ServiceProviderId")
                        .HasColumnName("SERVICE_PROVIDER_ID");

                    b.HasKey("Oid");

                    b.HasIndex("EndUserId")
                        .HasName("FK_MCEDTLOG_ENDPPPU");

                    b.HasIndex("ObjGuid")
                        .HasName("MCEDT_LOG_I_OBJ_GUID");

                    b.HasIndex("ServiceProviderId")
                        .HasName("FK_MCEDTLOG_SRVCPPPU");

                    b.ToTable("MCEDT_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MdcareDocument", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("image");

                    b.Property<long?>("DocCategoryId")
                        .HasColumnName("DOC_CATEGORY_ID");

                    b.Property<DateTime>("DocDate")
                        .HasColumnName("DOC_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("DocType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DOC_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<short>("Rcvd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCVD")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SignedProvId")
                        .HasColumnName("SIGNED_PROV_ID");

                    b.Property<long>("StatusId")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("Subject")
                        .HasColumnName("SUBJECT")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DocCategoryId")
                        .HasName("MDCARE_DOC_CATEGORY_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MDCARE_DOCUMENT");

                    b.HasIndex("PatientId")
                        .HasName("FK_MDC_PATIENTID");

                    b.HasIndex("PosId")
                        .HasName("FK_MDC_POSID");

                    b.HasIndex("ProviderId")
                        .HasName("FK_MDC_PROVID");

                    b.HasIndex("SignedProvId")
                        .HasName("FK_MDC_SIGNEDPROVID");

                    b.ToTable("MDCARE_DOCUMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MedicalCertificate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CertificateType")
                        .HasColumnName("CERTIFICATE_TYPE");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Duties")
                        .HasColumnName("DUTIES");

                    b.Property<long?>("ExtensionOf")
                        .HasColumnName("EXTENSION_OF");

                    b.Property<DateTime?>("InitialDate")
                        .HasColumnName("INITIAL_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatId")
                        .HasColumnName("PAT_ID");

                    b.Property<long?>("Pos")
                        .HasColumnName("POS");

                    b.Property<long?>("Provider")
                        .HasColumnName("PROVIDER");

                    b.Property<byte[]>("Reason")
                        .HasColumnName("REASON")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReportedToMe")
                        .HasColumnName("REPORTED_TO_ME")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnName("RETURN_DATE")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("ExtensionOf")
                        .HasName("MEDCER_FK_EXTENSION_OF");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MEDICAL_CERTIFICATE");

                    b.HasIndex("PatId")
                        .HasName("MEDCER_FK_PAT_ID");

                    b.HasIndex("Pos")
                        .HasName("MEDCER_FK_POS");

                    b.HasIndex("Provider")
                        .HasName("MEDCER_FK_PROVIDER");

                    b.ToTable("MEDICAL_CERTIFICATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalEvents", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("MeCaseId")
                        .HasColumnName("ME_CASE_ID");

                    b.Property<long?>("MeClientState")
                        .HasColumnName("ME_CLIENT_STATE");

                    b.Property<string>("MeComment")
                        .HasColumnName("ME_COMMENT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("MeCreatedBy")
                        .HasColumnName("ME_CREATED_BY");

                    b.Property<DateTime>("MeCreatedOn")
                        .HasColumnName("ME_CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("MeEventName")
                        .IsRequired()
                        .HasColumnName("ME_EVENT_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("MeEventType")
                        .HasColumnName("ME_EVENT_TYPE");

                    b.Property<string>("MeLegalStatus")
                        .HasColumnName("ME_LEGAL_STATUS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("MeLocationId")
                        .HasColumnName("ME_LOCATION_ID");

                    b.Property<short>("MeLocationIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ME_LOCATION_IN")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("MeLocationOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ME_LOCATION_OUT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MeModifiedBy")
                        .HasColumnName("ME_MODIFIED_BY");

                    b.Property<DateTime>("MeModifiedOn")
                        .HasColumnName("ME_MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("MePatientId")
                        .HasColumnName("ME_PATIENT_ID");

                    b.Property<long?>("MePrivacyOid")
                        .HasColumnName("ME_PRIVACY_OID");

                    b.Property<DateTime>("MeReferenceDate")
                        .HasColumnName("ME_REFERENCE_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("MeReportDate")
                        .HasColumnName("ME_REPORT_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("MeTextlog")
                        .HasColumnName("ME_TEXTLOG")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MeCaseId")
                        .HasName("FK_ME_CASE_ID");

                    b.HasIndex("MeClientState")
                        .HasName("FK_ME_CLIENT_STATE");

                    b.HasIndex("MeCreatedBy")
                        .HasName("FK_ME_CREATED_BY");

                    b.HasIndex("MeEventType")
                        .HasName("FK_ME_EVENT_TYPE");

                    b.HasIndex("MeLocationId")
                        .HasName("FK_ME_LOCATION_ID");

                    b.HasIndex("MeModifiedBy")
                        .HasName("FK_ME_MODIFIED_BY");

                    b.HasIndex("MePatientId")
                        .HasName("FK_ME_PATIENT_ID");

                    b.HasIndex("MePrivacyOid")
                        .HasName("FK_ME_PRIVACY_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MENTAL_EVENTS");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("MENTAL_EVENTS_FK_PPPU");

                    b.ToTable("MENTAL_EVENTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalEventsReviews", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MerCarePlanId")
                        .HasColumnName("MER_CARE_PLAN_ID");

                    b.Property<short>("MerIsOffset")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MER_IS_OFFSET")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MerOffsetAmount")
                        .HasColumnName("MER_OFFSET_AMOUNT");

                    b.Property<long>("MerOffsetType")
                        .HasColumnName("MER_OFFSET_TYPE");

                    b.Property<long?>("MerPosId")
                        .HasColumnName("MER_POS_ID");

                    b.Property<long?>("MerProviderId")
                        .HasColumnName("MER_PROVIDER_ID");

                    b.Property<long>("MerProviderType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MER_PROVIDER_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MerReason")
                        .HasColumnName("MER_REASON")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("MerReasonId")
                        .HasColumnName("MER_REASON_ID");

                    b.Property<long>("MerRepeatFrequency")
                        .HasColumnName("MER_REPEAT_FREQUENCY");

                    b.Property<long>("MerRepeatUnit")
                        .HasColumnName("MER_REPEAT_UNIT");

                    b.Property<long>("MerRepeatUntil")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MER_REPEAT_UNTIL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MerRepeatUntilUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MER_REPEAT_UNTIL_UNIT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MerTemplateId")
                        .HasColumnName("MER_TEMPLATE_ID");

                    b.Property<long?>("MerTypeId")
                        .HasColumnName("MER_TYPE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MerCarePlanId")
                        .HasName("MVR_FK_CARE_PLAN");

                    b.HasIndex("MerPosId")
                        .HasName("FK_MER_POS_ID");

                    b.HasIndex("MerProviderId")
                        .HasName("FK_MER_PROVIDER_ID");

                    b.HasIndex("MerReasonId")
                        .HasName("FK_MER_REASON_ID");

                    b.HasIndex("MerTemplateId")
                        .HasName("FK_MER_TEMPLATE_ID");

                    b.HasIndex("MerTypeId")
                        .HasName("FK_MER_TYPE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MENTAL_EVENTS_REVIE");

                    b.ToTable("MENTAL_EVENTS_REVIEWS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalEventsTemplates", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("MetAddReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MET_ADD_REVIEW")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("MetChangeLegalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MET_CHANGE_LEGAL_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("MetChangeLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MET_CHANGE_LOCATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("MetChangePatientState")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MET_CHANGE_PATIENT_STATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("MetClearReviews")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MET_CLEAR_REVIEWS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MetEventName")
                        .IsRequired()
                        .HasColumnName("MET_EVENT_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("MetEventType")
                        .HasColumnName("MET_EVENT_TYPE");

                    b.Property<long?>("MetLegalStatusType")
                        .HasColumnName("MET_LEGAL_STATUS_TYPE");

                    b.Property<long?>("MetLocationId")
                        .HasColumnName("MET_LOCATION_ID");

                    b.Property<short>("MetLocationIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MET_LOCATION_IN")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("MetLocationOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MET_LOCATION_OUT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MetMacro")
                        .HasColumnName("MET_MACRO")
                        .HasMaxLength(4096)
                        .IsUnicode(false);

                    b.Property<long?>("MetNextTemplate")
                        .HasColumnName("MET_NEXT_TEMPLATE");

                    b.Property<long?>("MetPatientState")
                        .HasColumnName("MET_PATIENT_STATE");

                    b.Property<long?>("MetRegisterEffect")
                        .HasColumnName("MET_REGISTER_EFFECT");

                    b.Property<long?>("MetReportType")
                        .HasColumnName("MET_REPORT_TYPE");

                    b.Property<long>("MetReviewDays")
                        .HasColumnName("MET_REVIEW_DAYS");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MetEventType")
                        .HasName("FK_MET_EVENT_TYPE");

                    b.HasIndex("MetLocationId")
                        .HasName("FK_MET_LOCATION_ID");

                    b.HasIndex("MetNextTemplate")
                        .HasName("FK_MET_NEXT_TEMPLATE");

                    b.HasIndex("MetPatientState")
                        .HasName("FK_MET_PATIENT_STATE");

                    b.HasIndex("MetReportType")
                        .HasName("FK_MET_REPORT_TYPE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MENTAL_EVENTS_TEMPL");

                    b.ToTable("MENTAL_EVENTS_TEMPLATES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalTemplatesCategories", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("MtcCategoryId")
                        .HasColumnName("MTC_CATEGORY_ID");

                    b.Property<long>("MtcTemplateId")
                        .HasColumnName("MTC_TEMPLATE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MtcCategoryId")
                        .HasName("FK_MTC_CATEGORY_ID");

                    b.HasIndex("MtcTemplateId")
                        .HasName("FK_MTC_TEMPLATE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MENTAL_TEMPLATES_CA");

                    b.ToTable("MENTAL_TEMPLATES_CATEGORIES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalTemplatesStates", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("MtsStateId")
                        .HasColumnName("MTS_STATE_ID");

                    b.Property<long>("MtsTemplateId")
                        .HasColumnName("MTS_TEMPLATE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MtsStateId")
                        .HasName("FK_MTS_STATE_ID");

                    b.HasIndex("MtsTemplateId")
                        .HasName("FK_MTS_TEMPLATE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MENTAL_TEMPLATES_ST");

                    b.ToTable("MENTAL_TEMPLATES_STATES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MergedCareobject", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SourceOid")
                        .HasColumnName("SOURCE_OID");

                    b.Property<long>("TargetOid")
                        .HasColumnName("TARGET_OID");

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("FK_MERGED_COBJ_CASE_ID");

                    b.HasIndex("CreatedBy")
                        .HasName("FK_MERGED_COBJ_CREATED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MERGED_CAREOBJECT");

                    b.HasIndex("PatientId")
                        .HasName("FK_MERGED_COBJ_PTNT_ID");

                    b.ToTable("MERGED_CAREOBJECT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageAck", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("KeyObjCid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KEY_OBJ_CID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("KeyObjOid")
                        .HasColumnName("KEY_OBJ_OID");

                    b.Property<byte[]>("MackData")
                        .HasColumnName("MACK_DATA")
                        .HasColumnType("image");

                    b.Property<long?>("MackEmessId")
                        .HasColumnName("MACK_EMESS_ID");

                    b.Property<long?>("MackExtOrg")
                        .HasColumnName("MACK_EXT_ORG");

                    b.Property<string>("MackInputId")
                        .HasColumnName("MACK_INPUT_ID")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MackSrcGuid")
                        .HasColumnName("MACK_SRC_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("MackType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MACK_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MackEmessId")
                        .HasName("FK_MESSAGE_ACK_EMESS_ID");

                    b.HasIndex("MackExtOrg")
                        .HasName("FK_MESSAGE_ACK_EXT_ORG");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MESSAGE_ACK");

                    b.ToTable("MESSAGE_ACK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageAttempt", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("AckReceivedOn")
                        .HasColumnName("ACK_RECEIVED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("AckResponse")
                        .HasColumnName("ACK_RESPONSE")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MessageWhoId")
                        .HasColumnName("MESSAGE_WHO_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Status")
                        .HasColumnName("STATUS");

                    b.Property<DateTime?>("WasMadeOn")
                        .HasColumnName("WAS_MADE_ON")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("MessageWhoId")
                        .HasName("MESSAGE_ATTEMPT_FK_MESSAGE_W");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MESSAGE_ATTEMPT");

                    b.ToTable("MESSAGE_ATTEMPT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LogText")
                        .HasColumnName("LOG_TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("LogType")
                        .HasColumnName("LOG_TYPE");

                    b.Property<DateTime>("LoggedOn")
                        .HasColumnName("LOGGED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("MessageId")
                        .HasColumnName("MESSAGE_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ReTextId")
                        .HasColumnName("RE_TEXT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MessageId")
                        .HasName("FK_MESSAGE_LOG_MESSAGEID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MESSAGE_LOG");

                    b.HasIndex("ReTextId")
                        .HasName("FK_MESSAGE_LOG_RETEXT");

                    b.ToTable("MESSAGE_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageResponse", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("AttemptId")
                        .HasColumnName("ATTEMPT_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("ResponseText")
                        .HasColumnName("RESPONSE_TEXT")
                        .HasColumnType("image");

                    b.Property<long>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Oid");

                    b.HasIndex("AttemptId")
                        .HasName("FK_MSG_RESPONSE_ATTEMPT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MESSAGE_RESPONSE");

                    b.ToTable("MESSAGE_RESPONSE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Messages", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AttemptToSend")
                        .HasColumnName("ATTEMPT_TO_SEND");

                    b.Property<short>("BeenSentToDest")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BEEN_SENT_TO_DEST")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("BodyCid")
                        .HasColumnName("BODY_CID");

                    b.Property<long?>("BodyOid")
                        .HasColumnName("BODY_OID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("DestId")
                        .HasColumnName("DEST_ID");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnName("DESTINATION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<long?>("DocCategoryId")
                        .HasColumnName("DOC_CATEGORY_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Emailformat")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMAILFORMAT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("HideSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HIDE_SENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_EMAIL")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_VISIBLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MsgShortText")
                        .HasColumnName("MSG_SHORT_TEXT")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("NextTimeToSend")
                        .HasColumnName("NEXT_TIME_TO_SEND")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<long?>("RawDestinationId")
                        .HasColumnName("RAW_DESTINATION_ID");

                    b.Property<DateTime?>("Received")
                        .HasColumnName("RECEIVED")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("Seen")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SEEN")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Sender")
                        .HasColumnName("SENDER")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<long?>("SenderId")
                        .HasColumnName("SENDER_ID");

                    b.Property<DateTime>("Sent")
                        .HasColumnName("SENT")
                        .HasColumnType("datetime");

                    b.Property<long?>("SourceMsgId")
                        .HasColumnName("SOURCE_MSG_ID");

                    b.Property<short>("Stored")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STORED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("TypeId")
                        .HasColumnName("TYPE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("BeenSentToDest")
                        .HasName("MESSAGES_BEEN_SENT_TO_DEST");

                    b.HasIndex("BodyOid")
                        .HasName("MESSAGES_FK_BODY");

                    b.HasIndex("CaseId")
                        .HasName("FK_MESSAGES_CASE_ID");

                    b.HasIndex("DestId")
                        .HasName("FK_MESSAGES_DEST_ID");

                    b.HasIndex("Destination")
                        .HasName("MESSAGES_DESTINATION");

                    b.HasIndex("DocCategoryId")
                        .HasName("MESSAGES_DOC_CATEGORY_FK");

                    b.HasIndex("NextTimeToSend")
                        .HasName("MESSAGES_NEXT_TIME_TO_SEND");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MESSAGES");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_MESSAGES_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("MESSAGES_FK_PPPU");

                    b.HasIndex("PtntId")
                        .HasName("MESSAGES_FK_PTNT_ID");

                    b.HasIndex("RawDestinationId")
                        .HasName("FK_MESSAGE_RAWDESTINATION");

                    b.HasIndex("Received")
                        .HasName("MESSAGES_RECEIVED");

                    b.HasIndex("Sender")
                        .HasName("MESSAGES_SENDER");

                    b.HasIndex("SenderId")
                        .HasName("FK_MESSAGES_SENDER_ID");

                    b.HasIndex("Sent")
                        .HasName("MESSAGES_SENT");

                    b.HasIndex("DestId", "BeenSentToDest")
                        .HasName("MESSAGES_DEST_SENT");

                    b.ToTable("MESSAGES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageWhat", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("EmessId")
                        .HasColumnName("EMESS_ID");

                    b.Property<long>("KeyObjCid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KEY_OBJ_CID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("KeyObjOid")
                        .HasColumnName("KEY_OBJ_OID");

                    b.Property<string>("KeyObjRef")
                        .HasColumnName("KEY_OBJ_REF")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<byte[]>("MsgContext")
                        .HasColumnName("MSG_CONTEXT")
                        .HasColumnType("image");

                    b.Property<long?>("MsgDeliveryService")
                        .HasColumnName("MSG_DELIVERY_SERVICE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Oid");

                    b.HasIndex("EmessId")
                        .HasName("EMESS_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MESSAGE_WHAT");

                    b.ToTable("MESSAGE_WHAT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageWho", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MessageWhatId")
                        .HasColumnName("MESSAGE_WHAT_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RecipientId")
                        .HasColumnName("RECIPIENT_ID");

                    b.Property<string>("RecipientRef")
                        .HasColumnName("RECIPIENT_REF")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Oid");

                    b.HasIndex("MessageWhatId")
                        .HasName("MESSAGE_WHO_FK_MESSAGE_WHAT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MESSAGE_WHO");

                    b.HasIndex("RecipientId")
                        .HasName("MESSAGE_WHO_FK_RECIPIENT");

                    b.ToTable("MESSAGE_WHO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MhpLetters", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("DATE_TIME")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("QueueItemId")
                        .HasColumnName("QUEUE_ITEM_ID");

                    b.Property<long>("ReceivingPartitionId")
                        .HasColumnName("RECEIVING_PARTITION_ID");

                    b.Property<long>("ReceivingProviderId")
                        .HasColumnName("RECEIVING_PROVIDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SendingProviderId")
                        .HasColumnName("SENDING_PROVIDER_ID");

                    b.Property<long>("Status")
                        .HasColumnName("STATUS");

                    b.Property<byte[]>("Text")
                        .IsRequired()
                        .HasColumnName("TEXT")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("PatientId")
                        .HasName("FK_MHP_LETTERS_PATIENT_ID");

                    b.HasIndex("ReceivingProviderId")
                        .HasName("FK_MHP_LETTERS_RCV_PROV_ID");

                    b.HasIndex("SendingProviderId")
                        .HasName("FK_MHP_LETTERS_SND_PROV_ID");

                    b.ToTable("MHP_LETTERS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MobileDevices", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AssetTag")
                        .IsRequired()
                        .HasColumnName("ASSET_TAG")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("AssignDt")
                        .HasColumnName("ASSIGN_DT")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<long>("DeviceKind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DEVICE_KIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastVisitDt")
                        .HasColumnName("LAST_VISIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasColumnName("PERSON")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SerialNum")
                        .IsRequired()
                        .HasColumnName("SERIAL_NUM")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.ToTable("MOBILE_DEVICES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Movements", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("MovDate")
                        .HasColumnName("MOV_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("MovDescription")
                        .HasColumnName("MOV_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<float?>("MovLengthofstay")
                        .HasColumnName("MOV_LENGTHOFSTAY");

                    b.Property<long?>("MovLocationFromId")
                        .HasColumnName("MOV_LOCATION_FROM_ID");

                    b.Property<long?>("MovLocationId")
                        .HasColumnName("MOV_LOCATION_ID");

                    b.Property<long?>("MovPosId")
                        .HasColumnName("MOV_POS_ID");

                    b.Property<string>("MovType")
                        .HasColumnName("MOV_TYPE")
                        .HasColumnType("char(1)");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("FK_CASE_ID");

                    b.HasIndex("MovLocationFromId")
                        .HasName("FK_MOVEMENTS_LOCATION_FROM");

                    b.HasIndex("MovLocationId")
                        .HasName("FK_MOVEMENTS_LOCATION");

                    b.HasIndex("MovPosId")
                        .HasName("FK_MOVEMENTS_POS");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MOVEMENTS");

                    b.HasIndex("ProviderId")
                        .HasName("MOVEMENTS_FK_PROVIDER_ID");

                    b.ToTable("MOVEMENTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MovementsAudit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("CreatedDatetime")
                        .HasColumnName("CREATED_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatedbyId")
                        .HasColumnName("CREATEDBY_ID");

                    b.Property<long?>("Destinationposid")
                        .HasColumnName("DESTINATIONPOSID");

                    b.Property<long?>("Destinationsupplierid")
                        .HasColumnName("DESTINATIONSUPPLIERID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnName("MOVEMENT_DATE")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Movementamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOVEMENTAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("Note")
                        .HasColumnName("NOTE")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Serviceid")
                        .HasColumnName("SERVICEID");

                    b.Property<long?>("Sourceposid")
                        .HasColumnName("SOURCEPOSID");

                    b.Property<long?>("Sourcesupplierid")
                        .HasColumnName("SOURCESUPPLIERID");

                    b.HasKey("Oid");

                    b.HasIndex("CreatedbyId")
                        .HasName("MOVEMENTS_AUDIT_FK_CREATEDBY");

                    b.HasIndex("Destinationposid")
                        .HasName("MOVEMENTS_AUDIT_FK_DESTINATI");

                    b.HasIndex("Destinationsupplierid")
                        .HasName("MOVAUDIT_FK_DESTSUPPLID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MOVEMENTS_AUDIT");

                    b.HasIndex("Serviceid")
                        .HasName("MOVEMENTS_AUDIT_FK_SERVICEID");

                    b.HasIndex("Sourceposid")
                        .HasName("MOVEMENTS_AUDIT_FK_SOURCEPOS");

                    b.HasIndex("Sourcesupplierid")
                        .HasName("MOVEMENTS_AUDIT_FK_SOURCESUP");

                    b.ToTable("MOVEMENTS_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Mpi", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long>("DominanceRule")
                        .HasColumnName("DOMINANCE_RULE");

                    b.Property<long>("DominantPatient")
                        .HasColumnName("DOMINANT_PATIENT");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EnrolledProvider")
                        .HasColumnName("ENROLLED_PROVIDER");

                    b.Property<long>("EnrolmentStatus")
                        .HasColumnName("ENROLMENT_STATUS");

                    b.Property<long>("MasterId")
                        .HasColumnName("MASTER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Patienttype")
                        .HasColumnName("PATIENTTYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("MasterId")
                        .HasName("MPI_FK_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MPI");

                    b.ToTable("MPI");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MpiPracticePatients", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .HasColumnName("MASTER_ID");

                    b.Property<long>("MpiOid")
                        .HasColumnName("MPI_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PracticePatient")
                        .HasColumnName("PRACTICE_PATIENT");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("MasterId")
                        .HasName("MPIPP_FK_MASTER");

                    b.HasIndex("MpiOid")
                        .HasName("MPIPP_FK_MPI");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MPI_PRACTICE_PATIEN");

                    b.HasIndex("PracticePatient")
                        .HasName("MPIPP_FK_PATIENT");

                    b.ToTable("MPI_PRACTICE_PATIENTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MpiRules", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Hardwired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HARDWIRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ManualPatient")
                        .HasColumnName("MANUAL_PATIENT");

                    b.Property<long>("MasterId")
                        .HasColumnName("MASTER_ID");

                    b.Property<long>("MpiRule")
                        .HasColumnName("MPI_RULE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PracticePatient")
                        .HasColumnName("PRACTICE_PATIENT");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("MPI_RULES_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("MPI_RULES_FK_DELETEDBY");

                    b.HasIndex("ManualPatient")
                        .HasName("MPI_RULES_FK_MANUAL");

                    b.HasIndex("MasterId")
                        .HasName("MPI_RULES_FK_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MPI_RULES");

                    b.HasIndex("PracticePatient")
                        .HasName("MPI_RULES_FK_PATIENT");

                    b.ToTable("MPI_RULES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Mpl", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("MplDominantExtPrvId")
                        .HasColumnName("MPL_DOMINANT_EXT_PRV_ID");

                    b.Property<long?>("MplDominantPracPrvId")
                        .HasColumnName("MPL_DOMINANT_PRAC_PRV_ID");

                    b.Property<long>("MplDominantPrvId")
                        .HasColumnName("MPL_DOMINANT_PRV_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MplDominantExtPrvId")
                        .HasName("MPL_FK_3");

                    b.HasIndex("MplDominantPracPrvId")
                        .HasName("MPL_FK_2");

                    b.HasIndex("MplDominantPrvId")
                        .HasName("MPL_FK_1");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MPL");

                    b.ToTable("MPL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MplLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MplOid")
                        .HasColumnName("MPL_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("MplOid")
                        .HasName("MPL_LINK_FK_1");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MPL_LINK");

                    b.HasIndex("PppuId")
                        .HasName("MPL_LINK_FK_2");

                    b.HasIndex("PppuId", "Deletedid")
                        .IsUnique()
                        .HasName("MPL_LINK_UQ");

                    b.ToTable("MPL_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MsgAttach", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("BodyCid")
                        .HasColumnName("BODY_CID");

                    b.Property<long?>("BodyOid")
                        .HasColumnName("BODY_OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long?>("FileSize")
                        .HasColumnName("FILE_SIZE");

                    b.Property<long?>("MsgBodyCid")
                        .HasColumnName("MSG_BODY_CID");

                    b.Property<long?>("MsgBodyOid")
                        .HasColumnName("MSG_BODY_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OrderInAttachs")
                        .HasColumnName("ORDER_IN_ATTACHS");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("BodyOid")
                        .HasName("MSG_ATTACH_FK_BODY2");

                    b.HasIndex("MsgBodyOid")
                        .HasName("MSG_ATTACH_FK_BODY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MSG_ATTACH");

                    b.ToTable("MSG_ATTACH");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MsoDetail", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Logoid")
                        .HasColumnName("LOGOID");

                    b.Property<string>("MsoId")
                        .HasColumnName("MSO_ID")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<long?>("Notesid")
                        .HasColumnName("NOTESID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Logoid")
                        .HasName("FK_MSOD_LOGO_BLOBS");

                    b.HasIndex("Notesid")
                        .HasName("FK_MSOD_NOTES_BLOBS");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MSO_DETAIL");

                    b.ToTable("MSO_DETAIL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MsoEntityids", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("Changed")
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EntityValue")
                        .HasColumnName("ENTITY_VALUE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Identifier")
                        .HasColumnName("IDENTIFIER")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("Master")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasColumnName("SOURCE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MSO_ENTITYIDS");

                    b.ToTable("MSO_ENTITYIDS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MsoRegistry", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("Changed")
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Ispassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISPASSWORD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("KeyId")
                        .HasColumnName("KEY_ID");

                    b.Property<string>("KeyValue")
                        .HasColumnName("KEY_VALUE")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("KeyId")
                        .HasName("FK_MSOREGISTRY_SHORTCODE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_MSO_REGISTRY");

                    b.ToTable("MSO_REGISTRY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.NbOutgoing", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("NboBatchId")
                        .HasColumnName("NBO_BATCH_ID");

                    b.Property<string>("NboBody")
                        .HasColumnName("NBO_BODY")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long?>("NboClaimId")
                        .HasColumnName("NBO_CLAIM_ID");

                    b.Property<DateTime?>("NboCreated")
                        .HasColumnName("NBO_CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("NboInvoiceId")
                        .HasColumnName("NBO_INVOICE_ID");

                    b.Property<long?>("NboPaymentId")
                        .HasColumnName("NBO_PAYMENT_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("NboBatchId")
                        .HasName("NB_OUTGOING_FK_BATCH_ID");

                    b.HasIndex("NboClaimId")
                        .HasName("NB_OUTGOING_FK_CLAIM_ID");

                    b.HasIndex("NboInvoiceId")
                        .HasName("NB_OUTGOING_FK_INVOICE_ID");

                    b.HasIndex("NboPaymentId")
                        .HasName("NB_OUTGOING_FK_PAYMENT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("NB_OUTGOING_I_OBJ_GUID");

                    b.ToTable("NB_OUTGOING");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.NbOutgoingBatch", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NbbBody")
                        .HasColumnName("NBB_BODY")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("NbbCreated")
                        .HasColumnName("NBB_CREATED")
                        .HasColumnType("datetime");

                    b.Property<string>("NbbFileId")
                        .HasColumnName("NBB_FILE_ID")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("NbbFileId")
                        .HasName("NB_OUTGOING_BATCH_I_FILE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("NB_OUTGOING_BATCH_I_OBJ_GUID");

                    b.ToTable("NB_OUTGOING_BATCH");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Nextofkin", b =>
                {
                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("LklsIdNxokrelation")
                        .HasColumnName("LKLS_ID_NXOKRELATION");

                    b.Property<string>("NxokAddr1")
                        .HasColumnName("NXOK_ADDR1")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("NxokAddr2")
                        .HasColumnName("NXOK_ADDR2")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("NxokAddr3")
                        .HasColumnName("NXOK_ADDR3")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("NxokAddrCountry")
                        .HasColumnName("NXOK_ADDR_COUNTRY");

                    b.Property<string>("NxokAddrcode")
                        .HasColumnName("NXOK_ADDRCODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("NxokAddrstate")
                        .HasColumnName("NXOK_ADDRSTATE");

                    b.Property<string>("NxokBuilding")
                        .HasColumnName("NXOK_BUILDING")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NxokGivenname")
                        .HasColumnName("NXOK_GIVENNAME")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("NxokName")
                        .HasColumnName("NXOK_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("NxokOtherphone")
                        .HasColumnName("NXOK_OTHERPHONE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("NxokPhone")
                        .HasColumnName("NXOK_PHONE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("NxokTitle")
                        .HasColumnName("NXOK_TITLE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntIdNxok")
                        .HasColumnName("PTNT_ID_NXOK");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("PtntId");

                    b.HasIndex("LklsIdNxokrelation")
                        .HasName("NEXTOFKIN_FK_RELATION");

                    b.HasIndex("NxokAddrstate")
                        .HasName("NEXTOFKIN_FK_NXOK_ADDRSTATE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_NEXTOFKIN");

                    b.HasIndex("PtntId")
                        .IsUnique()
                        .HasName("FOREIGN_PTNT_ID");

                    b.HasIndex("PtntIdNxok")
                        .HasName("FOREIGN_PTNT_ID_NXOK");

                    b.ToTable("NEXTOFKIN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.NirDeliveryAttempt", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("NmParentMsgId")
                        .HasColumnName("NM_PARENT_MSG_ID");

                    b.Property<DateTime>("NmWasMadeOn")
                        .HasColumnName("NM_WAS_MADE_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("NmParentMsgId")
                        .HasName("NIR_DELIVERY_ATTEMPT_FK_NIR");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_NIR_DELIVERY_ATTEMP");

                    b.ToTable("NIR_DELIVERY_ATTEMPT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.NirMessage", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NmControlId")
                        .IsRequired()
                        .HasColumnName("NM_CONTROL_ID")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long>("NmDeliveryStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NM_DELIVERY_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NmMessageType")
                        .IsRequired()
                        .HasColumnName("NM_MESSAGE_TYPE")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("NmMsgDatetime")
                        .HasColumnName("NM_MSG_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("NmParentMsgId")
                        .HasColumnName("NM_PARENT_MSG_ID");

                    b.Property<long?>("NmProcessedStatus")
                        .HasColumnName("NM_PROCESSED_STATUS");

                    b.Property<long?>("NmProviderId")
                        .HasColumnName("NM_PROVIDER_ID");

                    b.Property<long?>("NmPtntId")
                        .HasColumnName("NM_PTNT_ID");

                    b.Property<byte[]>("NmRawData")
                        .HasColumnName("NM_RAW_DATA")
                        .HasColumnType("image");

                    b.Property<long?>("NmRecallActionId")
                        .HasColumnName("NM_RECALL_ACTION_ID");

                    b.Property<long?>("NmRecallPlanId")
                        .HasColumnName("NM_RECALL_PLAN_ID");

                    b.Property<long?>("NmRecallVisitId")
                        .HasColumnName("NM_RECALL_VISIT_ID");

                    b.Property<DateTime?>("NmReceived")
                        .HasColumnName("NM_RECEIVED")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("NmParentMsgId")
                        .HasName("FK_NIR_MSG_NM_PARENT_MSG_ID");

                    b.HasIndex("NmProviderId")
                        .HasName("FK_NIR_MSG_NM_PROVIDER_ID");

                    b.HasIndex("NmPtntId")
                        .HasName("FK_NIR_MSG_NM_PTNT_ID");

                    b.HasIndex("NmRecallActionId")
                        .HasName("FK_NM_RECALL_ACTION_ID");

                    b.HasIndex("NmRecallPlanId")
                        .HasName("FK_NM_RECALL_PLAN_ID");

                    b.HasIndex("NmRecallVisitId")
                        .HasName("FK_NM_RECALL_VISIT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_NIR_MESSAGE");

                    b.ToTable("NIR_MESSAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.NirTask", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PracId")
                        .HasColumnName("PRAC_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("TaskHfc")
                        .IsRequired()
                        .HasColumnName("TASK_HFC")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnName("TASK_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_NIR_TASK");

                    b.HasIndex("PracId")
                        .IsUnique()
                        .HasName("NIR_TASK_PRAC_ID_UQ");

                    b.ToTable("NIR_TASK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OfflineChanges", b =>
                {
                    b.Property<string>("TableName")
                        .HasColumnName("TABLE_NAME")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<long>("RowId")
                        .HasColumnName("ROW_ID");

                    b.Property<long?>("Updatekind")
                        .HasColumnName("UPDATEKIND");

                    b.HasKey("TableName", "RowId");

                    b.ToTable("OFFLINE_CHANGES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OfflineSession", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Computername")
                        .IsRequired()
                        .HasColumnName("COMPUTERNAME")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Ended")
                        .HasColumnName("ENDED")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Oid");

                    b.HasIndex("Deletedby")
                        .HasName("OFFLINE_SESSION_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_OFFLINE_SESSION");

                    b.HasIndex("PosId")
                        .HasName("FK_OFFLINE_SESSION_POS");

                    b.HasIndex("PppuId")
                        .HasName("OFFLINE_SESSION_FK_PPPU_ID");

                    b.ToTable("OFFLINE_SESSION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OneRec", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.HasKey("Oid");

                    b.ToTable("ONE_REC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OntarioCdsData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("CdsData")
                        .HasColumnName("CDS_DATA")
                        .HasColumnType("image");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ObjectCid")
                        .HasColumnName("OBJECT_CID");

                    b.Property<string>("ObjectGuid")
                        .IsRequired()
                        .HasColumnName("OBJECT_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("ONTARIO_CDS_DATA_I_OBJ_GUID");

                    b.HasIndex("ObjectGuid")
                        .IsUnique()
                        .HasName("ONTARIO_CDS_DATA_OBJ_GUID");

                    b.ToTable("ONTARIO_CDS_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OntarioMessages", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OmAccNumber")
                        .HasColumnName("OM_ACC_NUMBER");

                    b.Property<string>("OmBody")
                        .HasColumnName("OM_BODY")
                        .HasMaxLength(132)
                        .IsUnicode(false);

                    b.Property<string>("OmClaimNumber")
                        .HasColumnName("OM_CLAIM_NUMBER")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("OmFileId")
                        .HasColumnName("OM_FILE_ID")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<long?>("OmParentId")
                        .HasColumnName("OM_PARENT_ID");

                    b.Property<string>("OmPayeeName")
                        .HasColumnName("OM_PAYEE_NAME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("OmPayeeNum")
                        .HasColumnName("OM_PAYEE_NUM")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<DateTime?>("OmPaymentDate")
                        .HasColumnName("OM_PAYMENT_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("OmPaymentId")
                        .HasColumnName("OM_PAYMENT_ID");

                    b.Property<string>("OmPeriod")
                        .HasColumnName("OM_PERIOD")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("OmPractitionerId")
                        .HasColumnName("OM_PRACTITIONER_ID")
                        .HasMaxLength(14)
                        .IsUnicode(false);

                    b.Property<long?>("OmProcessedType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OM_PROCESSED_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("OmReceived")
                        .HasColumnName("OM_RECEIVED")
                        .HasColumnType("datetime");

                    b.Property<string>("OmRecordType")
                        .HasColumnName("OM_RECORD_TYPE")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<long?>("OmServiceType")
                        .HasColumnName("OM_SERVICE_TYPE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ONTARIO_MESSAGES");

                    b.HasIndex("OmAccNumber")
                        .HasName("FK_ACC_NUMBER");

                    b.HasIndex("OmFileId")
                        .HasName("ONTARIO_MESSAGES_I_FILE_ID");

                    b.HasIndex("OmParentId")
                        .HasName("ONTARIO_MESSAGES_FK_PARENT_ID");

                    b.HasIndex("OmPaymentId")
                        .HasName("FK_ONTARIO_MESS_PAYMENT_ID");

                    b.HasIndex("OmProcessedType")
                        .HasName("ONTARIO_MESSAGES_I_PROCESSED_T");

                    b.ToTable("ONTARIO_MESSAGES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OntarioOutgoing", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("OoBatchId")
                        .HasColumnName("OO_BATCH_ID")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("OoBody")
                        .HasColumnName("OO_BODY")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<long?>("OoClaimId")
                        .HasColumnName("OO_CLAIM_ID");

                    b.Property<DateTime?>("OoCreated")
                        .HasColumnName("OO_CREATED")
                        .HasColumnType("datetime");

                    b.Property<string>("OoFileId")
                        .HasColumnName("OO_FILE_ID")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<long?>("OoInvoiceId")
                        .HasColumnName("OO_INVOICE_ID");

                    b.Property<long?>("OoParentId")
                        .HasColumnName("OO_PARENT_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("ONTARIO_OUTGOING_I_OBJ_GUID");

                    b.HasIndex("OoBatchId")
                        .HasName("ONTARIO_OUTGOING_I_BATCH_ID");

                    b.HasIndex("OoClaimId")
                        .HasName("FK_OO_CLAIM_ID");

                    b.HasIndex("OoFileId")
                        .HasName("ONTARIO_OUTGOING_I_FILE_ID");

                    b.HasIndex("OoInvoiceId")
                        .HasName("ONTARIO_OUTGOING_FK_INVOICE_ID");

                    b.HasIndex("OoParentId")
                        .HasName("ONTARIO_OUTGOING_FK_PARENT_ID");

                    b.ToTable("ONTARIO_OUTGOING");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OnthegoPrefitem", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PrefValue")
                        .HasColumnName("PREF_VALUE")
                        .HasColumnType("image");

                    b.Property<long>("Profileid")
                        .HasColumnName("PROFILEID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("ONTHEGO_PREFITEM_I_OBJ_GUID");

                    b.HasIndex("Profileid")
                        .HasName("FK_ONTHEGO_PREFITEM_PROFILE");

                    b.ToTable("ONTHEGO_PREFITEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OnthegoProfile", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Dataguid")
                        .HasColumnName("DATAGUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("ONTHEGO_PROFILE_I_OBJ_GUID");

                    b.ToTable("ONTHEGO_PROFILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OnthegoQuickContact", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("ContactIcon")
                        .HasColumnName("CONTACT_ICON")
                        .HasColumnType("image");

                    b.Property<long?>("ContactTypeId")
                        .HasColumnName("CONTACT_TYPE_ID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Note")
                        .HasColumnName("NOTE")
                        .HasColumnType("image");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ProfileId")
                        .HasColumnName("PROFILE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ContactTypeId")
                        .HasName("FK_QCONTACT_CONTACT_TYPE");

                    b.HasIndex("ProfileId")
                        .HasName("FK_QCONTACT_PROFILE");

                    b.HasIndex("ServiceId")
                        .HasName("FK_QCONTACT_SERVICE");

                    b.ToTable("ONTHEGO_QUICK_CONTACT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OnthegoTaskView", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FilterByCreator")
                        .HasColumnName("FILTER_BY_CREATOR");

                    b.Property<long?>("FilterByDate")
                        .HasColumnName("FILTER_BY_DATE");

                    b.Property<long?>("FilterByGroup")
                        .HasColumnName("FILTER_BY_GROUP");

                    b.Property<long?>("FilterByHolder")
                        .HasColumnName("FILTER_BY_HOLDER");

                    b.Property<long?>("FilterByPriorities")
                        .HasColumnName("FILTER_BY_PRIORITIES");

                    b.Property<long?>("FilterByStatus")
                        .HasColumnName("FILTER_BY_STATUS");

                    b.Property<byte[]>("FilterByTypes")
                        .HasColumnName("FILTER_BY_TYPES")
                        .HasColumnType("image");

                    b.Property<long?>("GroupBy")
                        .HasColumnName("GROUP_BY");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrderNo")
                        .HasColumnName("ORDER_NO");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PriorityFiltering")
                        .HasColumnName("PRIORITY_FILTERING");

                    b.Property<long>("ProfileId")
                        .HasColumnName("PROFILE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SortBy")
                        .HasColumnName("SORT_BY");

                    b.Property<long?>("SortBy2")
                        .HasColumnName("SORT_BY2");

                    b.Property<long?>("TypeFiltering")
                        .HasColumnName("TYPE_FILTERING");

                    b.HasKey("Oid");

                    b.HasIndex("FilterByGroup")
                        .HasName("FK_TASKVIEW_PROVGROUP");

                    b.HasIndex("ProfileId")
                        .HasName("FK_TASKVIEW_PROFILE");

                    b.ToTable("ONTHEGO_TASK_VIEW");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrderFormatLine", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OflAlign")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OFL_ALIGN")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("OflFontname")
                        .HasColumnName("OFL_FONTNAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("OflFontsize")
                        .HasColumnName("OFL_FONTSIZE");

                    b.Property<long?>("OflFontstyle")
                        .HasColumnName("OFL_FONTSTYLE");

                    b.Property<float?>("OflHeight")
                        .HasColumnName("OFL_HEIGHT");

                    b.Property<float?>("OflLeft")
                        .HasColumnName("OFL_LEFT");

                    b.Property<long>("OflLineId")
                        .HasColumnName("OFL_LINE_ID");

                    b.Property<long>("OflPofId")
                        .HasColumnName("OFL_POF_ID");

                    b.Property<float?>("OflTop")
                        .HasColumnName("OFL_TOP");

                    b.Property<short>("OflVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OFL_VISIBLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("OflWidth")
                        .HasColumnName("OFL_WIDTH");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORDER_FORMAT_LINE");

                    b.HasIndex("OflPofId")
                        .HasName("OFL_POF_FK");

                    b.HasIndex("OflPofId", "OflLineId")
                        .IsUnique()
                        .HasName("ORDER_FMT_LINE_UI");

                    b.ToTable("ORDER_FORMAT_LINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrderFormData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FormBlobId")
                        .HasColumnName("FORM_BLOB_ID");

                    b.Property<byte[]>("FormData")
                        .HasColumnName("FORM_DATA")
                        .HasColumnType("image");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OrderId")
                        .HasColumnName("ORDER_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SUPPLIER_ID")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("FormBlobId")
                        .HasName("FK_ORDFRM_DATA_BLOBID");

                    b.HasIndex("ObjGuid")
                        .HasName("ORDER_FORM_DATA_I_OBJ_GUID");

                    b.HasIndex("OrderId")
                        .HasName("FK_ORDFRM_DATA_ORDERID");

                    b.HasIndex("SupplierId")
                        .HasName("ORDR_FRMDT_FK_SUPPLIER_ID");

                    b.ToTable("ORDER_FORM_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrderItem", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("AdditionalInfo")
                        .HasColumnName("ADDITIONAL_INFO")
                        .HasColumnType("image");

                    b.Property<string>("AdhocText")
                        .HasColumnName("ADHOC_TEXT")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("CdoFormId")
                        .HasColumnName("CDO_FORM_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<short>("CloseStandingOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CLOSE_STANDING_ORDER")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("CreationOn")
                        .HasColumnName("CREATION_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnName("DELETED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("InstructionsRtf")
                        .HasColumnName("INSTRUCTIONS_RTF")
                        .HasColumnType("image");

                    b.Property<long>("LinkedObjOid")
                        .HasColumnName("LINKED_OBJ_OID");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrderRepeatInterval")
                        .HasColumnName("ORDER_REPEAT_INTERVAL");

                    b.Property<long?>("OrderRepeatValue")
                        .HasColumnName("ORDER_REPEAT_VALUE");

                    b.Property<long>("ParentOrder")
                        .HasColumnName("PARENT_ORDER");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("SeparatePage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SEPARATE_PAGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("StandingOrderFrom")
                        .HasColumnName("STANDING_ORDER_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StandingOrderTo")
                        .HasColumnName("STANDING_ORDER_TO")
                        .HasColumnType("datetime");

                    b.Property<long?>("SupplierId")
                        .HasColumnName("SUPPLIER_ID");

                    b.Property<DateTime?>("WhenIsDone")
                        .HasColumnName("WHEN_IS_DONE")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("CdoFormId")
                        .HasName("OI_FORM_ID_FK_CDO_TD_OID");

                    b.HasIndex("CreationOn")
                        .HasName("ORDER_ITEM_CREATION_ON_I");

                    b.HasIndex("LinkedObjOid")
                        .HasName("FK_ORDERITEM_TEST");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORDER_ITEM");

                    b.HasIndex("ParentOrder")
                        .HasName("OI_FK_PARENT_ORDER");

                    b.HasIndex("SupplierId")
                        .HasName("ORDER_ITEM_FK_SUPPLIER_ID");

                    b.ToTable("ORDER_ITEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrderResults", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LabResultCid")
                        .HasColumnName("LAB_RESULT_CID");

                    b.Property<long>("LabResultOid")
                        .HasColumnName("LAB_RESULT_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OrdItem")
                        .HasColumnName("ORD_ITEM");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("LabResultOid")
                        .HasName("ORDER_RESULTS_FK_LAB");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORDER_RESULTS");

                    b.HasIndex("OrdItem")
                        .HasName("ORDER_RESULTS_FK_ORD");

                    b.ToTable("ORDER_RESULTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Orders", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("ClinicalDetail")
                        .HasColumnName("CLINICAL_DETAIL")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EncounterId")
                        .HasColumnName("ENCOUNTER_ID");

                    b.Property<long?>("Extcopy1")
                        .HasColumnName("EXTCOPY1");

                    b.Property<long?>("Extcopy2")
                        .HasColumnName("EXTCOPY2");

                    b.Property<short>("IsAnnon")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_ANNON")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsSelfCollect")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_SELF_COLLECT")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("OrdDxinfo")
                        .HasColumnName("ORD_DXINFO")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("OrdFastinginfo")
                        .HasColumnName("ORD_FASTINGINFO")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("OrdPayerName")
                        .HasColumnName("ORD_PAYER_NAME")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("OrdPayerNumber")
                        .HasColumnName("ORD_PAYER_NUMBER")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<short>("OrdPregnant")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORD_PREGNANT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("OrdRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORD_REQUIRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("OrdRxinfo")
                        .HasColumnName("ORD_RXINFO")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<short>("OrdUrgent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORD_URGENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PayerId")
                        .HasColumnName("PAYER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SelfDate")
                        .HasColumnName("SELF_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("SelfText")
                        .HasColumnName("SELF_TEXT")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long?>("SupplierId")
                        .HasColumnName("SUPPLIER_ID");

                    b.Property<long>("SupplierTypeId")
                        .HasColumnName("SUPPLIER_TYPE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("EncounterId")
                        .HasName("ORDERS_FK_ENCOUNTER_ID");

                    b.HasIndex("Extcopy1")
                        .HasName("EXTPROV_FK_EXTCOPY1");

                    b.HasIndex("Extcopy2")
                        .HasName("EXTPROV_FK_EXTCOPY2");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORDERS");

                    b.HasIndex("PayerId")
                        .HasName("ORDERS_FK_PAYER");

                    b.HasIndex("SupplierId")
                        .HasName("ORDERS_FK_SUPPLIER_ID");

                    b.HasIndex("SupplierTypeId")
                        .HasName("ORDERS_FK_SUPPLIER_TYPE_ID");

                    b.ToTable("ORDERS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgProvgroupLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OrgId")
                        .HasColumnName("ORG_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ProviderGroupId")
                        .HasColumnName("PROVIDER_GROUP_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_PROVGROUP_LINKS");

                    b.HasIndex("OrgId")
                        .HasName("FK_ORG_PROVGROUP_LINKS_ORGID");

                    b.HasIndex("ProviderGroupId")
                        .HasName("FK_ORG_PROVGROUP_LINKS_GROUPID");

                    b.ToTable("ORG_PROVGROUP_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructure", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("AddEncounterCreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ADD_ENCOUNTER_CREATED_DATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("AddJobTitle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ADD_JOB_TITLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("AlertOpenonly")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALERT_OPENONLY")
                        .HasDefaultValueSql("((-1))");

                    b.Property<long?>("AlertOrganisation")
                        .HasColumnName("ALERT_ORGANISATION");

                    b.Property<long?>("AlertScope")
                        .HasColumnName("ALERT_SCOPE");

                    b.Property<short>("AllowAssignProvsOutOrg")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOW_ASSIGN_PROVS_OUT_ORG")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("AllowMultipleAdmissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOW_MULTIPLE_ADMISSIONS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("AllowPatientContext")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOW_PATIENT_CONTEXT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("AllowPlanInEmr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOW_PLAN_IN_EMR")
                        .HasDefaultValueSql("((-1))");

                    b.Property<short>("AllowPrivacyMe")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOW_PRIVACY_ME")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("AllowSectionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOW_SECTION_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Allowcasetypenull")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOWCASETYPENULL")
                        .HasDefaultValueSql("((-1))");

                    b.Property<short>("Allowsingleopencase")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOWSINGLEOPENCASE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("AlterpatientFormid")
                        .HasColumnName("ALTERPATIENT_FORMID");

                    b.Property<short>("AlterpatientSuppresslookup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALTERPATIENT_SUPPRESSLOOKUP")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("AutoUpdateFirstVisit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUTO_UPDATE_FIRST_VISIT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CaseForImportedImm")
                        .HasColumnName("CASE_FOR_IMPORTED_IMM")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("ComplCommentsMacro")
                        .HasColumnName("COMPL_COMMENTS_MACRO")
                        .HasColumnType("image");

                    b.Property<long>("ComplCommentsType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COMPL_COMMENTS_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("CsAutoCloseServices")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CS_AUTO_CLOSE_SERVICES")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("CsPromptForNewService")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CS_PROMPT_FOR_NEW_SERVICE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("DefObjectRightsType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DEF_OBJECT_RIGHTS_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("DefaultAlerttype")
                        .HasColumnName("DEFAULT_ALERTTYPE");

                    b.Property<string>("Defaultcasetype")
                        .HasColumnName("DEFAULTCASETYPE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("DisplaypatientFormid")
                        .HasColumnName("DISPLAYPATIENT_FORMID");

                    b.Property<short>("DisplaypatientSuppresslookup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DISPLAYPATIENT_SUPPRESSLOOKUP")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("EncryptDataOnexport")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ENCRYPT_DATA_ONEXPORT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ForceAutocase")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FORCE_AUTOCASE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ForceCaseTitle")
                        .HasColumnName("FORCE_CASE_TITLE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("HideCaseList")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HIDE_CASE_LIST")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IncludeOtherPatients")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INCLUDE_OTHER_PATIENTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("InsertComplCmntsInCnotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INSERT_COMPL_CMNTS_IN_CNOTES")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("InterventionsMatchRule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INTERVENTIONS_MATCH_RULE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("InterventionsMergeRule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INTERVENTIONS_MERGE_RULE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsFinancialGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_FINANCIAL_GROUP")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("LockClosedCase")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOCK_CLOSED_CASE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("NewpatientFormid")
                        .HasColumnName("NEWPATIENT_FORMID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ObjectivesMatchRule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJECTIVES_MATCH_RULE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ObjectivesMergeRule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJECTIVES_MERGE_RULE")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("OmitFromCloseAll")
                        .HasColumnName("OMIT_FROM_CLOSE_ALL")
                        .HasColumnType("image");

                    b.Property<long?>("OsAdmRoleId")
                        .HasColumnName("OS_ADM_ROLE_ID");

                    b.Property<long?>("OsAdminPos")
                        .HasColumnName("OS_ADMIN_POS");

                    b.Property<long?>("OsAppSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OS_APP_SYSTEM_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("OsCaseRoleId")
                        .HasColumnName("OS_CASE_ROLE_ID");

                    b.Property<string>("OsCauseGroup")
                        .HasColumnName("OS_CAUSE_GROUP")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("OsClnRoleId")
                        .HasColumnName("OS_CLN_ROLE_ID");

                    b.Property<long?>("OsContactType")
                        .HasColumnName("OS_CONTACT_TYPE");

                    b.Property<long>("OsEncounterDescType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OS_ENCOUNTER_DESC_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("OsEquipLoanPos")
                        .HasColumnName("OS_EQUIP_LOAN_POS");

                    b.Property<long?>("OsGuessedRoleId")
                        .HasColumnName("OS_GUESSED_ROLE_ID");

                    b.Property<short>("OsIsEquipLoan")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OS_IS_EQUIP_LOAN")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("OsUseGuessedRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OS_USE_GUESSED_ROLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("OverviewHyperlinks")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OVERVIEW_HYPERLINKS")
                        .HasDefaultValueSql("((2))");

                    b.Property<long?>("ParentId")
                        .HasColumnName("PARENT_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PlanPromtType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PLAN_PROMT_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<short>("PrnFormHeaderFooter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRN_FORM_HEADER_FOOTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Promtcasetype")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROMTCASETYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefCode")
                        .HasColumnName("REF_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("RelaxRulesOnObjectives")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RELAX_RULES_ON_OBJECTIVES")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("RequireCaseForBe")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REQUIRE_CASE_FOR_BE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("RequireCaseForGs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REQUIRE_CASE_FOR_GS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RxSystemId")
                        .HasColumnName("RX_SYSTEM_ID");

                    b.Property<long?>("SchdAdminEncMacro")
                        .HasColumnName("SCHD_ADMIN_ENC_MACRO");

                    b.Property<long?>("SchdClinicalEncMacro")
                        .HasColumnName("SCHD_CLINICAL_ENC_MACRO");

                    b.Property<short>("SelectPatientCase")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SELECT_PATIENT_CASE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ShcdCareType")
                        .HasColumnName("SHCD_CARE_TYPE");

                    b.Property<long?>("ShcdSubtypeId")
                        .HasColumnName("SHCD_SUBTYPE_ID");

                    b.Property<short>("ShowPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHOW_POS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ShowUnsigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHOW_UNSIGNED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SyncReferralAndEmbdLetter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SYNC_REFERRAL_AND_EMBD_LETTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TemplateId")
                        .HasColumnName("TEMPLATE_ID");

                    b.Property<short>("UcpShowLuckyButton")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UCP_SHOW_LUCKY_BUTTON")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("UnifiedExcludedPlans")
                        .HasColumnName("UNIFIED_EXCLUDED_PLANS")
                        .HasColumnType("image");

                    b.Property<long?>("UnifiedInternalRule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UNIFIED_INTERNAL_RULE")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("UnifiedInternalRuleMacro")
                        .HasColumnName("UNIFIED_INTERNAL_RULE_MACRO")
                        .HasColumnType("image");

                    b.Property<long?>("UnifiedProviders")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UNIFIED_PROVIDERS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UnifiedStandardTmpltCode")
                        .HasColumnName("UNIFIED_STANDARD_TMPLT_CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("UseAlternatePatientViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_ALTERNATE_PATIENT_VIEWS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("UseUnifiedCarePlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_UNIFIED_CARE_PLAN")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("ValidateCarePlanMacro")
                        .HasColumnName("VALIDATE_CARE_PLAN_MACRO")
                        .HasColumnType("image");

                    b.Property<short>("WtbdAutoEncounter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WTBD_AUTO_ENCOUNTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WtbdDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WTBD_DELAY")
                        .HasDefaultValueSql("((60))");

                    b.Property<long?>("WtbdFromgroup")
                        .HasColumnName("WTBD_FROMGROUP");

                    b.Property<short>("WtbdFromgroupEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WTBD_FROMGROUP_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WtbdTogroup")
                        .HasColumnName("WTBD_TOGROUP");

                    b.Property<short>("WtbdTogroupEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WTBD_TOGROUP_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("AlertOrganisation")
                        .HasName("ORG_STRUCTURE_FK_ALERT_ORG");

                    b.HasIndex("AlterpatientFormid")
                        .HasName("FK_ORGSTR_ALTERPAT_FORMID");

                    b.HasIndex("DefaultAlerttype")
                        .HasName("DEF_ALERTTYPE_FK_SHCDID");

                    b.HasIndex("DisplaypatientFormid")
                        .HasName("FK_ORGSTR_DISPLAYPAT_FORMID");

                    b.HasIndex("NewpatientFormid")
                        .HasName("FK_ORGSTR_NEWPAT_FORMID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE");

                    b.HasIndex("OsAdmRoleId")
                        .HasName("FK_OS_ADM_ROLE_ID");

                    b.HasIndex("OsAdminPos")
                        .HasName("FK_ORG_STRUCTURE_ADMIN_POS");

                    b.HasIndex("OsCaseRoleId")
                        .HasName("FK_OS_CASE_ROLE_ID");

                    b.HasIndex("OsClnRoleId")
                        .HasName("FK_OS_CLN_ROLE_ID");

                    b.HasIndex("OsContactType")
                        .HasName("OS_CONTACT_TYPE_FK");

                    b.HasIndex("OsEquipLoanPos")
                        .HasName("ORG_STRUCTURE_FK_LOAN_POS");

                    b.HasIndex("OsGuessedRoleId")
                        .HasName("FK_OS_GUESSED_ROLE_ID");

                    b.HasIndex("ParentId")
                        .HasName("FK_ORG_STR_PARENT_ID");

                    b.HasIndex("PppuId")
                        .HasName("FK_ORG_STR_NODE_ID");

                    b.HasIndex("RxSystemId")
                        .HasName("ORGSTRUCTURE_FK_RXSYSTEM");

                    b.HasIndex("SchdAdminEncMacro")
                        .HasName("FK_ORG_STR_ADM_ENC_MACRO");

                    b.HasIndex("SchdClinicalEncMacro")
                        .HasName("FK_ORG_STR_CLIN_ENC_MACRO");

                    b.HasIndex("ShcdCareType")
                        .HasName("FK_ORG_STRUCTURE_SHCD_ID");

                    b.HasIndex("ShcdSubtypeId")
                        .HasName("FK_ORG_STR_SHCD_SUBTYPE_ID");

                    b.HasIndex("TemplateId")
                        .HasName("ORG_STRUCTURE_FK_CDO_TRANSDA");

                    b.HasIndex("WtbdFromgroup")
                        .HasName("FK_ORGSTR_WTBD_FROM");

                    b.HasIndex("WtbdTogroup")
                        .HasName("FK_ORGSTR_WTBD_TO");

                    b.HasIndex("RefCode", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("REF_CODE_IU")
                        .HasFilter("[REF_CODE] IS NOT NULL AND [DELETEDID] IS NOT NULL");

                    b.ToTable("ORG_STRUCTURE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureCasetemplate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OctCstOid")
                        .HasColumnName("OCT_CST_OID");

                    b.Property<long>("OctOstOid")
                        .HasColumnName("OCT_OST_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_CASET");

                    b.HasIndex("OctCstOid")
                        .HasName("FK_ORG_STRUCTURE_OCT_CST_OID");

                    b.HasIndex("OctOstOid")
                        .HasName("FK_ORG_STRUCTURE_OCT_OST_OID");

                    b.ToTable("ORG_STRUCTURE_CASETEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureDefaultPType", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("DptObjectType")
                        .HasColumnName("DPT_OBJECT_TYPE");

                    b.Property<long?>("DptOstOid")
                        .HasColumnName("DPT_OST_OID");

                    b.Property<long?>("DptPrivacyType")
                        .HasColumnName("DPT_PRIVACY_TYPE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DptOstOid")
                        .HasName("FK_ORG_STRUCTURE_DPT_OT_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_DEFAU");

                    b.ToTable("ORG_STRUCTURE_DEFAULT_P_TYPE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureDiseasecode", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OdcDscdId")
                        .HasColumnName("ODC_DSCD_ID");

                    b.Property<long>("OdcOstOid")
                        .HasColumnName("ODC_OST_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_DISEA");

                    b.HasIndex("OdcDscdId")
                        .HasName("FK_ORG_STRUCTURE_DC_DSCD_ID");

                    b.HasIndex("OdcOstOid")
                        .HasName("FK_ORG_STRUCTURE_DC_OST_OID");

                    b.HasIndex("OdcOstOid", "OdcDscdId")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_DISEASECODE_IU");

                    b.ToTable("ORG_STRUCTURE_DISEASECODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureLetter", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OlrLttrId")
                        .HasColumnName("OLR_LTTR_ID");

                    b.Property<long>("OlrOstOid")
                        .HasColumnName("OLR_OST_OID");

                    b.Property<long>("OlrType")
                        .HasColumnName("OLR_TYPE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_LETTE");

                    b.HasIndex("OlrLttrId")
                        .HasName("FK_ORG_STRUCTURE_LR_LTTR_OID");

                    b.HasIndex("OlrOstOid")
                        .HasName("FK_ORG_STRUCTURE_LR_OST_OID");

                    b.HasIndex("OlrOstOid", "OlrLttrId", "OlrType")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_LETTER_IU");

                    b.ToTable("ORG_STRUCTURE_LETTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureLookuplist", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OslLklsId")
                        .HasColumnName("OSL_LKLS_ID");

                    b.Property<long>("OslOstOid")
                        .HasColumnName("OSL_OST_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_LOOKU");

                    b.HasIndex("OslLklsId")
                        .HasName("FK_ORG_STRUCTURE_LL_LKLS_ID");

                    b.HasIndex("OslOstOid")
                        .HasName("FK_ORG_STRUCTURE_LL_OST_OID");

                    b.HasIndex("OslOstOid", "OslLklsId")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_LOOKUPLIST_IU");

                    b.ToTable("ORG_STRUCTURE_LOOKUPLIST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureOwncase", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OsoOstOid")
                        .HasColumnName("OSO_OST_OID");

                    b.Property<long>("OsoShcdId")
                        .HasColumnName("OSO_SHCD_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_OWNCA");

                    b.HasIndex("OsoOstOid")
                        .HasName("FK_ORG_STRUCTURE_OC_OST_OID");

                    b.HasIndex("OsoShcdId")
                        .HasName("FK_ORG_STRUCTURE_OC_SHCD_ID");

                    b.HasIndex("OsoOstOid", "OsoShcdId")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_OWNCASE_IU");

                    b.ToTable("ORG_STRUCTURE_OWNCASE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureParent", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OrgId")
                        .HasColumnName("ORG_ID");

                    b.Property<long>("ParentId")
                        .HasColumnName("PARENT_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_PAREN");

                    b.HasIndex("OrgId")
                        .HasName("FK_ORG_STRUCTURE_PARENT_ORG_");

                    b.HasIndex("ParentId")
                        .HasName("FK_ORG_STRUCTURE_PARENT_ID");

                    b.HasIndex("ParentId", "OrgId")
                        .IsUnique()
                        .HasName("ORG_STRUCT_PRNT_I_ORG_PRNT");

                    b.ToTable("ORG_STRUCTURE_PARENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructurePppu", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OspOstOid")
                        .HasColumnName("OSP_OST_OID");

                    b.Property<long>("OspPppuId")
                        .HasColumnName("OSP_PPPU_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_PPPU");

                    b.HasIndex("OspOstOid")
                        .HasName("FK_ORG_STRUCTURE_PPPU_OST_OI");

                    b.HasIndex("OspPppuId")
                        .HasName("FK_ORG_STRUCTURE_PPPU_PPPU_I");

                    b.HasIndex("OspOstOid", "OspPppuId")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_PPPU_IU");

                    b.ToTable("ORG_STRUCTURE_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureRecallplan", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OrpOstOid")
                        .HasColumnName("ORP_OST_OID");

                    b.Property<long>("OrpRcplId")
                        .HasColumnName("ORP_RCPL_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_RECAL");

                    b.HasIndex("OrpOstOid")
                        .HasName("FK_ORG_STRUCTURE_RP_OST_OID");

                    b.HasIndex("OrpRcplId")
                        .HasName("FK_ORG_STRUCTURE_RP_RCPL_ID");

                    b.HasIndex("OrpOstOid", "OrpRcplId")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_RECALLPLAN_IU");

                    b.ToTable("ORG_STRUCTURE_RECALLPLAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureRole", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OrlAprOid")
                        .HasColumnName("ORL_APR_OID");

                    b.Property<short>("OrlDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORL_DEFAULT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("OrlOstOid")
                        .HasColumnName("ORL_OST_OID");

                    b.Property<long>("OrlType")
                        .HasColumnName("ORL_TYPE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_ROLE");

                    b.HasIndex("OrlAprOid")
                        .HasName("FK_ORG_STRUCTURE_RL_APR_OID");

                    b.HasIndex("OrlOstOid")
                        .HasName("FK_ORG_STRUCTURE_RL_OST_OID");

                    b.HasIndex("OrlOstOid", "OrlAprOid", "OrlType")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_ROLE_IU");

                    b.ToTable("ORG_STRUCTURE_ROLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureRvtemplate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OvtOstOid")
                        .HasColumnName("OVT_OST_OID");

                    b.Property<long>("OvtRvtOid")
                        .HasColumnName("OVT_RVT_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_RVTEM");

                    b.HasIndex("OvtOstOid")
                        .HasName("FK_ORG_STRUCTURE_VT_OST_OID");

                    b.HasIndex("OvtRvtOid")
                        .HasName("FK_ORG_STRUCTURE_VT_RVT_OID");

                    b.HasIndex("OvtOstOid", "OvtRvtOid")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_RVTEMPLATE_IU");

                    b.ToTable("ORG_STRUCTURE_RVTEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureService", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OsrOstOid")
                        .HasColumnName("OSR_OST_OID");

                    b.Property<long>("OsrSrvcId")
                        .HasColumnName("OSR_SRVC_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_SERVI");

                    b.HasIndex("OsrOstOid")
                        .HasName("FK_ORG_STRUCTURE_SR_OST_OID");

                    b.HasIndex("OsrSrvcId")
                        .HasName("FK_ORG_STRUCTURE_SR_SRVC_ID");

                    b.HasIndex("OsrOstOid", "OsrSrvcId")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_SERVICE_IU");

                    b.ToTable("ORG_STRUCTURE_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureShortcode", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OssOstOid")
                        .HasColumnName("OSS_OST_OID");

                    b.Property<long>("OssShcdId")
                        .HasColumnName("OSS_SHCD_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_SHORT");

                    b.HasIndex("OssOstOid")
                        .HasName("FK_ORG_STRUCTURE_SC_OST_OID");

                    b.HasIndex("OssShcdId")
                        .HasName("FK_ORG_STRUCTURE_SC_SHCD_ID");

                    b.HasIndex("OssOstOid", "OssShcdId")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_SHORTCODE_IU");

                    b.ToTable("ORG_STRUCTURE_SHORTCODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureTrans", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OtrOstOid")
                        .HasColumnName("OTR_OST_OID");

                    b.Property<long>("OtrTrnCid")
                        .HasColumnName("OTR_TRN_CID");

                    b.Property<long>("OtrTrnOid")
                        .HasColumnName("OTR_TRN_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ORG_STRUCTURE_TRANS");

                    b.HasIndex("OtrOstOid")
                        .HasName("FK_ORG_STRUCTURE_TRANS_OST_O");

                    b.HasIndex("OtrTrnOid")
                        .HasName("FK_ORG_STRUCTURE_TRANS_TRN_O");

                    b.HasIndex("OtrOstOid", "OtrTrnOid")
                        .IsUnique()
                        .HasName("ORG_STRUCTURE_TRANS_IU");

                    b.ToTable("ORG_STRUCTURE_TRANS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Partition", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<long?>("PartitionContainerId")
                        .HasColumnName("PARTITION_CONTAINER_ID");

                    b.Property<long>("PartitionStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_STRUCTURE_ID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PrtnCode")
                        .IsRequired()
                        .HasColumnName("PRTN_CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("PrtnName")
                        .IsRequired()
                        .HasColumnName("PRTN_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long>("PrtnStatus")
                        .HasColumnName("PRTN_STATUS");

                    b.Property<long>("PrtnType")
                        .HasColumnName("PRTN_TYPE");

                    b.HasKey("Oid");

                    b.HasIndex("PartitionContainerId")
                        .HasName("PARTITION_FK_CONTAINER");

                    b.HasIndex("PartitionStructureId")
                        .HasName("FK_PARTITION_STRUCTURE");

                    b.HasIndex("PrtnCode", "Deletedid")
                        .IsUnique()
                        .HasName("PARTITION_I_CODE");

                    b.ToTable("PARTITION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PartitionBusiness", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("PatientpppuCdoPersonId")
                        .HasColumnName("PATIENTPPPU_CDO_PERSON_ID");

                    b.Property<long?>("PrtbAdminId")
                        .HasColumnName("PRTB_ADMIN_ID");

                    b.Property<string>("PrtbAlternativeId")
                        .HasColumnName("PRTB_ALTERNATIVE_ID")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<long?>("PrtbAnonymousId")
                        .HasColumnName("PRTB_ANONYMOUS_ID");

                    b.Property<short>("PrtbAutocase")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRTB_AUTOCASE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrtbCdoOrganizationId")
                        .HasColumnName("PRTB_CDO_ORGANIZATION_ID");

                    b.Property<string>("PrtbCellphone")
                        .HasColumnName("PRTB_CELLPHONE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("PrtbContactname")
                        .HasColumnName("PRTB_CONTACTNAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PrtbDataCentreNum")
                        .HasColumnName("PRTB_DATA_CENTRE_NUM")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("PrtbDefaultPosId")
                        .HasColumnName("PRTB_DEFAULT_POS_ID");

                    b.Property<string>("PrtbEmail")
                        .HasColumnName("PRTB_EMAIL")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("PrtbEmergencyId")
                        .HasColumnName("PRTB_EMERGENCY_ID");

                    b.Property<long?>("PrtbExtProvId")
                        .HasColumnName("PRTB_EXT_PROV_ID");

                    b.Property<string>("PrtbFax")
                        .HasColumnName("PRTB_FAX")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<long?>("PrtbIntrahealthId")
                        .HasColumnName("PRTB_INTRAHEALTH_ID");

                    b.Property<short>("PrtbIsdominant")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRTB_ISDOMINANT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PrtbLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRTB_LOCKED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PrtbMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRTB_MODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrtbMsodelegateId")
                        .HasColumnName("PRTB_MSODELEGATE_ID");

                    b.Property<string>("PrtbOtherphone")
                        .HasColumnName("PRTB_OTHERPHONE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<long>("PrtbParticipation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRTB_PARTICIPATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrtbPatientpppuId")
                        .HasColumnName("PRTB_PATIENTPPPU_ID");

                    b.Property<string>("PrtbPhonenumber")
                        .HasColumnName("PRTB_PHONENUMBER")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<long?>("PrtbPosId")
                        .HasColumnName("PRTB_POS_ID");

                    b.Property<long?>("PrtbPostaladdressId")
                        .HasColumnName("PRTB_POSTALADDRESS_ID");

                    b.Property<long?>("PrtbPracticeId")
                        .HasColumnName("PRTB_PRACTICE_ID");

                    b.Property<long?>("PrtbReferenceSystemId")
                        .HasColumnName("PRTB_REFERENCE_SYSTEM_ID");

                    b.Property<long?>("PrtbSourcesoftwareId")
                        .HasColumnName("PRTB_SOURCESOFTWARE_ID");

                    b.Property<string>("PrtbSourcesoftwareVersion")
                        .HasColumnName("PRTB_SOURCESOFTWARE_VERSION")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("PrtbSpecialtyConceptId")
                        .HasColumnName("PRTB_SPECIALTY_CONCEPT_ID");

                    b.Property<long?>("PrtbStreetaddressId")
                        .HasColumnName("PRTB_STREETADDRESS_ID");

                    b.Property<long?>("PrtbTypeConceptId")
                        .HasColumnName("PRTB_TYPE_CONCEPT_ID");

                    b.Property<long?>("PrtbUnspecifiedpppuId")
                        .HasColumnName("PRTB_UNSPECIFIEDPPPU_ID");

                    b.Property<short>("PrtbUsestreet")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRTB_USESTREET")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("PatientpppuCdoPersonId")
                        .HasName("FK_PATIENTPPPU_CDO_PERSON_ID");

                    b.HasIndex("PrtbAdminId")
                        .HasName("FK_PRTB_ADMIN_ID");

                    b.HasIndex("PrtbAnonymousId")
                        .HasName("FK_PRTB_ANONYMOUS_ID");

                    b.HasIndex("PrtbCdoOrganizationId")
                        .HasName("PARTBUS_FK_ORGANIZATION");

                    b.HasIndex("PrtbDefaultPosId")
                        .HasName("FK_PRTB_DEFAULT_POS_ID");

                    b.HasIndex("PrtbEmergencyId")
                        .HasName("FK_PRTB_EMERGENCY_ID");

                    b.HasIndex("PrtbExtProvId")
                        .HasName("FK_PRTB_EXT_PROV_ID");

                    b.HasIndex("PrtbIntrahealthId")
                        .HasName("FK_PRTB_INTRAHEALTH_ID");

                    b.HasIndex("PrtbMsodelegateId")
                        .HasName("FK_PRTB_MSODELEGATE_ID");

                    b.HasIndex("PrtbPatientpppuId")
                        .HasName("FK_PRTB_PATIENTPPPU_ID");

                    b.HasIndex("PrtbPosId")
                        .HasName("FK_PRTB_POS_ID");

                    b.HasIndex("PrtbPostaladdressId")
                        .HasName("FK_PRTB_AP_POSTALADDRESS_ID");

                    b.HasIndex("PrtbPracticeId")
                        .HasName("FK_PRTB_PRACTICE_ID");

                    b.HasIndex("PrtbReferenceSystemId")
                        .HasName("FK_PRTB_SC_REFERENCE_SYSTEM_");

                    b.HasIndex("PrtbSourcesoftwareId")
                        .HasName("FK_PRTB_SC_SOURCESOFTWARE_ID");

                    b.HasIndex("PrtbSpecialtyConceptId")
                        .HasName("FK_PRTB_SPECIALTY_CONCEPT_ID");

                    b.HasIndex("PrtbStreetaddressId")
                        .HasName("FK_PRTB_AP_STREETADDRESS_ID");

                    b.HasIndex("PrtbTypeConceptId")
                        .HasName("FK_PRTB_TYPE_CONCEPT_ID");

                    b.HasIndex("PrtbUnspecifiedpppuId")
                        .HasName("FK_PRTB_UNSPECIFIEDPPPU_ID");

                    b.ToTable("PARTITION_BUSINESS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PartitionComplexFilter", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Filtertype")
                        .HasColumnName("FILTERTYPE");

                    b.Property<long?>("FindObjectOid")
                        .HasColumnName("FIND_OBJECT_OID");

                    b.Property<short>("Inverted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INVERTED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Macro")
                        .HasColumnName("MACRO")
                        .HasMaxLength(4096)
                        .IsUnicode(false);

                    b.Property<long?>("PcfLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCF_LOCKED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PcfMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCF_MODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PcfNameOperation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCF_NAME_OPERATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PcfParticipation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCF_PARTICIPATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PcfPartitionName")
                        .HasColumnName("PCF_PARTITION_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PcfPartitionType")
                        .HasColumnName("PCF_PARTITION_TYPE");

                    b.Property<long?>("PcfStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCF_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("FindObjectOid")
                        .HasName("PCF_COMP_FILTER_FK_FIND_OBJ");

                    b.ToTable("PARTITION_COMPLEX_FILTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PartitionInfo", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PiName")
                        .IsRequired()
                        .HasColumnName("PI_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<byte[]>("PiValue")
                        .HasColumnName("PI_VALUE")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("PiName", "PartitionId")
                        .IsUnique()
                        .HasName("PARTITION_INFO_UK_NAME");

                    b.ToTable("PARTITION_INFO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PartitionStructure", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("NodeName")
                        .HasColumnName("NODE_NAME")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("ParentNode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARENT_NODE")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("ParentNode")
                        .HasName("PARTITION_STRUCTURE_SELF_FK");

                    b.ToTable("PARTITION_STRUCTURE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patient", b =>
                {
                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<DateTime?>("AcknowledgmentLastRead")
                        .HasColumnName("ACKNOWLEDGMENT_LAST_READ")
                        .HasColumnType("datetime");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("ForceWebPassChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FORCE_WEB_PASS_CHANGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LastCheckedDate")
                        .HasColumnName("LAST_CHECKED_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastconfirmedDate")
                        .HasColumnName("LASTCONFIRMED_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("LklsIdEthnicity")
                        .HasColumnName("LKLS_ID_ETHNICITY");

                    b.Property<long?>("LklsIdEthnicity2")
                        .HasColumnName("LKLS_ID_ETHNICITY2");

                    b.Property<long?>("LklsIdEthnicity3")
                        .HasColumnName("LKLS_ID_ETHNICITY3");

                    b.Property<long?>("LklsIdMaritalstatus")
                        .HasColumnName("LKLS_ID_MARITALSTATUS");

                    b.Property<long?>("LklsIdOccupation")
                        .HasColumnName("LKLS_ID_OCCUPATION");

                    b.Property<long?>("LklsIdReligion")
                        .HasColumnName("LKLS_ID_RELIGION");

                    b.Property<string>("MpiSystemName")
                        .HasColumnName("MPI_SYSTEM_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PasswordExpiryDate")
                        .HasColumnName("PASSWORD_EXPIRY_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("PatientTouchId")
                        .HasColumnName("PATIENT_TOUCH_ID");

                    b.Property<long?>("PppuIdAltdr")
                        .HasColumnName("PPPU_ID_ALTDR");

                    b.Property<long?>("PppuIdUsualdr")
                        .HasColumnName("PPPU_ID_USUALDR");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<short>("PtntAccredited")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_ACCREDITED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PtntAliasname")
                        .HasColumnName("PTNT_ALIASNAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PtntAliasnameupper")
                        .HasColumnName("PTNT_ALIASNAMEUPPER")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long>("PtntAllowEprescr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_ALLOW_EPRESCR")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntAllowcapitation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_ALLOWCAPITATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntAlwaystogurantor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_ALWAYSTOGURANTOR")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntApplyGst")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_APPLY_GST")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntAutocase")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_AUTOCASE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PtntBloodGroup")
                        .HasColumnName("PTNT_BLOOD_GROUP")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PtntBuildingWork")
                        .HasColumnName("PTNT_BUILDING_WORK")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PtntBuildingpostal")
                        .HasColumnName("PTNT_BUILDINGPOSTAL")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PtntBuildingstreet")
                        .HasColumnName("PTNT_BUILDINGSTREET")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PtntCellphone")
                        .HasColumnName("PTNT_CELLPHONE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<short>("PtntCheckprivacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_CHECKPRIVACY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PtntCodes")
                        .HasColumnName("PTNT_CODES")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<decimal>("PtntCoinsurancepercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_COINSURANCEPERCENTAGE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("PtntCountryOfBirth")
                        .HasColumnName("PTNT_COUNTRY_OF_BIRTH");

                    b.Property<DateTime?>("PtntDatefirstseen")
                        .HasColumnName("PTNT_DATEFIRSTSEEN")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PtntDatelastchanged")
                        .HasColumnName("PTNT_DATELASTCHANGED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PtntDatelastseen")
                        .HasColumnName("PTNT_DATELASTSEEN")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntDecile")
                        .HasColumnName("PTNT_DECILE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PtntDeletedDate")
                        .HasColumnName("PTNT_DELETED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntDeletedReason")
                        .HasColumnName("PTNT_DELETED_REASON")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PtntDeletedUserid")
                        .HasColumnName("PTNT_DELETED_USERID");

                    b.Property<long>("PtntDeletedid")
                        .HasColumnName("PTNT_DELETEDID");

                    b.Property<string>("PtntDhb")
                        .HasColumnName("PTNT_DHB")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("PtntDirectLogonList")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_DIRECT_LOGON_LIST")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PtntDob")
                        .HasColumnName("PTNT_DOB")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PtntDod")
                        .HasColumnName("PTNT_DOD")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntDomicileCode")
                        .HasColumnName("PTNT_DOMICILE_CODE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PtntDomicileDescription")
                        .HasColumnName("PTNT_DOMICILE_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PtntEmailaddr")
                        .HasColumnName("PTNT_EMAILADDR")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PtntEmailaddrupper")
                        .HasColumnName("PTNT_EMAILADDRUPPER")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<short>("PtntEmlappntreminders")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_EMLAPPNTREMINDERS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntEmlduerecallsnotif")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_EMLDUERECALLSNOTIF")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntEmployerId")
                        .HasColumnName("PTNT_EMPLOYER_ID");

                    b.Property<DateTime?>("PtntEmploymentFrom")
                        .HasColumnName("PTNT_EMPLOYMENT_FROM")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntEmploymentPosition")
                        .HasColumnName("PTNT_EMPLOYMENT_POSITION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("PtntFamilyhead")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_FAMILYHEAD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntFamilyhxOid")
                        .HasColumnName("PTNT_FAMILYHX_OID");

                    b.Property<string>("PtntFirstname")
                        .HasColumnName("PTNT_FIRSTNAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntFirstnameupper")
                        .HasColumnName("PTNT_FIRSTNAMEUPPER")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntFolder")
                        .HasColumnName("PTNT_FOLDER")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("PtntGeoCoordX")
                        .HasColumnName("PTNT_GEO_COORD_X")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PtntGeoCoordY")
                        .HasColumnName("PTNT_GEO_COORD_Y")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PtntGeoDhb")
                        .HasColumnName("PTNT_GEO_DHB")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<double?>("PtntGeoLatitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_GEO_LATITUDE")
                        .HasDefaultValueSql("((90))");

                    b.Property<double?>("PtntGeoLongitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_GEO_LONGITUDE")
                        .HasDefaultValueSql("((90))");

                    b.Property<long>("PtntGeoStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_GEO_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PtntGeoUncertaintycode")
                        .HasColumnName("PTNT_GEO_UNCERTAINTYCODE")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("PtntGms")
                        .HasColumnName("PTNT_GMS")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PtntGonedatetime")
                        .HasColumnName("PTNT_GONEDATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntHerecomputer")
                        .HasColumnName("PTNT_HERECOMPUTER")
                        .HasColumnType("char(15)");

                    b.Property<DateTime?>("PtntHeredatetime")
                        .HasColumnName("PTNT_HEREDATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntHomefax")
                        .HasColumnName("PTNT_HOMEFAX")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("PtntHomephone")
                        .HasColumnName("PTNT_HOMEPHONE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("PtntIdGuarantor")
                        .HasColumnName("PTNT_ID_GUARANTOR");

                    b.Property<long?>("PtntIdInsurer")
                        .HasColumnName("PTNT_ID_INSURER");

                    b.Property<long?>("PtntIdPartner")
                        .HasColumnName("PTNT_ID_PARTNER");

                    b.Property<short>("PtntIgnoredDuplSearch")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_IGNORED_DUPL_SEARCH")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtntIhnOpt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_IHN_OPT")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PtntIhnPasschanged")
                        .HasColumnName("PTNT_IHN_PASSCHANGED")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntIhnPassword")
                        .HasColumnName("PTNT_IHN_PASSWORD")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("PtntIhnPasswordHint")
                        .HasColumnName("PTNT_IHN_PASSWORD_HINT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PtntInactivationdate")
                        .HasColumnName("PTNT_INACTIVATIONDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("PtntInactivationreason")
                        .HasColumnName("PTNT_INACTIVATIONREASON");

                    b.Property<string>("PtntIndex")
                        .HasColumnName("PTNT_INDEX")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<short>("PtntInfantOrDependent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_INFANT_OR_DEPENDENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntInterpreterrequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_INTERPRETERREQUIRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntIsemailnotifyallowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_ISEMAILNOTIFYALLOWED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntIssmscellphone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_ISSMSCELLPHONE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PtntIwi")
                        .HasColumnName("PTNT_IWI")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<short>("PtntJoinCentralAbility")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_JOIN_CENTRAL_ABILITY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntLabel")
                        .HasColumnName("PTNT_LABEL");

                    b.Property<DateTime>("PtntLastactivitydate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_LASTACTIVITYDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("PtntLastaddresschanged")
                        .HasColumnName("PTNT_LASTADDRESSCHANGED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PtntLastarrivaldate")
                        .HasColumnName("PTNT_LASTARRIVALDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PtntLastmpidatetime")
                        .HasColumnName("PTNT_LASTMPIDATETIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("PtntLeadcaregiver")
                        .HasColumnName("PTNT_LEADCAREGIVER");

                    b.Property<long?>("PtntLeadcarerel")
                        .HasColumnName("PTNT_LEADCAREREL");

                    b.Property<string>("PtntMaidenname")
                        .HasColumnName("PTNT_MAIDENNAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntMaidennameupper")
                        .HasColumnName("PTNT_MAIDENNAMEUPPER")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<long?>("PtntMasterPtntId")
                        .HasColumnName("PTNT_MASTER_PTNT_ID");

                    b.Property<string>("PtntMathapu")
                        .HasColumnName("PTNT_MATHAPU")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PtntMatheritage")
                        .HasColumnName("PTNT_MATHERITAGE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PtntMemberid")
                        .HasColumnName("PTNT_MEMBERID")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("PtntMeshblock")
                        .HasColumnName("PTNT_MESHBLOCK")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PtntMiddleinitial")
                        .HasColumnName("PTNT_MIDDLEINITIAL")
                        .HasColumnType("char(1)");

                    b.Property<string>("PtntMpi")
                        .HasColumnName("PTNT_MPI")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<long?>("PtntNamesuffix")
                        .HasColumnName("PTNT_NAMESUFFIX");

                    b.Property<string>("PtntNationalnum")
                        .HasColumnName("PTNT_NATIONALNUM")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PtntNationalnumExpiry")
                        .HasColumnName("PTNT_NATIONALNUM_EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntNationalnumSystem")
                        .HasColumnName("PTNT_NATIONALNUM_SYSTEM")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("PtntNotableperson")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_NOTABLEPERSON")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntObstetricHxOid")
                        .HasColumnName("PTNT_OBSTETRIC_HX_OID");

                    b.Property<string>("PtntOccupation")
                        .HasColumnName("PTNT_OCCUPATION")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<short>("PtntOnlineEligibility")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_ONLINE_ELIGIBILITY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntOptOutSharing")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_OPT_OUT_SHARING")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntOrgId")
                        .HasColumnName("PTNT_ORG_ID");

                    b.Property<string>("PtntOtherphone")
                        .HasColumnName("PTNT_OTHERPHONE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("PtntParent1")
                        .HasColumnName("PTNT_PARENT1");

                    b.Property<long?>("PtntParent1rel")
                        .HasColumnName("PTNT_PARENT1REL");

                    b.Property<long?>("PtntParent2")
                        .HasColumnName("PTNT_PARENT2");

                    b.Property<long?>("PtntParent2rel")
                        .HasColumnName("PTNT_PARENT2REL");

                    b.Property<short>("PtntPasstoinsurer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_PASSTOINSURER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntPasthxOid")
                        .HasColumnName("PTNT_PASTHX_OID");

                    b.Property<string>("PtntPathapu")
                        .HasColumnName("PTNT_PATHAPU")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PtntPatheritage")
                        .HasColumnName("PTNT_PATHERITAGE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PtntPatientcode")
                        .HasColumnName("PTNT_PATIENTCODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("PtntPatientcodesort")
                        .HasColumnName("PTNT_PATIENTCODESORT")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("PtntPayerId")
                        .HasColumnName("PTNT_PAYER_ID");

                    b.Property<string>("PtntPersonalotherphone")
                        .HasColumnName("PTNT_PERSONALOTHERPHONE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("PtntPlaceofbirth")
                        .HasColumnName("PTNT_PLACEOFBIRTH")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("PtntPosid")
                        .HasColumnName("PTNT_POSID");

                    b.Property<long?>("PtntPostCountry")
                        .HasColumnName("PTNT_POST_COUNTRY");

                    b.Property<string>("PtntPostal1")
                        .HasColumnName("PTNT_POSTAL1")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PtntPostal2")
                        .HasColumnName("PTNT_POSTAL2")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PtntPostal3")
                        .HasColumnName("PTNT_POSTAL3")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PtntPostalcode")
                        .HasColumnName("PTNT_POSTALCODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("PtntPostalstate")
                        .HasColumnName("PTNT_POSTALSTATE");

                    b.Property<long?>("PtntPreferredEmailId")
                        .HasColumnName("PTNT_PREFERRED_EMAIL_ID");

                    b.Property<long>("PtntPreferredEmailType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_PREFERRED_EMAIL_TYPE")
                        .HasDefaultValueSql("((1))");

                    b.Property<long?>("PtntPreferredPhoneId")
                        .HasColumnName("PTNT_PREFERRED_PHONE_ID");

                    b.Property<long>("PtntPreferredPhoneType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_PREFERRED_PHONE_TYPE")
                        .HasDefaultValueSql("((1))");

                    b.Property<long?>("PtntPreferrednotifymethod")
                        .HasColumnName("PTNT_PREFERREDNOTIFYMETHOD");

                    b.Property<string>("PtntPrefname")
                        .HasColumnName("PTNT_PREFNAME")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("PtntPrefnameupper")
                        .HasColumnName("PTNT_PREFNAMEUPPER")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("PtntPrivacyid")
                        .HasColumnName("PTNT_PRIVACYID");

                    b.Property<string>("PtntQuintile")
                        .HasColumnName("PTNT_QUINTILE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long>("PtntRegistered")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_REGISTERED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntResident")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_RESIDENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntSenddischarge")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_SENDDISCHARGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PtntSex")
                        .HasColumnName("PTNT_SEX")
                        .HasColumnType("char(1)");

                    b.Property<long?>("PtntShcdIdIwi")
                        .HasColumnName("PTNT_SHCD_ID_IWI");

                    b.Property<short>("PtntShouldalwaysreconcile")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_SHOULDALWAYSRECONCILE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntShouldholdaccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_SHOULDHOLDACCOUNT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtntShowintotals")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_SHOWINTOTALS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntSocialhxOid")
                        .HasColumnName("PTNT_SOCIALHX_OID");

                    b.Property<long?>("PtntSocialhxSrcProviderid")
                        .HasColumnName("PTNT_SOCIALHX_SRC_PROVIDERID");

                    b.Property<string>("PtntSoundexFirstname")
                        .HasColumnName("PTNT_SOUNDEX_FIRSTNAME")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("PtntSoundexSurname")
                        .HasColumnName("PTNT_SOUNDEX_SURNAME")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("PtntSourceref")
                        .HasColumnName("PTNT_SOURCEREF")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("PtntSrcProviderid")
                        .HasColumnName("PTNT_SRC_PROVIDERID");

                    b.Property<long?>("PtntStatus")
                        .HasColumnName("PTNT_STATUS");

                    b.Property<DateTime?>("PtntStatusChanged")
                        .HasColumnName("PTNT_STATUS_CHANGED")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntStreet1")
                        .HasColumnName("PTNT_STREET1")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PtntStreet2")
                        .HasColumnName("PTNT_STREET2")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PtntStreet3")
                        .HasColumnName("PTNT_STREET3")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("PtntStreetCountry")
                        .HasColumnName("PTNT_STREET_COUNTRY");

                    b.Property<string>("PtntStreetcode")
                        .HasColumnName("PTNT_STREETCODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("PtntStreetstate")
                        .HasColumnName("PTNT_STREETSTATE");

                    b.Property<string>("PtntSurname")
                        .HasColumnName("PTNT_SURNAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntSurnameupper")
                        .HasColumnName("PTNT_SURNAMEUPPER")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntTitle")
                        .HasColumnName("PTNT_TITLE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("PtntTlaName")
                        .HasColumnName("PTNT_TLA_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PtntTpaId")
                        .HasColumnName("PTNT_TPA_ID");

                    b.Property<long?>("PtntTransferStatus")
                        .HasColumnName("PTNT_TRANSFER_STATUS");

                    b.Property<long?>("PtntTransferStatusChangedBy")
                        .HasColumnName("PTNT_TRANSFER_STATUS_CHANGED_BY");

                    b.Property<DateTime?>("PtntTransferStatusChangedOn")
                        .HasColumnName("PTNT_TRANSFER_STATUS_CHANGED_ON")
                        .HasColumnType("datetime");

                    b.Property<long?>("PtntType")
                        .HasColumnName("PTNT_TYPE");

                    b.Property<string>("PtntUser1")
                        .HasColumnName("PTNT_USER1")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntUser2")
                        .HasColumnName("PTNT_USER2")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntUser3")
                        .HasColumnName("PTNT_USER3")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntUser4")
                        .HasColumnName("PTNT_USER4")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntUser5")
                        .HasColumnName("PTNT_USER5")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<short>("PtntUsestreetpostal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_USESTREETPOSTAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtntUsualpaymentmethod")
                        .HasColumnName("PTNT_USUALPAYMENTMETHOD");

                    b.Property<string>("PtntVersioncode")
                        .HasColumnName("PTNT_VERSIONCODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<short>("PtntWebenable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTNT_WEBENABLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PtntWeblastvisit")
                        .HasColumnName("PTNT_WEBLASTVISIT")
                        .HasColumnType("datetime");

                    b.Property<string>("PtntWebpassword")
                        .HasColumnName("PTNT_WEBPASSWORD")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PtntWebprofileid")
                        .HasColumnName("PTNT_WEBPROFILEID");

                    b.Property<string>("PtntWebusername")
                        .HasColumnName("PTNT_WEBUSERNAME")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PtntWork1")
                        .HasColumnName("PTNT_WORK1")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PtntWork2")
                        .HasColumnName("PTNT_WORK2")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PtntWork3")
                        .HasColumnName("PTNT_WORK3")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("PtntWorkCountry")
                        .HasColumnName("PTNT_WORK_COUNTRY");

                    b.Property<string>("PtntWorkcode")
                        .HasColumnName("PTNT_WORKCODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PtntWorkname")
                        .HasColumnName("PTNT_WORKNAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("PtntWorkphone")
                        .HasColumnName("PTNT_WORKPHONE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<long?>("PtntWorkstate")
                        .HasColumnName("PTNT_WORKSTATE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("REG_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Residency")
                        .HasColumnName("RESIDENCY")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short>("Sealed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SEALED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ShcdIdBenefittype")
                        .HasColumnName("SHCD_ID_BENEFITTYPE");

                    b.Property<long?>("ShcdIdHealthstatus")
                        .HasColumnName("SHCD_ID_HEALTHSTATUS");

                    b.Property<long?>("ShcdIdHomelanguage")
                        .HasColumnName("SHCD_ID_HOMELANGUAGE");

                    b.Property<long?>("ShcdIdJournals")
                        .HasColumnName("SHCD_ID_JOURNALS");

                    b.Property<long?>("ShcdIdLivingsituation")
                        .HasColumnName("SHCD_ID_LIVINGSITUATION");

                    b.Property<long?>("ShcdIdPlan")
                        .HasColumnName("SHCD_ID_PLAN");

                    b.Property<long?>("ShcdIdPreflanguage")
                        .HasColumnName("SHCD_ID_PREFLANGUAGE");

                    b.Property<long?>("ShcdIdServicecategory")
                        .HasColumnName("SHCD_ID_SERVICECATEGORY");

                    b.Property<long?>("ShcdIdServicediscount")
                        .HasColumnName("SHCD_ID_SERVICEDISCOUNT");

                    b.Property<long?>("ShcdIdServicerate")
                        .HasColumnName("SHCD_ID_SERVICERATE");

                    b.Property<long?>("ShcdIdTargettype")
                        .HasColumnName("SHCD_ID_TARGETTYPE");

                    b.Property<short>("ShowAcknowledgment")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHOW_ACKNOWLEDGMENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("UsualPayerType")
                        .HasColumnName("USUAL_PAYER_TYPE");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PtntId");

                    b.HasIndex("Code")
                        .HasName("I_PATIENT_CODE");

                    b.HasIndex("Createdby")
                        .HasName("PATIENT_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PATIENT_FK_DELETEDBY");

                    b.HasIndex("LklsIdEthnicity")
                        .HasName("FOREIGN_LKLS_ID_ETHNICITY");

                    b.HasIndex("LklsIdEthnicity2")
                        .HasName("PATIENT_FK_LKLS_ID_ETHNICIT2");

                    b.HasIndex("LklsIdEthnicity3")
                        .HasName("PATIENT_FK_LKLS_ID_ETHNICIT3");

                    b.HasIndex("LklsIdMaritalstatus")
                        .HasName("FOREIGN_LKLS_ID_MARITALSTATU");

                    b.HasIndex("LklsIdOccupation")
                        .HasName("FOREIGN_LKLS_ID_OCCUPATION");

                    b.HasIndex("LklsIdReligion")
                        .HasName("FOREIGN_LKLS_ID_RELIGION");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT");

                    b.HasIndex("PppuIdAltdr")
                        .HasName("FOREIGN_PPPU_ID_ALTDR");

                    b.HasIndex("PppuIdUsualdr")
                        .HasName("FOREIGN_PPPU_ID_USUALDR");

                    b.HasIndex("PtntAliasnameupper")
                        .HasName("PATIENT_I_PTNT_ALIASNAMEUPPER");

                    b.HasIndex("PtntDeletedUserid")
                        .HasName("FK_PTNT_DELETED_USERID");

                    b.HasIndex("PtntDob")
                        .HasName("PATIENT_I_DOB");

                    b.HasIndex("PtntEmailaddrupper")
                        .HasName("PATIENT_I_EMAILADDR");

                    b.HasIndex("PtntEmployerId")
                        .HasName("PTNT_FK_EMPLOYER_ID");

                    b.HasIndex("PtntFamilyhxOid")
                        .HasName("PATIENT_FK_PTNT_FAMILYHX_OID");

                    b.HasIndex("PtntFirstnameupper")
                        .HasName("INDEX_PTNT_FIRSTNAMEUPPER");

                    b.HasIndex("PtntFolder")
                        .HasName("PATIENT_PTNT_FOLDER");

                    b.HasIndex("PtntIdGuarantor")
                        .HasName("FOREIGN_PTNT_ID_GUARANTOR");

                    b.HasIndex("PtntIdInsurer")
                        .HasName("PTNT_FOREIGN_INSURER");

                    b.HasIndex("PtntIdPartner")
                        .HasName("FOREIGN_PTNT_ID_PARTNER");

                    b.HasIndex("PtntLastactivitydate")
                        .HasName("I_PATIENT_LASTACTIVITYDATE");

                    b.HasIndex("PtntLeadcaregiver")
                        .HasName("PATIENT_FK_LEADCAREGIVER");

                    b.HasIndex("PtntLeadcarerel")
                        .HasName("FK_PAT_LEADCARE_REL");

                    b.HasIndex("PtntMaidennameupper")
                        .HasName("PATIENT_I_PTNT_MAIDENNAMEUPPER");

                    b.HasIndex("PtntMasterPtntId")
                        .HasName("FK_PTNT_MASTER_PTNT_ID");

                    b.HasIndex("PtntMpi")
                        .HasName("PATIENT_I_PTNT_MPI");

                    b.HasIndex("PtntNamesuffix")
                        .HasName("FK_PTNT_NAMESUFFIX_SHORTCODE");

                    b.HasIndex("PtntNationalnum")
                        .HasName("INDEX_PATIENT_PTNT_NHI");

                    b.HasIndex("PtntObstetricHxOid")
                        .HasName("PATIENT_FK_PTNT_OBSTETRIC_HX");

                    b.HasIndex("PtntOrgId")
                        .HasName("FK_PATIENT_ORG_ID");

                    b.HasIndex("PtntParent1")
                        .HasName("FK_PATIENT_PARENT1");

                    b.HasIndex("PtntParent1rel")
                        .HasName("FK_PAT_PARENT1_REL");

                    b.HasIndex("PtntParent2")
                        .HasName("FK_PATIENT_PARENT2");

                    b.HasIndex("PtntParent2rel")
                        .HasName("FK_PAT_PARENT2_REL");

                    b.HasIndex("PtntPasthxOid")
                        .HasName("PATIENT_FK_PTNT_PASTHX_OID");

                    b.HasIndex("PtntPatientcodesort")
                        .HasName("I_PTNT_PATIENTCODESORT");

                    b.HasIndex("PtntPayerId")
                        .HasName("PATIENT_FK_PAYER_ID");

                    b.HasIndex("PtntPostalstate")
                        .HasName("PATIENT_FK_PTNT_POSTALSTATE");

                    b.HasIndex("PtntPrefnameupper")
                        .HasName("I_PATIENT_PTNT_PREFNAMEUPPER");

                    b.HasIndex("PtntSocialhxOid")
                        .HasName("PATIENT_FK_PTNT_SOCIALHX_OID");

                    b.HasIndex("PtntSocialhxSrcProviderid")
                        .HasName("FK_PPPU_SOCLHX_SRC_PROVIDERID");

                    b.HasIndex("PtntSoundexFirstname")
                        .HasName("PTNT_IDX_SOUNDEX_FIRSTNAME");

                    b.HasIndex("PtntSoundexSurname")
                        .HasName("PATIENT_I_SURNAME_SND");

                    b.HasIndex("PtntSourceref")
                        .HasName("PATIENT_I_PTNT_SOURCEREF");

                    b.HasIndex("PtntSrcProviderid")
                        .HasName("FK_PPPU_PTNT_SRC_PROVIDERID");

                    b.HasIndex("PtntStreetstate")
                        .HasName("PATIENT_FK_PTNT_STREETSTATE");

                    b.HasIndex("PtntSurnameupper")
                        .HasName("INDEX_PTNT_SURNAMEUPPER");

                    b.HasIndex("PtntTransferStatusChangedBy")
                        .HasName("PATIENT_FK_TRANSFER_CHANGED_BY");

                    b.HasIndex("PtntType")
                        .HasName("PATIENT_I_PTNT_TYPE");

                    b.HasIndex("PtntWebusername")
                        .HasName("IND_WEBUSERNAME");

                    b.HasIndex("PtntWorkstate")
                        .HasName("PATIENT_FK_PTNT_WORKSTATE");

                    b.HasIndex("ShcdIdBenefittype")
                        .HasName("FK_PTNT_BEN_TP_SHCD_ID");

                    b.HasIndex("ShcdIdHealthstatus")
                        .HasName("FK_PTNT_HEAL_ST_SHCD_ID");

                    b.HasIndex("ShcdIdHomelanguage")
                        .HasName("PATIENT_FK_SHCD_ID_HOMELANGU");

                    b.HasIndex("ShcdIdJournals")
                        .HasName("PATIENT_FK_SHCD_ID_JOURNALS");

                    b.HasIndex("ShcdIdLivingsituation")
                        .HasName("FK_PTNT_LIV_SIT_SHCD_ID");

                    b.HasIndex("ShcdIdPlan")
                        .HasName("PTNT_FOREIGN_PLAN");

                    b.HasIndex("ShcdIdPreflanguage")
                        .HasName("PATIENT_FK_SHCD_ID_PREFLANGU");

                    b.HasIndex("ShcdIdServicecategory")
                        .HasName("FK_PTNT_SER_CAT_SHCD_ID");

                    b.HasIndex("ShcdIdServicediscount")
                        .HasName("PTNT_FOREIGN_SERVICEDISCOUNT");

                    b.HasIndex("ShcdIdServicerate")
                        .HasName("PTNT_FOREIGN_SERVICERATE");

                    b.HasIndex("ShcdIdTargettype")
                        .HasName("FK_PTNT_TRG_TP_SHCD_ID");

                    b.HasIndex("PtntPatientcode", "PtntDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("INDEX_PTNT_PARTCODE")
                        .HasFilter("[PTNT_PATIENTCODE] IS NOT NULL");

                    b.HasIndex("PtntSurname", "PtntFirstname", "PtntDob")
                        .HasName("INDEX_PTNT_NAMEANDDOB");

                    b.ToTable("PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientAlternatName", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .HasColumnName("MASTER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PtanName")
                        .HasColumnName("PTAN_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PtanNameupper")
                        .HasColumnName("PTAN_NAMEUPPER")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long>("PtanPtntId")
                        .HasColumnName("PTAN_PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("FK_PTALTNAME_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("FK_PTALTNAME_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PTAN_PTAN_FK_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_ALTERNAT_NA");

                    b.HasIndex("PtanPtntId")
                        .HasName("PAT_ALTERNAT_NAME_PATIENT_FK");

                    b.ToTable("PATIENT_ALTERNAT_NAME");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientAudit", b =>
                {
                    b.Property<long>("PaudtId")
                        .HasColumnName("PAUDT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ObserverPtntId")
                        .HasColumnName("OBSERVER_PTNT_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PaudtComputername")
                        .HasColumnName("PAUDT_COMPUTERNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PaudtEndDatetime")
                        .HasColumnName("PAUDT_END_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("PaudtIp")
                        .HasColumnName("PAUDT_IP")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<long?>("PaudtPppuId")
                        .HasColumnName("PAUDT_PPPU_ID");

                    b.Property<long?>("PaudtPtntId")
                        .HasColumnName("PAUDT_PTNT_ID");

                    b.Property<DateTime?>("PaudtStartDatetime")
                        .HasColumnName("PAUDT_START_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("UserText")
                        .HasColumnName("USER_TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("PaudtId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_AUDIT");

                    b.HasIndex("ObserverPtntId")
                        .HasName("FK_PAUDIT_OBSPTNTID");

                    b.HasIndex("PaudtPppuId")
                        .HasName("PATIENT_AUDIT_FK_PPPU_ID");

                    b.HasIndex("PaudtPtntId")
                        .HasName("PATIENT_AUDIT_FK_PTNT_ID");

                    b.ToTable("PATIENT_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientAuditDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("PadAlertdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAD_ALERTDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("PadAuditId")
                        .HasColumnName("PAD_AUDIT_ID");

                    b.Property<string>("PadDescription")
                        .HasColumnName("PAD_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("PadType")
                        .HasColumnName("PAD_TYPE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_AUDIT_DETAI");

                    b.HasIndex("PadAuditId")
                        .HasName("PAD_AUDIT_ID_FK");

                    b.ToTable("PATIENT_AUDIT_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientbalance", b =>
                {
                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Lasttransoid")
                        .HasColumnName("LASTTRANSOID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("Ptbl30day")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_30DAY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("Ptbl60day")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_60DAY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("Ptbl90day")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_90DAY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("PtblBaddebt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_BADDEBT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("PtblCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_CURRENT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime?>("PtblLastinvoice")
                        .HasColumnName("PTBL_LASTINVOICE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PtblLastpayment")
                        .HasColumnName("PTBL_LASTPAYMENT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PtblLasttrans")
                        .HasColumnName("PTBL_LASTTRANS")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("PtntId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENTBALANCE");

                    b.HasIndex("PtblLastinvoice")
                        .HasName("I_PTBL_LASTINVOICE");

                    b.ToTable("PATIENTBALANCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientcard", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("PtcdCoinsurance")
                        .HasColumnName("PTCD_COINSURANCE");

                    b.Property<long?>("PtcdCoinsuranceType")
                        .HasColumnName("PTCD_COINSURANCE_TYPE");

                    b.Property<long?>("PtcdCopayType")
                        .HasColumnName("PTCD_COPAY_TYPE");

                    b.Property<decimal>("PtcdCopayValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTCD_COPAY_VALUE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<short>("PtcdDiscontinued")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTCD_DISCONTINUED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PtcdExpiry")
                        .HasColumnName("PTCD_EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<string>("PtcdNumber")
                        .HasColumnName("PTCD_NUMBER")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PtcdOldExpiry")
                        .HasColumnName("PTCD_OLD_EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<long?>("PtcdPayerId")
                        .HasColumnName("PTCD_PAYER_ID");

                    b.Property<long?>("PtcdPeriod")
                        .HasColumnName("PTCD_PERIOD");

                    b.Property<long?>("PtcdPlantype")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTCD_PLANTYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtcdRate")
                        .HasColumnName("PTCD_RATE");

                    b.Property<short>("PtcdSecondaryPayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTCD_SECONDARY_PAYER")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PtcdStarted")
                        .HasColumnName("PTCD_STARTED")
                        .HasColumnType("datetime");

                    b.Property<short>("PtcdUnitIsEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTCD_UNIT_IS_EDITABLE")
                        .HasDefaultValueSql("((-1))");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Reference")
                        .HasColumnName("REFERENCE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("TemplateOid")
                        .HasColumnName("TEMPLATE_OID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENTCARD");

                    b.HasIndex("PtcdPayerId")
                        .HasName("FK_PATIENTCARD_PAYER_ID");

                    b.HasIndex("PtcdRate")
                        .HasName("FK_PATIENTCARD_RATE");

                    b.HasIndex("PtntId")
                        .HasName("PATIENTCARDFOREIGNKEY1");

                    b.HasIndex("TemplateOid")
                        .HasName("FK_PATIENTCARD_TEMP_OID");

                    b.ToTable("PATIENTCARD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientClinicaldetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Alcohol")
                        .HasColumnName("ALCOHOL");

                    b.Property<long>("AlcoholNd")
                        .HasColumnName("ALCOHOL_ND");

                    b.Property<string>("AlcoholSourceid")
                        .HasColumnName("ALCOHOL_SOURCEID")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<long?>("AlcoholSrcProviderid")
                        .HasColumnName("ALCOHOL_SRC_PROVIDERID");

                    b.Property<DateTime?>("AlcoholStopped")
                        .HasColumnName("ALCOHOL_STOPPED")
                        .HasColumnType("datetime");

                    b.Property<string>("AlcoholStoppedApprox")
                        .HasColumnName("ALCOHOL_STOPPED_APPROX")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("BirthGender")
                        .HasColumnName("BIRTH_GENDER");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("DrugFrequency")
                        .HasColumnName("DRUG_FREQUENCY");

                    b.Property<long?>("DrugUse")
                        .HasColumnName("DRUG_USE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<short>("PtcdDnr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTCD_DNR")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ReferralId")
                        .HasColumnName("REFERRAL_ID");

                    b.Property<byte[]>("RxvAlertFactors")
                        .HasColumnName("RXV_ALERT_FACTORS")
                        .HasColumnType("image");

                    b.Property<long>("SexIdentity")
                        .HasColumnName("SEX_IDENTITY");

                    b.Property<long>("SexOrient")
                        .HasColumnName("SEX_ORIENT");

                    b.Property<long>("Smoker")
                        .HasColumnName("SMOKER");

                    b.Property<DateTime?>("SmokerModifiedDate")
                        .HasColumnName("SMOKER_MODIFIED_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("SmokerNd")
                        .HasColumnName("SMOKER_ND");

                    b.Property<long?>("SmokerPy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SMOKER_PY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SmokerSourceid")
                        .HasColumnName("SMOKER_SOURCEID")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<long?>("SmokerSrcProviderid")
                        .HasColumnName("SMOKER_SRC_PROVIDERID");

                    b.Property<DateTime?>("SmokerStopped")
                        .HasColumnName("SMOKER_STOPPED")
                        .HasColumnType("datetime");

                    b.Property<string>("SmokerStoppedApprox")
                        .HasColumnName("SMOKER_STOPPED_APPROX")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("AlcoholSrcProviderid")
                        .HasName("FK_PPPU_ALCOHOL_SRC_PROVIDERID");

                    b.HasIndex("BirthGender")
                        .HasName("PTNT_CLDETAILS_BIRTH_GENDER_FK");

                    b.HasIndex("Createdby")
                        .HasName("PTCD_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PTCD_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PTCD_FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_CLINICALDET");

                    b.HasIndex("PatientId")
                        .HasName("PATIENT_CLINICALDETAILS_FK_P");

                    b.HasIndex("ReferralId")
                        .HasName("PATIENT_CLINICALDETAILS_FK_R");

                    b.HasIndex("SexIdentity")
                        .HasName("PTNT_CLDETAILS_SEX_IDENTITY_FK");

                    b.HasIndex("SexOrient")
                        .HasName("PTNT_CLDETAILS_SEX_ORIENT_FK");

                    b.HasIndex("SmokerSrcProviderid")
                        .HasName("FK_PPPU_SMOKER_SRC_PROVIDERID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PTCD_I_MASTERVERS");

                    b.ToTable("PATIENT_CLINICALDETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientCmsfields", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("CmsCity")
                        .HasColumnName("CMS_CITY")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CmsCountry")
                        .HasColumnName("CMS_COUNTRY")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CmsFamilyname")
                        .HasColumnName("CMS_FAMILYNAME")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("CmsGivenname")
                        .HasColumnName("CMS_GIVENNAME")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("CmsHomephone")
                        .HasColumnName("CMS_HOMEPHONE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CmsLine1")
                        .HasColumnName("CMS_LINE1")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("CmsLine2")
                        .HasColumnName("CMS_LINE2")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("CmsOtherphone")
                        .HasColumnName("CMS_OTHERPHONE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("CmsPatientId")
                        .HasColumnName("CMS_PATIENT_ID");

                    b.Property<long>("CmsRegim")
                        .HasColumnName("CMS_REGIM");

                    b.Property<string>("CmsRelationship")
                        .HasColumnName("CMS_RELATIONSHIP")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CmsSuburb")
                        .HasColumnName("CMS_SUBURB")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("CmsTitle")
                        .HasColumnName("CMS_TITLE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CmsPatientId")
                        .HasName("CMS_FK_USER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_CMSFIELDS");

                    b.ToTable("PATIENT_CMSFIELDS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientDeleteLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtdlAction")
                        .HasColumnName("PTDL_ACTION");

                    b.Property<string>("PtdlComputername")
                        .HasColumnName("PTDL_COMPUTERNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PtdlDatetime")
                        .HasColumnName("PTDL_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("PtdlIp")
                        .HasColumnName("PTDL_IP")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("PtdlPatient")
                        .HasColumnName("PTDL_PATIENT");

                    b.Property<string>("PtdlPatientname")
                        .HasColumnName("PTDL_PATIENTNAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PtdlReason")
                        .HasColumnName("PTDL_REASON")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PtdlUser")
                        .HasColumnName("PTDL_USER");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_DELETE_LOG");

                    b.HasIndex("PtdlPatient")
                        .HasName("FK_PTDL_PATIENT");

                    b.HasIndex("PtdlUser")
                        .HasName("FK_PTDL_USER");

                    b.ToTable("PATIENT_DELETE_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientEmployment", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AddressBuilding")
                        .HasColumnName("ADDRESS_BUILDING")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("AddressCountry")
                        .HasColumnName("ADDRESS_COUNTRY");

                    b.Property<long?>("AddressState")
                        .HasColumnName("ADDRESS_STATE");

                    b.Property<string>("AddressStreet1")
                        .HasColumnName("ADDRESS_STREET1")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("AddressStreet2")
                        .HasColumnName("ADDRESS_STREET2")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("AddressStreet3")
                        .HasColumnName("ADDRESS_STREET3")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("AddressStreetcode")
                        .HasColumnName("ADDRESS_STREETCODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("DATE_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Employer")
                        .HasColumnName("EMPLOYER");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("OccupDescr")
                        .HasColumnName("OCCUP_DESCR")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("Occupation")
                        .HasColumnName("OCCUPATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Patient")
                        .HasColumnName("PATIENT");

                    b.Property<string>("PositionDescr")
                        .HasColumnName("POSITION_DESCR")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("WorkName")
                        .HasColumnName("WORK_NAME")
                        .HasMaxLength(41)
                        .IsUnicode(false);

                    b.Property<string>("WorkPhone")
                        .HasColumnName("WORK_PHONE")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AddressState")
                        .HasName("PATIENT_EMPL_FK_ADDR_STATE");

                    b.HasIndex("Employer")
                        .HasName("PATIENT_EMPL_FK_EMPLOYER");

                    b.HasIndex("Occupation")
                        .HasName("PATIENT_EMPL_FK_OCCUPATION");

                    b.HasIndex("Patient")
                        .HasName("PATIENT_EMPL_FK_PATIENT");

                    b.ToTable("PATIENT_EMPLOYMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patienteombalance", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FnprNumber")
                        .HasColumnName("FNPR_NUMBER");

                    b.Property<long?>("Lasttransoid")
                        .HasColumnName("LASTTRANSOID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("Ptbl30day")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_30DAY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("Ptbl60day")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_60DAY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("Ptbl90day")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_90DAY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("PtblBaddebt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_BADDEBT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("PtblCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTBL_CURRENT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime?>("PtblLastinvoice")
                        .HasColumnName("PTBL_LASTINVOICE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PtblLastpayment")
                        .HasColumnName("PTBL_LASTPAYMENT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PtblLasttrans")
                        .HasColumnName("PTBL_LASTTRANS")
                        .HasColumnType("datetime");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENTEOMBALANCE");

                    b.HasIndex("PtntId", "FnprNumber", "Deletedid")
                        .IsUnique()
                        .HasName("PATIENTEOMBALANCE_I_PTNT");

                    b.ToTable("PATIENTEOMBALANCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientextdr", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("ExprId")
                        .HasColumnName("EXPR_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("TxitType")
                        .HasColumnName("TXIT_TYPE");

                    b.HasKey("Oid");

                    b.HasIndex("ExprId")
                        .HasName("PATIENTEXTDR_FK_EXPR_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENTEXTDR");

                    b.HasIndex("PtntId")
                        .HasName("PATIENTEXTDR_FK_PTNT_ID");

                    b.HasIndex("TxitType")
                        .HasName("FK_PATIENTEXTDR_TEXTITEM");

                    b.HasIndex("PtntId", "ExprId", "TxitType")
                        .IsUnique()
                        .HasName("PATIENTEXTDR_I_PTNT_PPPU_TXT");

                    b.ToTable("PATIENTEXTDR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientFamilyProblems", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PfpAge")
                        .HasColumnName("PFP_AGE");

                    b.Property<DateTime>("PfpDate")
                        .HasColumnName("PFP_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PfpDatePartial")
                        .HasColumnName("PFP_DATE_PARTIAL")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PfpDateTo")
                        .HasColumnName("PFP_DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<string>("PfpDescription")
                        .HasColumnName("PFP_DESCRIPTION")
                        .HasMaxLength(230)
                        .IsUnicode(false);

                    b.Property<long?>("PfpDxId")
                        .HasColumnName("PFP_DX_ID");

                    b.Property<long?>("PfpLifeStageId")
                        .HasColumnName("PFP_LIFE_STAGE_ID");

                    b.Property<long>("PfpPatient")
                        .HasColumnName("PFP_PATIENT");

                    b.Property<long?>("PfpRelatPatient")
                        .HasColumnName("PFP_RELAT_PATIENT");

                    b.Property<long?>("PfpRelationship")
                        .HasColumnName("PFP_RELATIONSHIP");

                    b.Property<long?>("PfpSrcProviderid")
                        .HasColumnName("PFP_SRC_PROVIDERID");

                    b.Property<long?>("PfpStatus")
                        .HasColumnName("PFP_STATUS");

                    b.Property<string>("PfpTreatment")
                        .HasColumnName("PFP_TREATMENT")
                        .HasMaxLength(230)
                        .IsUnicode(false);

                    b.Property<long?>("ProblemNotes")
                        .HasColumnName("PROBLEM_NOTES");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PFP_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PFP_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PFP_FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_FAMILY_PROB");

                    b.HasIndex("PfpDxId")
                        .HasName("FK_PFP_DX_ID");

                    b.HasIndex("PfpLifeStageId")
                        .HasName("FK_PTNTFMPRBL_LFSTG_TO");

                    b.HasIndex("PfpPatient")
                        .HasName("FK_PFP_PATIENT");

                    b.HasIndex("PfpRelatPatient")
                        .HasName("FK_PFP_RELAT_PATIENT");

                    b.HasIndex("PfpRelationship")
                        .HasName("FK_PFP_RELATIONSHIP");

                    b.HasIndex("PfpSrcProviderid")
                        .HasName("FK_PPPU_PFP_SRC_PROVIDERID");

                    b.HasIndex("ProblemNotes")
                        .HasName("FK_PATFP_NOTES");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PFP_I_MASTERVERS");

                    b.ToTable("PATIENT_FAMILY_PROBLEMS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientFilter", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PfDescription")
                        .HasColumnName("PF_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("PfOrder")
                        .HasColumnName("PF_ORDER");

                    b.Property<short>("PfPatientIsDead")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PF_PATIENT_IS_DEAD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PfPatientStatuses")
                        .HasColumnName("PF_PATIENT_STATUSES");

                    b.Property<long?>("PfPatientTypes")
                        .HasColumnName("PF_PATIENT_TYPES");

                    b.Property<long?>("PfProblemConceptId")
                        .HasColumnName("PF_PROBLEM_CONCEPT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_FILTER");

                    b.HasIndex("PfProblemConceptId")
                        .HasName("PF_PROBLEM_CONCEPT_ID_FK");

                    b.ToTable("PATIENT_FILTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientFolder", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FolderCode")
                        .IsRequired()
                        .HasColumnName("FOLDER_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("FolderNotes")
                        .HasColumnName("FOLDER_NOTES")
                        .HasColumnType("image");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PATIENT_FOLDER_I_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PATIENT_FOLDER_I_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PATIENT_FOLDER_I_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("PATIENT_FOLDER_I_OBJ_GUID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PATIENT_FOLDER_I_MASTERVERS");

                    b.HasIndex("FolderCode", "PartitionId", "Version")
                        .IsUnique()
                        .HasName("I_FOLDER_CODE");

                    b.ToTable("PATIENT_FOLDER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientGroupCategory", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PgcDescription")
                        .IsRequired()
                        .HasColumnName("PGC_DESCRIPTION")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("PgcParentCategoryOid")
                        .HasColumnName("PGC_PARENT_CATEGORY_OID");

                    b.Property<long?>("PgcPatientGroupCid")
                        .HasColumnName("PGC_PATIENT_GROUP_CID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("PATIENT_GROUP_CATEGORY_I_OBJ_G");

                    b.ToTable("PATIENT_GROUP_CATEGORY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientGrp", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Descr")
                        .HasColumnName("DESCR")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("GrpFromdate")
                        .HasColumnName("GRP_FROMDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("GrpRange")
                        .HasColumnName("GRP_RANGE");

                    b.Property<DateTime?>("GrpTodate")
                        .HasColumnName("GRP_TODATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_GRP");

                    b.HasIndex("PppuId")
                        .HasName("PATIENT_GRP_FK_PPPU");

                    b.ToTable("PATIENT_GRP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientGrpLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("GrpCid")
                        .HasColumnName("GRP_CID");

                    b.Property<long>("GrpOid")
                        .HasColumnName("GRP_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GrpOid")
                        .HasName("PATIENT_GRP_LINK_FK_GRP");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_GRP_LINK");

                    b.HasIndex("PatientId")
                        .HasName("PATIENT_GRP_LINK_FK_PTNT");

                    b.ToTable("PATIENT_GRP_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientIhi", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("IhiExpired")
                        .HasColumnName("IHI_EXPIRED")
                        .HasColumnType("datetime");

                    b.Property<string>("Ihinumber")
                        .HasColumnName("IHINUMBER")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long>("Ihinumberstatus")
                        .HasColumnName("IHINUMBERSTATUS");

                    b.Property<long>("Ihirecordstatus")
                        .HasColumnName("IHIRECORDSTATUS");

                    b.Property<DateTime>("Lastupdate")
                        .HasColumnName("LASTUPDATE")
                        .HasColumnType("datetime");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Patientid")
                        .HasColumnName("PATIENTID");

                    b.Property<DateTime?>("PcehrLastupdate")
                        .HasColumnName("PCEHR_LASTUPDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PcehrStatus")
                        .HasColumnName("PCEHR_STATUS")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long>("PcehrStatusEnum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCEHR_STATUS_ENUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PcehrWithdrawal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCEHR_WITHDRAWAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PT_IHI_I_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PT_IHI_I_DELETEDBY");

                    b.HasIndex("Lastupdate")
                        .HasName("PTNT_IHI_I_LASTUPDATE");

                    b.HasIndex("MasterId")
                        .HasName("PT_IHI_I_MASTER_ID");

                    b.HasIndex("Patientid")
                        .HasName("FK_PATIENT_IHI_PATIENT");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PT_IHI_I_MASTERVERS");

                    b.ToTable("PATIENT_IHI");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientInfoAudit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ObserverPtntId")
                        .HasColumnName("OBSERVER_PTNT_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PiaudComputername")
                        .HasColumnName("PIAUD_COMPUTERNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PiaudEndDatetime")
                        .HasColumnName("PIAUD_END_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("PiaudIp")
                        .HasColumnName("PIAUD_IP")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<long>("PiaudPppuId")
                        .HasColumnName("PIAUD_PPPU_ID");

                    b.Property<long>("PiaudPtntId")
                        .HasColumnName("PIAUD_PTNT_ID");

                    b.Property<DateTime?>("PiaudStartDatetime")
                        .HasColumnName("PIAUD_START_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("UserText")
                        .HasColumnName("USER_TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_INFO_AUDIT");

                    b.HasIndex("ObserverPtntId")
                        .HasName("FK_PIAUDIT_OBSPTNTID");

                    b.HasIndex("PiaudPppuId")
                        .HasName("FK_PAT_INFO_AUDIT_PPPU");

                    b.HasIndex("PiaudPtntId")
                        .HasName("FK_PAT_INFO_AUDIT_PTNT");

                    b.ToTable("PATIENT_INFO_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientInfoAuditDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("PiadAlertdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PIAD_ALERTDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("PiadAuditId")
                        .HasColumnName("PIAD_AUDIT_ID");

                    b.Property<string>("PiadDescription")
                        .HasColumnName("PIAD_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("PiadType")
                        .HasColumnName("PIAD_TYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_INFO_AUDIT_");

                    b.HasIndex("PiadAuditId")
                        .HasName("FK_PIAD_AUDIT_ID");

                    b.ToTable("PATIENT_INFO_AUDIT_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientmaternity", b =>
                {
                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtmtAbortions")
                        .HasColumnName("PTMT_ABORTIONS");

                    b.Property<string>("PtmtAnnotation")
                        .HasColumnName("PTMT_ANNOTATION")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PtmtBabydob")
                        .HasColumnName("PTMT_BABYDOB")
                        .HasColumnType("datetime");

                    b.Property<long?>("PtmtCdoHistory")
                        .HasColumnName("PTMT_CDO_HISTORY");

                    b.Property<string>("PtmtCycle")
                        .HasColumnName("PTMT_CYCLE")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<short>("PtmtCycleRegular")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTMT_CYCLE_REGULAR")
                        .HasDefaultValueSql("((-1))");

                    b.Property<DateTime?>("PtmtEdd")
                        .HasColumnName("PTMT_EDD")
                        .HasColumnType("datetime");

                    b.Property<long?>("PtmtGravida")
                        .HasColumnName("PTMT_GRAVIDA");

                    b.Property<string>("PtmtHospital")
                        .HasColumnName("PTMT_HOSPITAL")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<short>("PtmtIsFertile")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTMT_IS_FERTILE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtmtLivebirth")
                        .HasColumnName("PTMT_LIVEBIRTH");

                    b.Property<DateTime?>("PtmtLmp")
                        .HasColumnName("PTMT_LMP")
                        .HasColumnType("datetime");

                    b.Property<long?>("PtmtMiscarriages")
                        .HasColumnName("PTMT_MISCARRIAGES");

                    b.Property<long?>("PtmtParity")
                        .HasColumnName("PTMT_PARITY");

                    b.Property<long?>("PtmtPremature")
                        .HasColumnName("PTMT_PREMATURE");

                    b.Property<long?>("PtmtTermdelivery")
                        .HasColumnName("PTMT_TERMDELIVERY");

                    b.Property<long?>("PtmtTerminations")
                        .HasColumnName("PTMT_TERMINATIONS");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("PtntId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENTMATERNITY");

                    b.HasIndex("PtmtCdoHistory")
                        .HasName("PTNTMT_FK_CDO_HISTORY");

                    b.HasIndex("PtntId")
                        .HasName("PTMT_PRIMARY");

                    b.ToTable("PATIENTMATERNITY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMemo", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PmPtntId")
                        .HasColumnName("PM_PTNT_ID");

                    b.Property<byte[]>("PmText")
                        .HasColumnName("PM_TEXT")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PM__FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PM__FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PM__FK_MASTER_ID");

                    b.HasIndex("PmPtntId")
                        .HasName("PATIENT_MEMO_FK_PM_PTNT_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PM__I_MASTERVERS");

                    b.ToTable("PATIENT_MEMO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMentalHealth", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PmhLegalStatus")
                        .HasColumnName("PMH_LEGAL_STATUS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PmhLocationId")
                        .HasColumnName("PMH_LOCATION_ID");

                    b.Property<long>("PmhPatientId")
                        .HasColumnName("PMH_PATIENT_ID");

                    b.Property<long?>("PmhStateId")
                        .HasColumnName("PMH_STATE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_MENTAL_HEAL");

                    b.HasIndex("PmhLocationId")
                        .HasName("FK_PMH_LOCATION_ID");

                    b.HasIndex("PmhPatientId")
                        .IsUnique()
                        .HasName("PATIENT_MENTAL_HEALTH_UI");

                    b.HasIndex("PmhStateId")
                        .HasName("FK_PMH_STATE_ID");

                    b.ToTable("PATIENT_MENTAL_HEALTH");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMentalHealthLegalSt", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PmhlOwner")
                        .HasColumnName("PMHL_OWNER");

                    b.Property<long>("PmhlStatus")
                        .HasColumnName("PMHL_STATUS");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_MENTAL_HEA1");

                    b.HasIndex("PmhlOwner")
                        .HasName("FK_PATIENT_M_H_LEGAL_ST_OWNER");

                    b.HasIndex("PmhlStatus")
                        .HasName("FK_PATIENT_M_H_LEGAL_ST_STATUS");

                    b.ToTable("PATIENT_MENTAL_HEALTH_LEGAL_ST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMentalHealthLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PmhlAddReviews")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PMHL_ADD_REVIEWS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PmhlEventId")
                        .HasColumnName("PMHL_EVENT_ID");

                    b.Property<string>("PmhlLegalStatus")
                        .HasColumnName("PMHL_LEGAL_STATUS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PmhlLocationId")
                        .HasColumnName("PMHL_LOCATION_ID");

                    b.Property<long?>("PmhlStateId")
                        .HasColumnName("PMHL_STATE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_MENTAL_HEA2");

                    b.HasIndex("PmhlEventId")
                        .IsUnique()
                        .HasName("PATIENT_MENTAL_HEALTH_LOG_UI");

                    b.HasIndex("PmhlLocationId")
                        .HasName("FK_PMHL_LOCATION_ID");

                    b.HasIndex("PmhlStateId")
                        .HasName("FK_PMHL_STATE_ID");

                    b.ToTable("PATIENT_MENTAL_HEALTH_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientmerge", b =>
                {
                    b.Property<long>("MasterId")
                        .HasColumnName("MASTER_ID");

                    b.Property<long>("DuplicateId")
                        .HasColumnName("DUPLICATE_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("MasterId", "DuplicateId");

                    b.HasIndex("DuplicateId")
                        .HasName("FK_PTNTMERGE_DUPLICATE");

                    b.HasIndex("MasterId")
                        .HasName("FK_PTNTMERGE_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENTMERGE");

                    b.ToTable("PATIENTMERGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMergeDetail", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("DataCid")
                        .HasColumnName("DATA_CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Ids")
                        .HasColumnName("IDS")
                        .HasColumnType("image");

                    b.Property<long>("MergeLogId")
                        .HasColumnName("MERGE_LOG_ID");

                    b.Property<long>("MergeRefId")
                        .HasColumnName("MERGE_REF_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("OldValue")
                        .HasColumnName("OLD_VALUE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("Tags")
                        .HasColumnName("TAGS")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("MergeLogId")
                        .HasName("PTNT_MERGE_DTL_FK_MERGELOG_ID");

                    b.HasIndex("MergeRefId")
                        .HasName("PTNT_MERGE_DTL_FK_MERGEREF_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_MERGE_DETAI");

                    b.ToTable("PATIENT_MERGE_DETAIL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMergeLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Masterid")
                        .HasColumnName("MASTERID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Subid")
                        .HasColumnName("SUBID");

                    b.HasKey("Oid");

                    b.HasIndex("CreatedBy")
                        .HasName("PTNT_MERGE_LOG_FK_CREATED_BY");

                    b.HasIndex("Masterid")
                        .HasName("PATIENT_MERGE_LOG_FK_MASTERID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_MERGE_LOG");

                    b.HasIndex("Subid")
                        .HasName("PATIENT_MERGE_LOG_FK_SUBID");

                    b.HasIndex("Masterid", "CreatedOn")
                        .HasName("PTNT_MERGE_LOG_IND1");

                    b.ToTable("PATIENT_MERGE_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMergeRef", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnName("FIELD_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnName("TABLE_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_MERGE_REF");

                    b.ToTable("PATIENT_MERGE_REF");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientPassword", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EncryptedPassword")
                        .HasColumnName("ENCRYPTED_PASSWORD")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PAT_PASS_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PAT_PASS_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PAT_PASS_FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_PASSWORD");

                    b.HasIndex("PatientId")
                        .HasName("FK_PATIENT_PASSWORD_PATIENT");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PAT_PASS_I_MASTERVERS");

                    b.ToTable("PATIENT_PASSWORD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientPayDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PpdDetail2")
                        .HasColumnName("PPD_DETAIL2")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("PpdDetail3")
                        .HasColumnName("PPD_DETAIL3")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long>("PpdPaymentType")
                        .HasColumnName("PPD_PAYMENT_TYPE");

                    b.Property<long>("PpdPtntId")
                        .HasColumnName("PPD_PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PPD__FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PPD__FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PPD__FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_PAY_DETAILS");

                    b.HasIndex("PpdPtntId")
                        .HasName("PPD_FK_PTNT_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PPD__I_MASTERVERS");

                    b.HasIndex("PpdPtntId", "PpdPaymentType", "Deleted", "PartitionId")
                        .IsUnique()
                        .HasName("PPD_I_PTNT_TYPE");

                    b.ToTable("PATIENT_PAY_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientproblem", b =>
                {
                    b.Property<long>("PaprId")
                        .HasColumnName("PAPR_ID");

                    b.Property<string>("ApproxIndicationDate")
                        .HasColumnName("APPROX_INDICATION_DATE")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<DateTime?>("ClosedDatetime")
                        .HasColumnName("CLOSED_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("Closedby")
                        .HasColumnName("CLOSEDBY");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ExprId")
                        .HasColumnName("EXPR_ID");

                    b.Property<long?>("ExternalEntityId")
                        .HasColumnName("EXTERNAL_ENTITY_ID");

                    b.Property<long>("FromMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FROM_MODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("IndicationDate")
                        .HasColumnName("INDICATION_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("IndicationDescr")
                        .HasColumnName("INDICATION_DESCR")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("IndicationId")
                        .HasColumnName("INDICATION_ID");

                    b.Property<long>("IndicationMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INDICATION_MODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsApproxIndicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_APPROX_INDICATION_DATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LifeStageFromId")
                        .HasColumnName("LIFE_STAGE_FROM_ID");

                    b.Property<long?>("LifeStageIndicationId")
                        .HasColumnName("LIFE_STAGE_INDICATION_ID");

                    b.Property<long?>("LifeStageToId")
                        .HasColumnName("LIFE_STAGE_TO_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("PaprAlert")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_ALERT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PaprAlertorganisation")
                        .HasColumnName("PAPR_ALERTORGANISATION");

                    b.Property<string>("PaprAlerts")
                        .HasColumnName("PAPR_ALERTS")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("PaprAlertscope")
                        .HasColumnName("PAPR_ALERTSCOPE");

                    b.Property<long?>("PaprAnatomyId")
                        .HasColumnName("PAPR_ANATOMY_ID");

                    b.Property<string>("PaprApproxdatetext")
                        .HasColumnName("PAPR_APPROXDATETEXT")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("PaprApproxtodatetext")
                        .HasColumnName("PAPR_APPROXTODATETEXT")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<short>("PaprBlockcnotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_BLOCKCNOTES")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PaprBlockpatacess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_BLOCKPATACESS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PaprCasealertcolor")
                        .HasColumnName("PAPR_CASEALERTCOLOR");

                    b.Property<long?>("PaprCasealerttype")
                        .HasColumnName("PAPR_CASEALERTTYPE");

                    b.Property<long?>("PaprCoMorbidTo")
                        .HasColumnName("PAPR_CO_MORBID_TO");

                    b.Property<byte[]>("PaprComment2Blob")
                        .HasColumnName("PAPR_COMMENT2_BLOB")
                        .HasColumnType("image");

                    b.Property<byte[]>("PaprCommentBlob")
                        .HasColumnName("PAPR_COMMENT_BLOB")
                        .HasColumnType("image");

                    b.Property<long?>("PaprConfidenceid")
                        .HasColumnName("PAPR_CONFIDENCEID");

                    b.Property<DateTime>("PaprDate")
                        .HasColumnName("PAPR_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PaprDatetimeadded")
                        .HasColumnName("PAPR_DATETIMEADDED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PaprDatetimealtered")
                        .HasColumnName("PAPR_DATETIMEALTERED")
                        .HasColumnType("datetime");

                    b.Property<long?>("PaprDeletedid")
                        .HasColumnName("PAPR_DELETEDID");

                    b.Property<string>("PaprDxdescription")
                        .HasColumnName("PAPR_DXDESCRIPTION")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("PaprDxid")
                        .HasColumnName("PAPR_DXID");

                    b.Property<long?>("PaprDxnature")
                        .HasColumnName("PAPR_DXNATURE");

                    b.Property<string>("PaprExtprovname")
                        .HasColumnName("PAPR_EXTPROVNAME")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<string>("PaprHospitalname")
                        .HasColumnName("PAPR_HOSPITALNAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PaprInsyncDisStrmCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_INSYNC_DIS_STRM_CODE")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long>("PaprInsyncValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_INSYNC_VALID")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("PaprIsapproxdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_ISAPPROXDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PaprIsapproxtodate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_ISAPPROXTODATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PaprLocationId")
                        .HasColumnName("PAPR_LOCATION_ID");

                    b.Property<string>("PaprNature")
                        .HasColumnName("PAPR_NATURE")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<long?>("PaprOnsetage")
                        .HasColumnName("PAPR_ONSETAGE");

                    b.Property<long?>("PaprOrderWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_ORDER_WEIGHT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PaprOutcomeid")
                        .HasColumnName("PAPR_OUTCOMEID");

                    b.Property<long>("PaprPppuidadded")
                        .HasColumnName("PAPR_PPPUIDADDED");

                    b.Property<long?>("PaprPppuidaltered")
                        .HasColumnName("PAPR_PPPUIDALTERED");

                    b.Property<long?>("PaprPresentationId")
                        .HasColumnName("PAPR_PRESENTATION_ID");

                    b.Property<short>("PaprPrincipal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_PRINCIPAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PaprPrivacyid")
                        .HasColumnName("PAPR_PRIVACYID");

                    b.Property<long?>("PaprPrivateToPos")
                        .HasColumnName("PAPR_PRIVATE_TO_POS");

                    b.Property<long?>("PaprProcedureType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAPR_PROCEDURE_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PaprProviderId")
                        .HasColumnName("PAPR_PROVIDER_ID");

                    b.Property<long?>("PaprServiceId")
                        .HasColumnName("PAPR_SERVICE_ID");

                    b.Property<long?>("PaprSeverityId")
                        .HasColumnName("PAPR_SEVERITY_ID");

                    b.Property<string>("PaprSourceref")
                        .HasColumnName("PAPR_SOURCEREF")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("PaprStatusid")
                        .HasColumnName("PAPR_STATUSID");

                    b.Property<DateTime?>("PaprTodate")
                        .HasColumnName("PAPR_TODATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("PaprTypeid")
                        .HasColumnName("PAPR_TYPEID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ReferralId")
                        .HasColumnName("REFERRAL_ID");

                    b.Property<long?>("RoleOid")
                        .HasColumnName("ROLE_OID");

                    b.Property<long>("ToMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TO_MODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PaprId");

                    b.HasIndex("CaseId")
                        .HasName("PATPROB_CASE_ID_FK_BCASE");

                    b.HasIndex("Closedby")
                        .HasName("FK_PPR_CLOSEDBY");

                    b.HasIndex("Code")
                        .HasName("I_PATIENTPROBLEM_CODE");

                    b.HasIndex("Createdby")
                        .HasName("PATIENTPROBLEM_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PATIENTPROBLEM_FK_DELETEDBY");

                    b.HasIndex("ExprId")
                        .HasName("PAPR_FOREIGN_EXPR_ID");

                    b.HasIndex("ExternalEntityId")
                        .HasName("FK_PTNTPRBL_EXTERNAL_ENTITY_ID");

                    b.HasIndex("IndicationId")
                        .HasName("FK_PROBLEM_INDICATION");

                    b.HasIndex("LifeStageFromId")
                        .HasName("FK_PTNTPRBL_LFSTG_FROM");

                    b.HasIndex("LifeStageIndicationId")
                        .HasName("FK_PTNTPRBL_LFSTG_IND");

                    b.HasIndex("LifeStageToId")
                        .HasName("FK_PTNTPRBL_LFSTG_TO");

                    b.HasIndex("PaprAlertorganisation")
                        .HasName("FK_PATIENTPROBLEM_ORGSTRUCTU");

                    b.HasIndex("PaprAnatomyId")
                        .HasName("PAPR_ANATOMY_ID_FK");

                    b.HasIndex("PaprCasealerttype")
                        .HasName("PAPR_IND_CASEALERT_FK");

                    b.HasIndex("PaprCoMorbidTo")
                        .HasName("FK_PAPR_CO_MORBID_TO");

                    b.HasIndex("PaprDxid")
                        .HasName("PAPR_FOREIGN_DX_ID");

                    b.HasIndex("PaprDxnature")
                        .HasName("PATPROB_FK_DXNATURE");

                    b.HasIndex("PaprLocationId")
                        .HasName("PAPR_LOCATION_ID_FK");

                    b.HasIndex("PaprOutcomeid")
                        .HasName("PATPROB_OUTCOMEID_FK_SHORTCO");

                    b.HasIndex("PaprPppuidadded")
                        .HasName("PAPR_FOREIGN_PPPUID_ADDED");

                    b.HasIndex("PaprPppuidaltered")
                        .HasName("PAPR_FOREIGN_PPPUID_ALTERED");

                    b.HasIndex("PaprPrivateToPos")
                        .HasName("PATIENTPROBLEM_FK_PRV_POS");

                    b.HasIndex("PaprProviderId")
                        .HasName("PAPR_FOREIGN_PROVIDER_ID");

                    b.HasIndex("PaprServiceId")
                        .HasName("FK_PATIENTPROBLEM_SERVICE");

                    b.HasIndex("PaprSourceref")
                        .HasName("I_PAPR_SOURCEREF");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("PATIENTPROBLEM_FK_PPPU");

                    b.HasIndex("PtntId")
                        .HasName("PAPR_FOREIGN_PTNT_ID");

                    b.HasIndex("ReferralId")
                        .HasName("FK_PROBLEM_REFERRAL");

                    b.HasIndex("RoleOid")
                        .HasName("PAPR_FK_ROLE_OID");

                    b.HasIndex("ObjGuid", "PaprDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("I_PATIENTPROBLEM_GUID")
                        .HasFilter("[PAPR_DELETEDID] IS NOT NULL");

                    b.ToTable("PATIENTPROBLEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallaction", b =>
                {
                    b.Property<long>("PracId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAC_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ExternalEntityId")
                        .HasColumnName("EXTERNAL_ENTITY_ID");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PracActivityobjid")
                        .HasColumnName("PRAC_ACTIVITYOBJID");

                    b.Property<long>("PracActivitytype")
                        .HasColumnName("PRAC_ACTIVITYTYPE");

                    b.Property<long?>("PracActprocind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAC_ACTPROCIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PracAltReasonExactmatch")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAC_ALT_REASON_EXACTMATCH")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PracBlobdataId")
                        .HasColumnName("PRAC_BLOBDATA_ID");

                    b.Property<long?>("PracCareactionid")
                        .HasColumnName("PRAC_CAREACTIONID");

                    b.Property<DateTime?>("PracChanged")
                        .HasColumnName("PRAC_CHANGED")
                        .HasColumnType("datetime");

                    b.Property<string>("PracCode")
                        .HasColumnName("PRAC_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("PracComment")
                        .HasColumnName("PRAC_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PracDate")
                        .HasColumnName("PRAC_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PracDateconcluded")
                        .HasColumnName("PRAC_DATECONCLUDED")
                        .HasColumnType("datetime");

                    b.Property<string>("PracDescription")
                        .HasColumnName("PRAC_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PracExplanationid")
                        .HasColumnName("PRAC_EXPLANATIONID");

                    b.Property<long?>("PracExtprovId")
                        .HasColumnName("PRAC_EXTPROV_ID");

                    b.Property<long?>("PracFormCid")
                        .HasColumnName("PRAC_FORM_CID");

                    b.Property<long?>("PracFormOid")
                        .HasColumnName("PRAC_FORM_OID");

                    b.Property<long?>("PracFormid")
                        .HasColumnName("PRAC_FORMID");

                    b.Property<short>("PracFunded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAC_FUNDED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PracGivenbyAdhoc")
                        .HasColumnName("PRAC_GIVENBY_ADHOC")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long?>("PracGivenbyExtprovId")
                        .HasColumnName("PRAC_GIVENBY_EXTPROV_ID");

                    b.Property<long?>("PracGivenbyId")
                        .HasColumnName("PRAC_GIVENBY_ID");

                    b.Property<short>("PracIshistorysummary")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAC_ISHISTORYSUMMARY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PracLetterId")
                        .HasColumnName("PRAC_LETTER_ID");

                    b.Property<byte[]>("PracMacro")
                        .HasColumnName("PRAC_MACRO")
                        .HasColumnType("image");

                    b.Property<long?>("PracMacrotimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAC_MACROTIMEOUT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PracOrderindex")
                        .HasColumnName("PRAC_ORDERINDEX");

                    b.Property<long?>("PracPppuId")
                        .HasColumnName("PRAC_PPPU_ID");

                    b.Property<long>("PracPrvsId")
                        .HasColumnName("PRAC_PRVS_ID");

                    b.Property<long?>("PracRecommendationId")
                        .HasColumnName("PRAC_RECOMMENDATION_ID");

                    b.Property<long?>("PracRunmacroprocind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAC_RUNMACROPROCIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PracStatus")
                        .HasColumnName("PRAC_STATUS");

                    b.Property<long?>("PracTermprocind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAC_TERMPROCIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PracTyptempinclfont")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAC_TYPTEMPINCLFONT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PracId");

                    b.HasIndex("Createdby")
                        .HasName("PATRECALLACTION_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PATRECALLACTION_FK_DELETEDBY");

                    b.HasIndex("ExternalEntityId")
                        .HasName("FK_PRAC_EXTERNAL_ENTITY_ID");

                    b.HasIndex("MasterId")
                        .HasName("PATIENTRECALLACTION_FK_MASTER");

                    b.HasIndex("PracActivityobjid")
                        .HasName("PRAC_I_ACT_OBJID");

                    b.HasIndex("PracBlobdataId")
                        .HasName("FK_PATIENTACTION_BLOBDATA");

                    b.HasIndex("PracCareactionid")
                        .HasName("FK_PATIENTACTION_CAREACTION");

                    b.HasIndex("PracExplanationid")
                        .HasName("FK_ACTION_EXPLANATIONID");

                    b.HasIndex("PracExtprovId")
                        .HasName("FK_EXTPROV_ID");

                    b.HasIndex("PracFormOid")
                        .HasName("FK_PRAC_FORM_OID");

                    b.HasIndex("PracFormid")
                        .HasName("FK_PRAC_FORM_TRANS_ID");

                    b.HasIndex("PracGivenbyExtprovId")
                        .HasName("FK_GIVENBY_EXTPROV_ID");

                    b.HasIndex("PracGivenbyId")
                        .HasName("FK_PRAC_GIVENBY_ID");

                    b.HasIndex("PracLetterId")
                        .HasName("FK_PRAC_LETTER_ID");

                    b.HasIndex("PracPppuId")
                        .HasName("FK_PRAC_PPPU_ID");

                    b.HasIndex("PracPrvsId")
                        .HasName("PTNTRECALLACTIONFOREIGNKEY1");

                    b.HasIndex("PracRecommendationId")
                        .HasName("PRAC_RECOMMENDATION_ID_FK");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PATRECALLACTION_I_MASTERVERS");

                    b.ToTable("PATIENTRECALLACTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallactivity", b =>
                {
                    b.Property<long>("PratId")
                        .HasColumnName("PRAT_ID");

                    b.Property<DateTime>("Changed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PratComment")
                        .HasColumnName("PRAT_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PratDate")
                        .HasColumnName("PRAT_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("PratPersonid")
                        .HasColumnName("PRAT_PERSONID");

                    b.Property<long>("PratPrvsId")
                        .HasColumnName("PRAT_PRVS_ID");

                    b.Property<long>("PratType")
                        .HasColumnName("PRAT_TYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PratId");

                    b.HasIndex("Createdby")
                        .HasName("PATIENTRECALLACT_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PATIENTRECALLACT_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PATIENTRECALLACTIVIT_FK_MASTER");

                    b.HasIndex("PratPersonid")
                        .HasName("FK_PRATIVITY_PPPU_ID");

                    b.HasIndex("PratPrvsId")
                        .HasName("FK_PRACTIVITY_PRVS_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PATIENTRECALLACT_I_MASTERVERS");

                    b.ToTable("PATIENTRECALLACTIVITY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallassessment", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("Assessdate")
                        .HasColumnName("ASSESSDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("Assessevent")
                        .HasColumnName("ASSESSEVENT");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENTRECALLASSESS");

                    b.HasIndex("PatientId")
                        .HasName("RRAS_PROPS_FK_PATIENT");

                    b.ToTable("PATIENTRECALLASSESSMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallplan", b =>
                {
                    b.Property<long>("PrplId")
                        .HasColumnName("PRPL_ID");

                    b.Property<DateTime>("Changed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ContactOid")
                        .HasColumnName("CONTACT_OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long>("PrplApprovalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRPL_APPROVAL_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrplCaseid")
                        .HasColumnName("PRPL_CASEID");

                    b.Property<DateTime?>("PrplCloseddate")
                        .HasColumnName("PRPL_CLOSEDDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PrplCode")
                        .IsRequired()
                        .HasColumnName("PRPL_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("PrplComment")
                        .HasColumnName("PRPL_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("PrplDescription")
                        .HasColumnName("PRPL_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("PrplEnrolmentdate")
                        .HasColumnName("PRPL_ENROLMENTDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("PrplExplanationid")
                        .HasColumnName("PRPL_EXPLANATIONID");

                    b.Property<byte[]>("PrplObjectivesB")
                        .HasColumnName("PRPL_OBJECTIVES_B")
                        .HasColumnType("image");

                    b.Property<short>("PrplOptOnOff")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRPL_OPT_ON_OFF")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrplPppuId")
                        .HasColumnName("PRPL_PPPU_ID");

                    b.Property<long?>("PrplPppuPos")
                        .HasColumnName("PRPL_PPPU_POS");

                    b.Property<long?>("PrplPrivacyroleid")
                        .HasColumnName("PRPL_PRIVACYROLEID");

                    b.Property<long>("PrplPtntId")
                        .HasColumnName("PRPL_PTNT_ID");

                    b.Property<long?>("PrplRcplId")
                        .HasColumnName("PRPL_RCPL_ID");

                    b.Property<DateTime?>("PrplReferencedate")
                        .HasColumnName("PRPL_REFERENCEDATE")
                        .HasColumnType("datetime");

                    b.Property<long>("PrplRepetitionIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRPL_REPETITION_INDEX")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PrplStatus")
                        .HasColumnName("PRPL_STATUS");

                    b.Property<long?>("PrplStreamid")
                        .HasColumnName("PRPL_STREAMID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PrplId");

                    b.HasIndex("ContactOid")
                        .HasName("FK_PRPL_CONTACT_OID");

                    b.HasIndex("Createdby")
                        .HasName("PATRECALLPLAN_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PATRECALLPLAN_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PATIENTRECALLPLAN_FK_MASTER");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("PATIENTRECALLPLAN_FK_PPPU");

                    b.HasIndex("PrplCaseid")
                        .HasName("FK_PLAN_CASEID");

                    b.HasIndex("PrplExplanationid")
                        .HasName("FK_PLAN_EXPLANATIONID");

                    b.HasIndex("PrplPppuId")
                        .HasName("PTNTRECALLPLANFOREIGNKEY3");

                    b.HasIndex("PrplPppuPos")
                        .HasName("FK_PRV_PPPU_POS");

                    b.HasIndex("PrplPrivacyroleid")
                        .HasName("FK_PRV_PRIVACYROLEID");

                    b.HasIndex("PrplPtntId")
                        .HasName("PATIENTRECALLPLAN_FK_PRPL_PT");

                    b.HasIndex("PrplRcplId")
                        .HasName("FK_PATIENTRECALLPLAN_RCPL_ID");

                    b.HasIndex("PrplStreamid")
                        .HasName("PTNRECALLPLAN_FK_PRPL_STREAM");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PATRECALLPLAN_I_MASTERVERS");

                    b.ToTable("PATIENTRECALLPLAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallservice", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Isbillable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISBILLABLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Isforceontonextinvoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISFORCEONTONEXTINVOICE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Ismaster")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISMASTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Notes")
                        .HasColumnName("NOTES")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<double?>("Quantity")
                        .HasColumnName("QUANTITY");

                    b.Property<long?>("Rate")
                        .HasColumnName("RATE");

                    b.Property<long?>("Ratetype")
                        .HasColumnName("RATETYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Serviceid")
                        .HasColumnName("SERVICEID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PATRECALLSERVICE_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PATRECALLSERVICE_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PATIENTRECALLSERVICE_FK_MASTER");

                    b.HasIndex("PosId")
                        .HasName("FK_PTNTRECALLPOSID");

                    b.HasIndex("ProviderId")
                        .HasName("FK_PTNTRECALLPROVIDERID");

                    b.HasIndex("Rate")
                        .HasName("FK_PTNT_RSERVICE_RATE");

                    b.HasIndex("Serviceid")
                        .HasName("FK_PTNTRECALLSERVID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PATRECALLSERVICE_I_MASTERVERS");

                    b.ToTable("PATIENTRECALLSERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallvisit", b =>
                {
                    b.Property<long>("PrvsId")
                        .HasColumnName("PRVS_ID");

                    b.Property<long?>("CarevisitId")
                        .HasColumnName("CAREVISIT_ID");

                    b.Property<DateTime>("Changed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ContactOid")
                        .HasColumnName("CONTACT_OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ExternalEntityId")
                        .HasColumnName("EXTERNAL_ENTITY_ID");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long?>("PrvsAdjustfrequency")
                        .HasColumnName("PRVS_ADJUSTFREQUENCY");

                    b.Property<long?>("PrvsAdjustunit")
                        .HasColumnName("PRVS_ADJUSTUNIT");

                    b.Property<long>("PrvsApprovalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_APPROVAL_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PrvsApproxConclDate")
                        .HasColumnName("PRVS_APPROX_CONCL_DATE")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("PrvsCaseId")
                        .HasColumnName("PRVS_CASE_ID");

                    b.Property<string>("PrvsClash")
                        .HasColumnName("PRVS_CLASH")
                        .HasColumnType("char(1)");

                    b.Property<string>("PrvsComment")
                        .HasColumnName("PRVS_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long?>("PrvsContactId")
                        .HasColumnName("PRVS_CONTACT_ID");

                    b.Property<DateTime?>("PrvsDate")
                        .HasColumnName("PRVS_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PrvsDatecompleted")
                        .HasColumnName("PRVS_DATECOMPLETED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PrvsDateconcluded")
                        .HasColumnName("PRVS_DATECONCLUDED")
                        .HasColumnType("datetime");

                    b.Property<short>("PrvsDatematchesplan")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_DATEMATCHESPLAN")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PrvsDateseen")
                        .HasColumnName("PRVS_DATESEEN")
                        .HasColumnType("datetime");

                    b.Property<string>("PrvsDescription")
                        .HasColumnName("PRVS_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PrvsExplanationid")
                        .HasColumnName("PRVS_EXPLANATIONID");

                    b.Property<long?>("PrvsExternalVisitType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_EXTERNAL_VISIT_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrvsExtproviderId")
                        .HasColumnName("PRVS_EXTPROVIDER_ID");

                    b.Property<short>("PrvsForceontoinvoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_FORCEONTOINVOICE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PrvsHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_HOLD")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PrvsIsadjustfrequency")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_ISADJUSTFREQUENCY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PrvsIscompleteformflag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_ISCOMPLETEFORMFLAG")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PrvsIscreatedwithrefdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_ISCREATEDWITHREFDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PrvsIsdateseen")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_ISDATESEEN")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PrvsIshistorysummary")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_ISHISTORYSUMMARY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PrvsIsnextvisitdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_ISNEXTVISITDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrvsMentalEvent")
                        .HasColumnName("PRVS_MENTAL_EVENT");

                    b.Property<short>("PrvsMoveduedate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_MOVEDUEDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PrvsNextvisitdate")
                        .HasColumnName("PRVS_NEXTVISITDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PrvsNextvisitnote")
                        .HasColumnName("PRVS_NEXTVISITNOTE")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long?>("PrvsOtherPatientId")
                        .HasColumnName("PRVS_OTHER_PATIENT_ID");

                    b.Property<long?>("PrvsParentId")
                        .HasColumnName("PRVS_PARENT_ID");

                    b.Property<string>("PrvsPerformedbyAdhoc")
                        .HasColumnName("PRVS_PERFORMEDBY_ADHOC")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long?>("PrvsPerformedbyExtprovid")
                        .HasColumnName("PRVS_PERFORMEDBY_EXTPROVID");

                    b.Property<long?>("PrvsPerformedbyId")
                        .HasColumnName("PRVS_PERFORMEDBY_ID");

                    b.Property<long?>("PrvsPerformedbyPatientId")
                        .HasColumnName("PRVS_PERFORMEDBY_PATIENT_ID");

                    b.Property<long?>("PrvsPerformedbyType")
                        .HasColumnName("PRVS_PERFORMEDBY_TYPE");

                    b.Property<long?>("PrvsPppuId")
                        .HasColumnName("PRVS_PPPU_ID");

                    b.Property<long?>("PrvsPppuPosId")
                        .HasColumnName("PRVS_PPPU_POS_ID");

                    b.Property<long?>("PrvsPriorityid")
                        .HasColumnName("PRVS_PRIORITYID");

                    b.Property<long?>("PrvsPrivacyroleId")
                        .HasColumnName("PRVS_PRIVACYROLE_ID");

                    b.Property<long?>("PrvsProvidertype")
                        .HasColumnName("PRVS_PROVIDERTYPE");

                    b.Property<long>("PrvsPrplId")
                        .HasColumnName("PRVS_PRPL_ID");

                    b.Property<long?>("PrvsRecallobjectiveId")
                        .HasColumnName("PRVS_RECALLOBJECTIVE_ID");

                    b.Property<long?>("PrvsRecallrecurrenceId")
                        .HasColumnName("PRVS_RECALLRECURRENCE_ID");

                    b.Property<short>("PrvsRepeatmade")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRVS_REPEATMADE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrvsShcdVisittypeId")
                        .HasColumnName("PRVS_SHCD_VISITTYPE_ID");

                    b.Property<string>("PrvsSourceref")
                        .HasColumnName("PRVS_SOURCEREF")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("PrvsSpecialtyconceptId")
                        .HasColumnName("PRVS_SPECIALTYCONCEPT_ID");

                    b.Property<long?>("PrvsSpecialtytypeconceptId")
                        .HasColumnName("PRVS_SPECIALTYTYPECONCEPT_ID");

                    b.Property<long?>("PrvsSrvcId")
                        .HasColumnName("PRVS_SRVC_ID");

                    b.Property<long>("PrvsStatus")
                        .HasColumnName("PRVS_STATUS");

                    b.Property<long?>("PrvsVisittemplateId")
                        .HasColumnName("PRVS_VISITTEMPLATE_ID");

                    b.Property<long?>("PrvsWindows")
                        .HasColumnName("PRVS_WINDOWS");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdCompleteformid")
                        .HasColumnName("SHCD_COMPLETEFORMID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PrvsId");

                    b.HasIndex("CarevisitId")
                        .HasName("PTNTRECALLPLAN_FK_RCPV");

                    b.HasIndex("ContactOid")
                        .HasName("FK_PRVS_CONTACT_OID");

                    b.HasIndex("Createdby")
                        .HasName("PATRECALLVISIT_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PATRECALLVISIT_FK_DELETEDBY");

                    b.HasIndex("ExternalEntityId")
                        .HasName("FK_PRVS_EXTERNAL_ENTITY_ID");

                    b.HasIndex("MasterId")
                        .HasName("PATIENTRECALLVISIT_FK_MASTER");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("PATIENTRECALLVISIT_FK_PPPU");

                    b.HasIndex("PrvsCaseId")
                        .HasName("PRVS_FK_CASE_ID");

                    b.HasIndex("PrvsContactId")
                        .HasName("FK_PRVS_CONTACT_ID");

                    b.HasIndex("PrvsDate")
                        .HasName("I_PATIENTRECALLVISIT_PRVS_DATE");

                    b.HasIndex("PrvsExplanationid")
                        .HasName("FK_VISIT_EXPLANATIONID");

                    b.HasIndex("PrvsExtproviderId")
                        .HasName("FK_PRVS_EXTPROVIDER_ID");

                    b.HasIndex("PrvsMentalEvent")
                        .HasName("FK_PRVS_MENTAL_EVENT");

                    b.HasIndex("PrvsOtherPatientId")
                        .HasName("FK_PRVS_OTHER_PATIENT");

                    b.HasIndex("PrvsParentId")
                        .HasName("FK_PRVS_PARENT_ID");

                    b.HasIndex("PrvsPerformedbyExtprovid")
                        .HasName("FK_PRVS_PERFORMBY_EXTPROVID");

                    b.HasIndex("PrvsPerformedbyId")
                        .HasName("FK_PRVS_PERFORMEDBY_ID");

                    b.HasIndex("PrvsPerformedbyPatientId")
                        .HasName("FK_PRVS_PERFORMEDBY_PATIENT");

                    b.HasIndex("PrvsPppuId")
                        .HasName("PTNTRECALLVISITFOREIGNKEY2");

                    b.HasIndex("PrvsPppuPosId")
                        .HasName("FK_PRVS_PPPU_POS_ID");

                    b.HasIndex("PrvsPriorityid")
                        .HasName("FK_RECVISPRIOR_SHCD_ID");

                    b.HasIndex("PrvsPrivacyroleId")
                        .HasName("FK_PRVS_PRIVACYROLE_ID");

                    b.HasIndex("PrvsPrplId")
                        .HasName("PTNTRECALLVISITFOREIGNKEY1");

                    b.HasIndex("PrvsRecallobjectiveId")
                        .HasName("FK_PRVS_RECALLOBJECTIVE_ID");

                    b.HasIndex("PrvsRecallrecurrenceId")
                        .HasName("FK_PRVS_RECALLRECURRENCE_ID");

                    b.HasIndex("PrvsShcdVisittypeId")
                        .HasName("FK_PRVS_SHCD_VISITTYPE_ID");

                    b.HasIndex("PrvsSpecialtyconceptId")
                        .HasName("FK_PRVS_SPEC_CONCEPT_ID");

                    b.HasIndex("PrvsSpecialtytypeconceptId")
                        .HasName("FK_PRVS_SPEC_TYPECONCEPT_ID");

                    b.HasIndex("PrvsSrvcId")
                        .HasName("PTNTRECALLVISITFOREIGNKEY3");

                    b.HasIndex("PrvsVisittemplateId")
                        .HasName("FK_PRVS_VISITTEMPLATE_ID");

                    b.HasIndex("ShcdCompleteformid")
                        .HasName("FK_PRV_SHCD_FORMID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PATRECALLVISIT_I_MASTERVERS");

                    b.ToTable("PATIENTRECALLVISIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientRole", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PrName")
                        .IsRequired()
                        .HasColumnName("PR_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("PrName")
                        .IsUnique()
                        .HasName("PATIENT_ROLE_NAME");

                    b.ToTable("PATIENT_ROLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientRoleAction", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PraPatientRoleId")
                        .HasColumnName("PRA_PATIENT_ROLE_ID");

                    b.Property<long>("PraShortcodeId")
                        .HasColumnName("PRA_SHORTCODE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("PraPatientRoleId")
                        .HasName("FK_PRA_PATIENT_ROLE_ID");

                    b.HasIndex("PraShortcodeId")
                        .HasName("FK_PRA_SHORTCODE_ID");

                    b.ToTable("PATIENT_ROLE_ACTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientRoleLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PrlPatientId")
                        .HasColumnName("PRL_PATIENT_ID");

                    b.Property<long>("PrlPatientRoleId")
                        .HasColumnName("PRL_PATIENT_ROLE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("PrlPatientId")
                        .HasName("FK_PRL_PATIENT_ID");

                    b.HasIndex("PrlPatientRoleId")
                        .HasName("FK_PRL_PATIENT_ROLE_ID");

                    b.ToTable("PATIENT_ROLE_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientRxInteractionPrefs", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("InteractionLevel")
                        .HasColumnName("INTERACTION_LEVEL");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("PATIENT_RX_INTERACTION_PREFS_I");

                    b.HasIndex("PatientId")
                        .HasName("FK_PATRXINTERPREFSPATIENTID");

                    b.HasIndex("ProviderId")
                        .HasName("FK_PATRXINTERPREFSPROVIDERID");

                    b.ToTable("PATIENT_RX_INTERACTION_PREFS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientRxSchedulesDue", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ApntId")
                        .HasColumnName("APNT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DueDate")
                        .HasColumnName("DUE_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .HasColumnName("OBJ_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ApntId")
                        .HasName("FK_PTNT_RX_SCHDLS_DUE_APNT");

                    b.HasIndex("PatientId")
                        .IsUnique()
                        .HasName("I_PATIENT_RX_SCHEDULES_DUE");

                    b.ToTable("PATIENT_RX_SCHEDULES_DUE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientSharingConsent", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtscCaseId")
                        .HasColumnName("PTSC_CASE_ID");

                    b.Property<short>("PtscMaskedItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTSC_MASKED_ITEMS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtscPasswordEntered")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTSC_PASSWORD_ENTERED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtscPatientId")
                        .HasColumnName("PTSC_PATIENT_ID");

                    b.Property<long>("PtscPosId")
                        .HasColumnName("PTSC_POS_ID");

                    b.Property<short>("PtscReciprocal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTSC_RECIPROCAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("PtscRescind")
                        .HasColumnName("PTSC_RESCIND")
                        .HasColumnType("datetime");

                    b.Property<string>("PtscSharedItems")
                        .IsRequired()
                        .HasColumnName("PTSC_SHARED_ITEMS")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long?>("PtscSignatureBlobId")
                        .HasColumnName("PTSC_SIGNATURE_BLOB_ID");

                    b.Property<DateTime>("PtscValidFrom")
                        .HasColumnName("PTSC_VALID_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PtscValidTo")
                        .HasColumnName("PTSC_VALID_TO")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PT_SHAR_CONS_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PT_SHAR_CONS_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PT_SHAR_CONS_FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_SHARING_CON");

                    b.HasIndex("PtscCaseId")
                        .HasName("PTSC_FK_CASE_ID");

                    b.HasIndex("PtscPatientId")
                        .HasName("FK_PATIENTCONSENT_PATIENT");

                    b.HasIndex("PtscPosId")
                        .HasName("PTSC_FK_PATCONSENT_POS");

                    b.HasIndex("PtscSignatureBlobId")
                        .HasName("PTSC_FK_SIGNATURE_BLOB_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PT_SHAR_CONS_I_MASTERVERS");

                    b.ToTable("PATIENT_SHARING_CONSENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientSms", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("DeliveryResult")
                        .HasColumnName("DELIVERY_RESULT");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EncounterId")
                        .HasColumnName("ENCOUNTER_ID");

                    b.Property<string>("ErrorMessage")
                        .HasColumnName("ERROR_MESSAGE")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("ExternalKey")
                        .HasColumnName("EXTERNAL_KEY")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("PHONE_NUMBER")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SmsServiceOid")
                        .HasColumnName("SMS_SERVICE_OID");

                    b.Property<byte[]>("Text")
                        .IsRequired()
                        .HasColumnName("TEXT")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("EncounterId")
                        .HasName("FK_PATIENT_SMS_ENCOUNTER_ID");

                    b.HasIndex("PatientId")
                        .HasName("PATIENT_SMS_FK_PATIENT_ID");

                    b.HasIndex("PosId")
                        .HasName("PATIENT_SMS_FK_POS_ID");

                    b.HasIndex("PppuId")
                        .HasName("PATIENT_SMS_FK_PPPU_ID");

                    b.HasIndex("SmsServiceOid")
                        .HasName("PATIENT_SMS_FK_SMS_SVC_OID");

                    b.ToTable("PATIENT_SMS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientSupplier", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PsAlternateSupplierId")
                        .HasColumnName("PS_ALTERNATE_SUPPLIER_ID");

                    b.Property<long>("PsPatientId")
                        .HasColumnName("PS_PATIENT_ID");

                    b.Property<long?>("PsPreferredSupplierId")
                        .HasColumnName("PS_PREFERRED_SUPPLIER_ID");

                    b.Property<long>("PsSupplierType")
                        .HasColumnName("PS_SUPPLIER_TYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_SUPPLIER");

                    b.HasIndex("PsAlternateSupplierId")
                        .HasName("PS_ALTERNATE_SUPPLIER_ID_FK");

                    b.HasIndex("PsPatientId")
                        .HasName("PS_PATIENT_ID_FK");

                    b.HasIndex("PsPreferredSupplierId")
                        .HasName("PS_PREFERRED_SUPPLIER_ID_FK");

                    b.ToTable("PATIENT_SUPPLIER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patienttext", b =>
                {
                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PttxText")
                        .HasColumnName("PTTX_TEXT")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("PtntId");

                    b.HasIndex("ModifiedBy")
                        .HasName("FK_PTNT_TEXT_PPPU_MODIFIED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENTTEXT");

                    b.HasIndex("PtntId")
                        .HasName("PTTX_PATIENT");

                    b.ToTable("PATIENTTEXT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientTouch", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PtAcknowledged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PT_ACKNOWLEDGED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("PtCheckeddate")
                        .HasColumnName("PT_CHECKEDDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PtFirstseendate")
                        .HasColumnName("PT_FIRSTSEENDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PtGonedate")
                        .HasColumnName("PT_GONEDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PtHerecomputer")
                        .HasColumnName("PT_HERECOMPUTER")
                        .HasColumnType("char(15)");

                    b.Property<DateTime>("PtHeredate")
                        .HasColumnName("PT_HEREDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PtLastactivitydate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PT_LASTACTIVITYDATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("PtLastarrivaldate")
                        .HasColumnName("PT_LASTARRIVALDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PtLastconfirmeddate")
                        .HasColumnName("PT_LASTCONFIRMEDDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PtLastseendate")
                        .HasColumnName("PT_LASTSEENDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PtWeblastvisitdate")
                        .HasColumnName("PT_WEBLASTVISITDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PATIENT_TOUCH_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PATIENT_TOUCH_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("FK_PATIENT_TOUCH_MASTER_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_TOUCH");

                    b.HasIndex("PtLastconfirmeddate")
                        .HasName("PTNTTOUCH_I_LSTCONFIRMED");

                    b.HasIndex("PtLastseendate")
                        .HasName("PTNTTOUCH_I_LSTSEEN");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PATIENT_TOUCH_I_MASTERVERS");

                    b.ToTable("PATIENT_TOUCH");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientTravel", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("TravelList")
                        .HasColumnName("TRAVEL_LIST")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_TRAVEL");

                    b.HasIndex("PatientId")
                        .HasName("PATIENT_TRAVEL_FK_PATIENT_ID");

                    b.ToTable("PATIENT_TRAVEL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientVerification", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ApntId")
                        .HasColumnName("APNT_ID");

                    b.Property<byte[]>("DateLastEyeExam")
                        .HasColumnName("DATE_LAST_EYE_EXAM")
                        .HasColumnType("image");

                    b.Property<DateTime?>("DateServiceEligibility")
                        .HasColumnName("DATE_SERVICE_ELIGIBILITY")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateVerification")
                        .HasColumnName("DATE_VERIFICATION")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("HasRestrictions")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HAS_RESTRICTIONS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsEligible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_ELIGIBLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OutNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OUT_NUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RequestOid")
                        .HasColumnName("REQUEST_OID");

                    b.Property<byte[]>("ResponseCode")
                        .HasColumnName("RESPONSE_CODE")
                        .HasColumnType("image");

                    b.Property<byte[]>("ResponseMessage")
                        .HasColumnName("RESPONSE_MESSAGE")
                        .HasColumnType("image");

                    b.Property<long>("ResultCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RESULT_CODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SeqNumber")
                        .HasColumnName("SEQ_NUMBER")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ApntId")
                        .HasName("FK_PATVER_APNT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_VERIFICATIO");

                    b.HasIndex("OutNum")
                        .HasName("PATVER_I_OUT_NUM");

                    b.HasIndex("PtntId")
                        .HasName("FK_PATVER_PTNT_ID");

                    b.HasIndex("RequestOid")
                        .HasName("FK_PATVER_REQUEST");

                    b.HasIndex("PtntId", "ApntId", "DateServiceEligibility")
                        .HasName("I_PATIENT_VERIFICATION");

                    b.ToTable("PATIENT_VERIFICATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientVerificationRequest", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RefObjectCid")
                        .HasColumnName("REF_OBJECT_CID");

                    b.Property<long?>("RefObjectOid")
                        .HasColumnName("REF_OBJECT_OID");

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RequestRef")
                        .IsRequired()
                        .HasColumnName("REQUEST_REF")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Oid");

                    b.HasIndex("CreatedBy")
                        .HasName("FK_PATVERREQ_CREATED");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PATIENT_VERIFICATI1");

                    b.HasIndex("RefObjectCid", "RefObjectOid")
                        .HasName("I_PATVERREQ_REFOBJ");

                    b.ToTable("PATIENT_VERIFICATION_REQUEST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PayerCasetemplate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PayerId")
                        .HasColumnName("PAYER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("TemplateId")
                        .HasColumnName("TEMPLATE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("PayerId")
                        .HasName("PAYER_CASETEMPLATE_FK_PAYER");

                    b.HasIndex("TemplateId")
                        .HasName("PAYER_CASETEMPLATE_FK_TEMPLATE");

                    b.ToTable("PAYER_CASETEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PayerDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("MasterId")
                        .HasColumnName("MASTER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PdEclipseCapability")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_ECLIPSE_CAPABILITY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PdEclipseRemittance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_ECLIPSE_REMITTANCE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PdInPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_IN_PATIENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PdInptntAgreements")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_INPTNT_AGREEMENTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PdInptntBenefits")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_INPTNT_BENEFITS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PdInptntClaims")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_INPTNT_CLAIMS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PdInptntFund")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_INPTNT_FUND")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PdInptntSchemes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_INPTNT_SCHEMES")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PdInvoiceFormat")
                        .HasColumnName("PD_INVOICE_FORMAT");

                    b.Property<string>("PdInvoiceLetterPath")
                        .HasColumnName("PD_INVOICE_LETTER_PATH")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("PdInvoicePrintMacro")
                        .HasColumnName("PD_INVOICE_PRINT_MACRO")
                        .HasColumnType("image");

                    b.Property<long?>("PdInvoiceTemplateId")
                        .HasColumnName("PD_INVOICE_TEMPLATE_ID");

                    b.Property<decimal>("PdMaxGap")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_MAX_GAP")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<short>("PdPatientVerif")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_PATIENT_VERIF")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PdPayerCardNeverExpires")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_PAYER_CARD_NEVER_EXPIRES")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PdPayerId")
                        .HasColumnName("PD_PAYER_ID");

                    b.Property<long?>("PdServiceMacro")
                        .HasColumnName("PD_SERVICE_MACRO");

                    b.Property<short>("PdVeteranVerif")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PD_VETERAN_VERIF")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("MasterId")
                        .HasName("FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PAYER_DETAILS");

                    b.HasIndex("PdInvoiceTemplateId")
                        .HasName("FK_PAYERDTL_INVTMPL");

                    b.HasIndex("PdPayerId")
                        .HasName("FK_PATIENT_ID");

                    b.HasIndex("PdServiceMacro")
                        .HasName("FK_PAYER_DET_SERVICE_MACRO");

                    b.HasIndex("PdPayerId", "Deletedid")
                        .IsUnique()
                        .HasName("IND_PNTN_DID");

                    b.ToTable("PAYER_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PayerSchedule", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("Addfileidtofilename")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ADDFILEIDTOFILENAME")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("ClaimFormat")
                        .HasColumnName("CLAIM_FORMAT");

                    b.Property<string>("ClaimReceipt")
                        .HasColumnName("CLAIM_RECEIPT")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("ClaimTransfer")
                        .HasColumnName("CLAIM_TRANSFER")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Electronic")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ELECTRONIC")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMAIL")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EncryptKey")
                        .HasColumnName("ENCRYPT_KEY")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("EncryptPass")
                        .HasColumnName("ENCRYPT_PASS")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("EobArrivedDir")
                        .HasColumnName("EOB_ARRIVED_DIR")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long?>("EobFormat")
                        .HasColumnName("EOB_FORMAT");

                    b.Property<string>("EobProcessedDir")
                        .HasColumnName("EOB_PROCESSED_DIR")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("Filenameextension")
                        .HasColumnName("FILENAMEEXTENSION")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Filenameprefix")
                        .HasColumnName("FILENAMEPREFIX")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("OutputDirectory")
                        .HasColumnName("OUTPUT_DIRECTORY")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("PaperClaimFormat")
                        .HasColumnName("PAPER_CLAIM_FORMAT");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PayerId")
                        .HasColumnName("PAYER_ID");

                    b.Property<short>("PrintInvoices")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRINT_INVOICES")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("Signature")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SIGNATURE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Summary")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SUMMARY")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PAYER_SCHEDULE");

                    b.HasIndex("PayerId")
                        .HasName("PAYER_SCHEDULE_FK_PAYER");

                    b.ToTable("PAYER_SCHEDULE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PcehrDocument", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AuthorId")
                        .HasColumnName("AUTHOR_ID")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<short>("AuthorIsLocal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUTHOR_IS_LOCAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AuthorName")
                        .HasColumnName("AUTHOR_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("AuthorOrgId")
                        .HasColumnName("AUTHOR_ORG_ID")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("AuthorOrgName")
                        .HasColumnName("AUTHOR_ORG_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("AuthorRole")
                        .HasColumnName("AUTHOR_ROLE")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("AuthorSpeciality")
                        .HasColumnName("AUTHOR_SPECIALITY")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateDoc")
                        .HasColumnName("DATE_DOC")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDownload")
                        .HasColumnName("DATE_DOWNLOAD")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateService")
                        .HasColumnName("DATE_SERVICE")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteReason")
                        .HasColumnName("DELETE_REASON")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<string>("DocHash")
                        .HasColumnName("DOC_HASH")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("DocName")
                        .HasColumnName("DOC_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("DocType")
                        .HasColumnName("DOC_TYPE")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("DocUniqueId")
                        .HasColumnName("DOC_UNIQUE_ID")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IsDeletedFromPcehr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_DELETED_FROM_PCEHR")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NoSelectReasons")
                        .HasColumnName("NO_SELECT_REASONS")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .HasColumnName("OBJ_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RepositoryUniqueId")
                        .HasColumnName("REPOSITORY_UNIQUE_ID")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("ServiceType")
                        .HasColumnName("SERVICE_TYPE")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Deletedby")
                        .HasName("FK_PCEHR_DOCUMENT_DELETEDBY");

                    b.HasIndex("PtntId")
                        .HasName("FK_PCEHR_DOCUMENT_PATIENT");

                    b.ToTable("PCEHR_DOCUMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PcehrFile", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("FileContent")
                        .HasColumnName("FILE_CONTENT")
                        .HasColumnType("image");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("FILE_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .HasColumnName("OBJ_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PcehrDocId")
                        .HasColumnName("PCEHR_DOC_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("PcehrDocId")
                        .HasName("FK_PCEHR_FILE_DOC_ID");

                    b.ToTable("PCEHR_FILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Phphistory", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<float?>("Coinsurance")
                        .HasColumnName("COINSURANCE");

                    b.Property<long?>("CoinsuranceType")
                        .HasColumnName("COINSURANCE_TYPE");

                    b.Property<long?>("CopayType")
                        .HasColumnName("COPAY_TYPE");

                    b.Property<decimal>("CopayValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COPAY_VALUE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<short>("Discontinued")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DISCONTINUED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Expiry")
                        .HasColumnName("EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Organization")
                        .HasColumnName("ORGANIZATION");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PayerId")
                        .HasColumnName("PAYER_ID");

                    b.Property<long?>("PhpPeriod")
                        .HasColumnName("PHP_PERIOD");

                    b.Property<long?>("PhpPlantype")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PHP_PLANTYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PlanId")
                        .HasColumnName("PLAN_ID");

                    b.Property<string>("PlanName")
                        .HasColumnName("PLAN_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PlanNumber")
                        .HasColumnName("PLAN_NUMBER")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<long?>("Rate")
                        .HasColumnName("RATE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Reference")
                        .HasColumnName("REFERENCE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<short>("SecondaryPayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SECONDARY_PAYER")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Started")
                        .HasColumnName("STARTED")
                        .HasColumnType("datetime");

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Code")
                        .HasName("PHPHISTORY_I_CODE");

                    b.HasIndex("Createdby")
                        .HasName("PHPH_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PHPH_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PHPHISTORY");

                    b.HasIndex("Organization")
                        .HasName("PHPH_FK_ORGANIZATION");

                    b.HasIndex("PayerId")
                        .HasName("FK_PHPHISTORY_PAYER_ID");

                    b.HasIndex("PlanId")
                        .HasName("FK_PHPHISTORY_PLAN_ID");

                    b.HasIndex("PtntId")
                        .HasName("FK_PHPHISTORY_PTNT_ID");

                    b.HasIndex("Rate")
                        .HasName("FK_PHPHISTORY_RATE");

                    b.ToTable("PHPHISTORY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Plugins", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("PlCreated")
                        .HasColumnName("PL_CREATED")
                        .HasColumnType("datetime");

                    b.Property<long>("PlDataId")
                        .HasColumnName("PL_DATA_ID");

                    b.Property<DateTime?>("PlFileModified")
                        .HasColumnName("PL_FILE_MODIFIED")
                        .HasColumnType("datetime");

                    b.Property<string>("PlFileName")
                        .HasColumnName("PL_FILE_NAME")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long>("PlType")
                        .HasColumnName("PL_TYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PLUGINS");

                    b.HasIndex("PlDataId")
                        .HasName("FK_BLOBS_DATA_ID");

                    b.ToTable("PLUGINS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketDiseaseLimit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PpdlDiseasegroup")
                        .HasColumnName("PPDL_DISEASEGROUP");

                    b.Property<long?>("PpdlUser")
                        .HasColumnName("PPDL_USER");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POCKET_DISEASE_LIMI");

                    b.HasIndex("PpdlDiseasegroup")
                        .HasName("FK_PPDLIMIT_DGROUP");

                    b.HasIndex("PpdlUser")
                        .HasName("FK_PPDLIMIT_PPPU");

                    b.ToTable("POCKET_DISEASE_LIMIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketDiseases", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PpcdDisease")
                        .HasColumnName("PPCD_DISEASE");

                    b.Property<long?>("PpcdPocket")
                        .HasColumnName("PPCD_POCKET");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POCKET_DISEASES");

                    b.HasIndex("PpcdDisease")
                        .HasName("FK_PCKTD_DISEASECODE");

                    b.HasIndex("PpcdPocket")
                        .HasName("FK_PCKTD_POCKETS");

                    b.ToTable("POCKET_DISEASES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketPatGrp", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("Descr")
                        .HasColumnName("DESCR")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POCKET_PAT_GRP");

                    b.HasIndex("PppuId")
                        .HasName("PATIENT_PAT_GRP_FK_PPPU");

                    b.ToTable("POCKET_PAT_GRP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketPatLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("GrpCid")
                        .HasColumnName("GRP_CID");

                    b.Property<long>("GrpOid")
                        .HasColumnName("GRP_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GrpOid")
                        .HasName("FK_PPCPAT_GRP_LINK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POCKET_PAT_LINK");

                    b.HasIndex("PatientId")
                        .HasName("FK_POCKET_PAT_LINK");

                    b.ToTable("POCKET_PAT_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketPcObj", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("Decision")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DECISION")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnName("DECISION_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("ObjCid")
                        .HasColumnName("OBJ_CID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ObjOid")
                        .HasColumnName("OBJ_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SyncCid")
                        .HasColumnName("SYNC_CID");

                    b.Property<long>("SyncOid")
                        .HasColumnName("SYNC_OID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POCKET_PC_OBJ");

                    b.HasIndex("SyncOid")
                        .HasName("FK_POCKET_PC_SYNC");

                    b.ToTable("POCKET_PC_OBJ");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketPcPtnt", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("Decision")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DECISION")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnName("DECISION_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EncStart")
                        .HasColumnName("ENC_START")
                        .HasColumnType("datetime");

                    b.Property<short>("Isabolish")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISABOLISH")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("Pocketid")
                        .HasColumnName("POCKETID");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Status")
                        .HasColumnName("STATUS");

                    b.Property<DateTime?>("Syncdate")
                        .HasColumnName("SYNCDATE")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POCKET_PC_PTNT");

                    b.HasIndex("PatientId")
                        .HasName("POCKET_PC_PTNT_FK_PTNT");

                    b.HasIndex("Pocketid")
                        .HasName("FK_POCKET_PC_PTNT");

                    b.HasIndex("PppuId")
                        .HasName("POCKET_PC_PTNT_FK_PPPU");

                    b.ToTable("POCKET_PC_PTNT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pockets", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PctDescription")
                        .HasColumnName("PCT_DESCRIPTION")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PctId")
                        .HasColumnName("PCT_ID")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short>("PctLimitDisease")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCT_LIMIT_DISEASE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PctLimitService")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PCT_LIMIT_SERVICE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PctOlddate")
                        .HasColumnName("PCT_OLDDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PctSessiondate")
                        .HasColumnName("PCT_SESSIONDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PctSyncdate")
                        .HasColumnName("PCT_SYNCDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POCKETS");

                    b.ToTable("POCKETS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketServiceLimit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PpslService")
                        .HasColumnName("PPSL_SERVICE");

                    b.Property<long?>("PpslUser")
                        .HasColumnName("PPSL_USER");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POCKET_SERVICE_LIMI");

                    b.HasIndex("PpslService")
                        .HasName("FK_PPSLIMIT_DGROUP");

                    b.HasIndex("PpslUser")
                        .HasName("FK_PPSLIMIT_PPPU");

                    b.ToTable("POCKET_SERVICE_LIMIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketServices", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PpcsPocket")
                        .HasColumnName("PPCS_POCKET");

                    b.Property<long?>("PpcsService")
                        .HasColumnName("PPCS_SERVICE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POCKET_SERVICES");

                    b.HasIndex("PpcsPocket")
                        .HasName("FK_PCKS_POCKETS");

                    b.HasIndex("PpcsService")
                        .HasName("FK_PCKS_SERVICE");

                    b.ToTable("POCKET_SERVICES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PostCodes", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Addr2")
                        .HasColumnName("ADDR2")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<string>("Addr3")
                        .HasColumnName("ADDR3")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("Country")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COUNTRY")
                        .HasDefaultValueSql("((554))");

                    b.Property<long?>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("GeoLatitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GEO_LATITUDE")
                        .HasDefaultValueSql("((90.0))");

                    b.Property<double>("GeoLongitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GEO_LONGITUDE")
                        .HasDefaultValueSql("((90.0))");

                    b.Property<string>("GeoMeshblock")
                        .HasColumnName("GEO_MESHBLOCK")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("GeoX")
                        .HasColumnName("GEO_X")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("GeoY")
                        .HasColumnName("GEO_Y")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("OldPostcode")
                        .HasColumnName("OLD_POSTCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnName("POSTCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("State")
                        .HasColumnName("STATE");

                    b.Property<string>("StreetName")
                        .HasColumnName("STREET_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Addr2")
                        .HasName("POST_CODES_I_ADDR2");

                    b.HasIndex("Addr3")
                        .HasName("POST_CODES_I_ADDR3");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_POST_CODES");

                    b.HasIndex("Postcode")
                        .HasName("POST_CODES_I_POSTCODE");

                    b.HasIndex("State")
                        .HasName("FK_POSTCODES_STATE");

                    b.HasIndex("State", "Oid")
                        .HasName("I_POSTCODES_STATEOID");

                    b.ToTable("POST_CODES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppu", b =>
                {
                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODE")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("DateLastPassChange")
                        .HasColumnName("DATE_LAST_PASS_CHANGE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateLastQuery")
                        .HasColumnName("DATE_LAST_QUERY")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateLastResult")
                        .HasColumnName("DATE_LAST_RESULT")
                        .HasColumnType("datetime");

                    b.Property<long?>("DefaultSupplierIdLaboratory")
                        .HasColumnName("DEFAULT_SUPPLIER_ID_LABORATORY");

                    b.Property<long?>("DefaultSupplierIdPharmacy")
                        .HasColumnName("DEFAULT_SUPPLIER_ID_PHARMACY");

                    b.Property<long?>("DefaultSupplierIdRadiology")
                        .HasColumnName("DEFAULT_SUPPLIER_ID_RADIOLOGY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("ForcePassChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FORCE_PASS_CHANGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrgPayerId")
                        .HasColumnName("ORG_PAYER_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PasswordExpiryDate")
                        .HasColumnName("PASSWORD_EXPIRY_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PayeeId")
                        .HasColumnName("PAYEE_ID")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("PppuAccessProfileId")
                        .HasColumnName("PPPU_ACCESS_PROFILE_ID");

                    b.Property<short>("PppuAccessionAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_ACCESSION_ACCESS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuAltEserviceId")
                        .HasColumnName("PPPU_ALT_ESERVICE_ID");

                    b.Property<long?>("PppuApntSlipId")
                        .HasColumnName("PPPU_APNT_SLIP_ID");

                    b.Property<long?>("PppuAppLocationId")
                        .HasColumnName("PPPU_APP_LOCATION_ID");

                    b.Property<DateTime?>("PppuAppt1stmonday")
                        .HasColumnName("PPPU_APPT1STMONDAY")
                        .HasColumnType("datetime");

                    b.Property<long?>("PppuApptcycleweeks")
                        .HasColumnName("PPPU_APPTCYCLEWEEKS");

                    b.Property<string>("PppuAspDeliveryId")
                        .HasColumnName("PPPU_ASP_DELIVERY_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("PppuAssociatesDetailId")
                        .HasColumnName("PPPU_ASSOCIATES_DETAIL_ID");

                    b.Property<short>("PppuAutocase")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_AUTOCASE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuAutolockMin")
                        .HasColumnName("PPPU_AUTOLOCK_MIN");

                    b.Property<short>("PppuAutolocking")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_AUTOLOCKING")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuBkgndimageHide")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_BKGNDIMAGE_HIDE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuBkgndimagestyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_BKGNDIMAGESTYLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuBkgndimagetransp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_BKGNDIMAGETRANSP")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PppuBuildingpostal")
                        .HasColumnName("PPPU_BUILDINGPOSTAL")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PppuBuildingstreet")
                        .HasColumnName("PPPU_BUILDINGSTREET")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("PppuCategory")
                        .HasColumnName("PPPU_CATEGORY");

                    b.Property<string>("PppuCellphone")
                        .HasColumnName("PPPU_CELLPHONE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("PppuCode")
                        .IsRequired()
                        .HasColumnName("PPPU_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long?>("PppuCoverRule")
                        .HasColumnName("PPPU_COVER_RULE");

                    b.Property<long?>("PppuCoverSplit")
                        .HasColumnName("PPPU_COVER_SPLIT");

                    b.Property<DateTime?>("PppuDateadded")
                        .HasColumnName("PPPU_DATEADDED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PppuDatechanged")
                        .HasColumnName("PPPU_DATECHANGED")
                        .HasColumnType("datetime");

                    b.Property<long>("PppuDeletedid")
                        .HasColumnName("PPPU_DELETEDID");

                    b.Property<DateTime?>("PppuDob")
                        .HasColumnName("PPPU_DOB")
                        .HasColumnType("datetime");

                    b.Property<string>("PppuEdiaddress")
                        .HasColumnName("PPPU_EDIADDRESS")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PppuEdikey")
                        .HasColumnName("PPPU_EDIKEY")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PppuEdiprivatekey")
                        .HasColumnName("PPPU_EDIPRIVATEKEY")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PppuEdipublickey")
                        .HasColumnName("PPPU_EDIPUBLICKEY")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PppuEdireferralsSubpath")
                        .HasColumnName("PPPU_EDIREFERRALS_SUBPATH")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("PppuEformatAlsoPrint")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_EFORMAT_ALSO_PRINT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuEformatId")
                        .HasColumnName("PPPU_EFORMAT_ID");

                    b.Property<string>("PppuEmail")
                        .HasColumnName("PPPU_EMAIL")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PppuExternalorgcode")
                        .HasColumnName("PPPU_EXTERNALORGCODE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PppuExternalorgcodeset")
                        .HasColumnName("PPPU_EXTERNALORGCODESET")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PppuExternalorgname")
                        .HasColumnName("PPPU_EXTERNALORGNAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long?>("PppuExtprovcustomrep")
                        .HasColumnName("PPPU_EXTPROVCUSTOMREP");

                    b.Property<long?>("PppuExtprovcustomrepmacro")
                        .HasColumnName("PPPU_EXTPROVCUSTOMREPMACRO");

                    b.Property<string>("PppuFax")
                        .HasColumnName("PPPU_FAX")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("PppuFrontPageId")
                        .HasColumnName("PPPU_FRONT_PAGE_ID");

                    b.Property<string>("PppuFullname")
                        .IsRequired()
                        .HasColumnName("PPPU_FULLNAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<byte[]>("PppuGeneralComments")
                        .HasColumnName("PPPU_GENERAL_COMMENTS")
                        .HasColumnType("image");

                    b.Property<string>("PppuGeneralCommentsPlain")
                        .HasColumnName("PPPU_GENERAL_COMMENTS_PLAIN")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("PppuGeoDecile")
                        .HasColumnName("PPPU_GEO_DECILE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PppuGeoDhb")
                        .HasColumnName("PPPU_GEO_DHB")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("PppuGeoDomicileCode")
                        .HasColumnName("PPPU_GEO_DOMICILE_CODE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PppuGeoDomicileDescription")
                        .HasColumnName("PPPU_GEO_DOMICILE_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<double?>("PppuGeoLatitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_GEO_LATITUDE")
                        .HasDefaultValueSql("((90.0))");

                    b.Property<double?>("PppuGeoLongitude")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_GEO_LONGITUDE")
                        .HasDefaultValueSql("((90.0))");

                    b.Property<string>("PppuGeoMeshblock")
                        .HasColumnName("PPPU_GEO_MESHBLOCK")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PppuGeoQuintile")
                        .HasColumnName("PPPU_GEO_QUINTILE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long>("PppuGeoStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_GEO_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PppuGeoTlaName")
                        .HasColumnName("PPPU_GEO_TLA_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PppuGeoUncertaintycode")
                        .HasColumnName("PPPU_GEO_UNCERTAINTYCODE")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("PppuGeoX")
                        .HasColumnName("PPPU_GEO_X")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PppuGeoY")
                        .HasColumnName("PPPU_GEO_Y")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short>("PppuGroupbasedpreference")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_GROUPBASEDPREFERENCE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PppuHpiI")
                        .HasColumnName("PPPU_HPI_I")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("PppuHpiO")
                        .HasColumnName("PPPU_HPI_O")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long>("PppuIdBasePos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_ID_BASE_POS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuIdLocum")
                        .HasColumnName("PPPU_ID_LOCUM");

                    b.Property<long>("PppuInvoiceMedicareType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_INVOICE_MEDICARE_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsDominant")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_IS_DOMINANT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsLmo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_IS_LMO")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsOmo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_IS_OMO")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsRo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_IS_RO")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsexternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_ISEXTERNAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsimported")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_ISIMPORTED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsltremail")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_ISLTREMAIL")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsltrfax")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_ISLTRFAX")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsltrmessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_ISLTRMESSAGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuIsltrprint")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_ISLTRPRINT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PppuJobtitle")
                        .HasColumnName("PPPU_JOBTITLE")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("PppuLastname")
                        .HasColumnName("PPPU_LASTNAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PppuLocationcertificate")
                        .HasColumnName("PPPU_LOCATIONCERTIFICATE")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<short>("PppuLocumactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_LOCUMACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PppuLocumchanged")
                        .HasColumnName("PPPU_LOCUMCHANGED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PppuLocumexpirydate")
                        .HasColumnName("PPPU_LOCUMEXPIRYDATE")
                        .HasColumnType("datetime");

                    b.Property<short>("PppuMobileDeviceAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_MOBILE_DEVICE_ACCESS")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PppuNextagedate")
                        .HasColumnName("PPPU_NEXTAGEDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PppuNpicode")
                        .HasColumnName("PPPU_NPICODE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("PppuOhipPassword")
                        .HasColumnName("PPPU_OHIP_PASSWORD")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<short>("PppuOhipProvider")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_OHIP_PROVIDER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PppuOhipUserid")
                        .HasColumnName("PPPU_OHIP_USERID")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("PppuOnthegoId")
                        .HasColumnName("PPPU_ONTHEGO_ID");

                    b.Property<long?>("PppuOrgLevel")
                        .HasColumnName("PPPU_ORG_LEVEL");

                    b.Property<short>("PppuOtherInCefmenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_OTHER_IN_CEFMENU")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PppuPager")
                        .HasColumnName("PPPU_PAGER")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("PppuPaycode")
                        .HasColumnName("PPPU_PAYCODE");

                    b.Property<string>("PppuPersonalUrl")
                        .HasColumnName("PPPU_PERSONAL_URL")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PppuPhone1")
                        .HasColumnName("PPPU_PHONE1")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("PppuPhone2")
                        .HasColumnName("PPPU_PHONE2")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("PppuPlacename")
                        .HasColumnName("PPPU_PLACENAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("PppuPosSettingId")
                        .HasColumnName("PPPU_POS_SETTING_ID");

                    b.Property<long?>("PppuPostCountry")
                        .HasColumnName("PPPU_POST_COUNTRY");

                    b.Property<string>("PppuPostal1")
                        .HasColumnName("PPPU_POSTAL1")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PppuPostal2")
                        .HasColumnName("PPPU_POSTAL2")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PppuPostal3")
                        .HasColumnName("PPPU_POSTAL3")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PppuPostal4")
                        .HasColumnName("PPPU_POSTAL4")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PppuPostalcode")
                        .HasColumnName("PPPU_POSTALCODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("PppuPostalstate")
                        .HasColumnName("PPPU_POSTALSTATE");

                    b.Property<long?>("PppuPreferprecedence")
                        .HasColumnName("PPPU_PREFERPRECEDENCE");

                    b.Property<long>("PppuPreferredCommMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_PREFERRED_COMM_METHOD")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PppuPrefname")
                        .HasColumnName("PPPU_PREFNAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("PppuPrincipalgroup")
                        .HasColumnName("PPPU_PRINCIPALGROUP");

                    b.Property<long?>("PppuProvidergroup")
                        .HasColumnName("PPPU_PROVIDERGROUP");

                    b.Property<string>("PppuQualifications")
                        .HasColumnName("PPPU_QUALIFICATIONS")
                        .HasMaxLength(47)
                        .IsUnicode(false);

                    b.Property<long?>("PppuRateShcdId")
                        .HasColumnName("PPPU_RATE_SHCD_ID");

                    b.Property<string>("PppuReferencecode")
                        .HasColumnName("PPPU_REFERENCECODE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("PppuReferenceid")
                        .HasColumnName("PPPU_REFERENCEID");

                    b.Property<long?>("PppuReferencesystem")
                        .HasColumnName("PPPU_REFERENCESYSTEM");

                    b.Property<long?>("PppuReferralEserviceId")
                        .HasColumnName("PPPU_REFERRAL_ESERVICE_ID");

                    b.Property<string>("PppuSex")
                        .HasColumnName("PPPU_SEX")
                        .HasColumnType("char(1)");

                    b.Property<long?>("PppuSignatureId")
                        .HasColumnName("PPPU_SIGNATURE_ID");

                    b.Property<long>("PppuSignatureScale")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_SIGNATURE_SCALE")
                        .HasDefaultValueSql("((100))");

                    b.Property<long?>("PppuSpecialty")
                        .HasColumnName("PPPU_SPECIALTY");

                    b.Property<long?>("PppuSpecialtyconceptid")
                        .HasColumnName("PPPU_SPECIALTYCONCEPTID");

                    b.Property<long?>("PppuStatus")
                        .HasColumnName("PPPU_STATUS");

                    b.Property<string>("PppuStreet1")
                        .HasColumnName("PPPU_STREET1")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PppuStreet2")
                        .HasColumnName("PPPU_STREET2")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PppuStreet3")
                        .HasColumnName("PPPU_STREET3")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PppuStreet4")
                        .HasColumnName("PPPU_STREET4")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("PppuStreetCountry")
                        .HasColumnName("PPPU_STREET_COUNTRY");

                    b.Property<string>("PppuStreetcode")
                        .HasColumnName("PPPU_STREETCODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("PppuStreetstate")
                        .HasColumnName("PPPU_STREETSTATE");

                    b.Property<long?>("PppuSupervisor")
                        .HasColumnName("PPPU_SUPERVISOR");

                    b.Property<short>("PppuSxcopayExtractOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_SXCOPAY_EXTRACT_ON")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuSxcopayStartTrnsid")
                        .HasColumnName("PPPU_SXCOPAY_START_TRNSID");

                    b.Property<short>("PppuTakingNewPatients")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_TAKING_NEW_PATIENTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuTimezoneId")
                        .HasColumnName("PPPU_TIMEZONE_ID");

                    b.Property<string>("PppuTitle")
                        .HasColumnName("PPPU_TITLE")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<long?>("PppuType")
                        .HasColumnName("PPPU_TYPE");

                    b.Property<long?>("PppuTypeconceptid")
                        .HasColumnName("PPPU_TYPECONCEPTID");

                    b.Property<short>("PppuUseprovsrv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_USEPROVSRV")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PppuUsersid")
                        .HasColumnName("PPPU_USERSID")
                        .HasMaxLength(56)
                        .IsUnicode(false);

                    b.Property<string>("PppuUsersidDescription")
                        .HasColumnName("PPPU_USERSID_DESCRIPTION")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<short>("PppuUsesmddelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_USESMDDELIVERY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PppuUsestreet")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_USESTREET")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PppuWeblastvisit")
                        .HasColumnName("PPPU_WEBLASTVISIT")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PppuId");

                    b.HasIndex("Createdby")
                        .HasName("PPPU_FK_CREATEDBY");

                    b.HasIndex("DefaultSupplierIdLaboratory")
                        .HasName("PPPU_FK_DEFSUPPLIER_LABORATORY");

                    b.HasIndex("DefaultSupplierIdPharmacy")
                        .HasName("PPPU_FK_DEFSUPPLIER_PHARMACY");

                    b.HasIndex("DefaultSupplierIdRadiology")
                        .HasName("PPPU_FK_DEFSUPPLIER_RADIOLOGY");

                    b.HasIndex("Deletedby")
                        .HasName("PPPU_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPU");

                    b.HasIndex("OrgPayerId")
                        .HasName("FK_PPPU_ORG_PAYER");

                    b.HasIndex("PppuAccessProfileId")
                        .HasName("FK_PPPU_ACCESS_PROFILE");

                    b.HasIndex("PppuAltEserviceId")
                        .HasName("FK_PPPU_EMESSAGE_ALT_ESRV_ID");

                    b.HasIndex("PppuApntSlipId")
                        .HasName("PPPU_APNT_SLIP_ID_FK");

                    b.HasIndex("PppuAppLocationId")
                        .HasName("FK_PPPU_APP_LOCATION_ID");

                    b.HasIndex("PppuAssociatesDetailId")
                        .HasName("FK_PPPU_ASSOCIATES_DETAIL_ID");

                    b.HasIndex("PppuCategory")
                        .HasName("PPPU_IDX_CATEGORY");

                    b.HasIndex("PppuCoverRule")
                        .HasName("PPPU_FK_COVER_RULE");

                    b.HasIndex("PppuEformatId")
                        .HasName("FK_PPPU_EFORMAT_ID");

                    b.HasIndex("PppuExtprovcustomrep")
                        .HasName("FK_EXTPROVCUSTOMREP");

                    b.HasIndex("PppuExtprovcustomrepmacro")
                        .HasName("FK_EXTPROVCUSTOMREPMACRO");

                    b.HasIndex("PppuFrontPageId")
                        .HasName("PPPU_FRONT_PAGE_ID_FK");

                    b.HasIndex("PppuIdBasePos")
                        .HasName("PPPU_CONSTRAINT_POS");

                    b.HasIndex("PppuIdLocum")
                        .HasName("FK_PPPU_IDLOCUM");

                    b.HasIndex("PppuOnthegoId")
                        .HasName("FK_PPPU_ONTHEGO");

                    b.HasIndex("PppuOrgLevel")
                        .HasName("FK_PPPU_ORG_LEVEL");

                    b.HasIndex("PppuPaycode")
                        .HasName("PPPU_FK_PAYCODE");

                    b.HasIndex("PppuPosSettingId")
                        .HasName("PPPU_POS_SETTING_FK_SHCD_ID");

                    b.HasIndex("PppuPostalstate")
                        .HasName("PPPU_FK_PPPU_POSTALSTATE");

                    b.HasIndex("PppuProvidergroup")
                        .HasName("FK_PPPU_PROVGROUP");

                    b.HasIndex("PppuRateShcdId")
                        .HasName("FK_PPPURATESHCD");

                    b.HasIndex("PppuReferencecode")
                        .HasName("PPPU_IDX_REFERENCECODE");

                    b.HasIndex("PppuReferencesystem")
                        .HasName("PPPU_FK_REFSYS_ID");

                    b.HasIndex("PppuReferralEserviceId")
                        .HasName("FK_PPPU_EMESSAGE_REF_ESRV_ID");

                    b.HasIndex("PppuSignatureId")
                        .HasName("FK_PPPU_SIGNATURE_ID");

                    b.HasIndex("PppuSpecialtyconceptid")
                        .HasName("PPPU_FK_SPECIALTYCONCEPTID");

                    b.HasIndex("PppuStreetstate")
                        .HasName("PPPU_FK_PPPU_STREETSTATE");

                    b.HasIndex("PppuSupervisor")
                        .HasName("PPPU_FK_SUPERVISOR");

                    b.HasIndex("PppuTimezoneId")
                        .HasName("FK_PPPU_TIMEZONE_ID");

                    b.HasIndex("PppuTypeconceptid")
                        .HasName("PPPU_FK_TYPECONCEPTID");

                    b.HasIndex("PppuLastname", "PppuPrefname")
                        .HasName("PPPU_LASTPREFINDEX");

                    b.HasIndex("PppuCode", "PppuDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("PPPU_I_CODE_DELETEDID");

                    b.ToTable("PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppualias", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("AliasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALIAS_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<short>("PualCapitation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUAL_CAPITATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PualReference1")
                        .HasColumnName("PUAL_REFERENCE1")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("PualReference2")
                        .HasColumnName("PUAL_REFERENCE2")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("PualReference3")
                        .HasColumnName("PUAL_REFERENCE3")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("AliasId")
                        .HasName("PPPUALIAS_FK_ALIAS_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUALIAS");

                    b.HasIndex("PppuId")
                        .HasName("PPPUALIAS_FK_PPPU_ID");

                    b.HasIndex("PualReference1")
                        .HasName("PPPUALIAS_I_ADDR2");

                    b.HasIndex("AliasId", "PppuId")
                        .IsUnique()
                        .HasName("PPPUALIAS_I_CODE_ID");

                    b.ToTable("PPPUALIAS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuAreaInterest", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ShcdId")
                        .HasColumnName("SHCD_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPU_AREA_INTEREST");

                    b.HasIndex("PppuId")
                        .HasName("PPPU_AREA_INTEREST_FK_PPPU_ID");

                    b.HasIndex("ShcdId")
                        .HasName("PPPU_AREA_INTEREST_FK_SHCD_ID");

                    b.HasIndex("PppuId", "ShcdId")
                        .IsUnique()
                        .HasName("I_PPPU_AREA_INTEREST_PPPU_SHCD");

                    b.ToTable("PPPU_AREA_INTEREST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppubalance", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("PpblCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPBL_CURRENT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("PpblLastyear")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPBL_LASTYEAR")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("PpblTaxperiod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPBL_TAXPERIOD")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("PpblType")
                        .HasColumnName("PPBL_TYPE");

                    b.Property<decimal>("PpblUserperiod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPBL_USERPERIOD")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("PpblYeartodate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPBL_YEARTODATE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUBALANCE");

                    b.HasIndex("PppuId", "PpblType")
                        .IsUnique()
                        .HasName("PPPUBALANCE_I_PPPU_TYPE");

                    b.ToTable("PPPUBALANCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuCdoTransdataLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<long?>("PtdlFormOrder")
                        .HasColumnName("PTDL_FORM_ORDER");

                    b.Property<short>("PtdlIsdefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTDL_ISDEFAULT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PtdlTransdataCid")
                        .HasColumnName("PTDL_TRANSDATA_CID");

                    b.Property<long>("PtdlTransdataOid")
                        .HasColumnName("PTDL_TRANSDATA_OID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPU_CDO_TRANSDATA_");

                    b.HasIndex("PppuId")
                        .HasName("PPPU_CDO_TRDT_LNK_FK_PPPU");

                    b.HasIndex("PtdlTransdataOid")
                        .HasName("PPPU_CDO_TRDT_LNK_FK_TRDT");

                    b.ToTable("PPPU_CDO_TRANSDATA_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuchargerate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Pppuid")
                        .HasColumnName("PPPUID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Shortcodeid")
                        .HasColumnName("SHORTCODEID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUCHARGERATE");

                    b.HasIndex("Pppuid")
                        .HasName("FK_PPPUCHARGERATEPPPU");

                    b.HasIndex("Shortcodeid")
                        .HasName("FK_PPPUCHARGERATESHCD");

                    b.ToTable("PPPUCHARGERATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuCover", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("ClinicalCover")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CLINICAL_COVER")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("CoverFrom")
                        .HasColumnName("COVER_FROM")
                        .HasColumnType("datetime");

                    b.Property<long>("CoverOid")
                        .HasColumnName("COVER_OID");

                    b.Property<DateTime?>("CoverTo")
                        .HasColumnName("COVER_TO")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("FinancialCover")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FINANCIAL_COVER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("IncomeSplit")
                        .HasColumnName("INCOME_SPLIT");

                    b.Property<short>("IncomeSplitUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INCOME_SPLIT_USED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnName("LAST_MODIFIED")
                        .HasColumnType("datetime");

                    b.Property<long>("LastModifiedBy")
                        .HasColumnName("LAST_MODIFIED_BY");

                    b.Property<long?>("MacroRule")
                        .HasColumnName("MACRO_RULE");

                    b.Property<string>("Note")
                        .HasColumnName("NOTE")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PosOid")
                        .HasColumnName("POS_OID");

                    b.Property<long>("PrincipalOid")
                        .HasColumnName("PRINCIPAL_OID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CoverOid")
                        .HasName("PPPU_FK_COVER");

                    b.HasIndex("CreatedBy")
                        .HasName("PPPU_COVER_FK_CREATEDBY");

                    b.HasIndex("LastModifiedBy")
                        .HasName("PPPU_COVER_FK_MODIFIEDBY");

                    b.HasIndex("MacroRule")
                        .HasName("PPPU_COVER_FK_MACRO");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPU_COVER");

                    b.HasIndex("PosOid")
                        .HasName("PPPU_FK_POS");

                    b.HasIndex("PrincipalOid")
                        .HasName("PPPU_FK_PRINCIPAL");

                    b.ToTable("PPPU_COVER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuEclipseClaimType", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("ClaimType")
                        .HasColumnName("CLAIM_TYPE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PayerId")
                        .HasColumnName("PAYER_ID");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("PPPU_ECLIPSE_CLAIM_TYPE_I_OBJ_");

                    b.HasIndex("PayerId")
                        .HasName("FK_PPPU_ECLIPSE_PAYER");

                    b.HasIndex("PppuId")
                        .HasName("FK_PPPU_ECLIPSE_PPPU");

                    b.ToTable("PPPU_ECLIPSE_CLAIM_TYPE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppufinancial", b =>
                {
                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<short>("ApplyRegionalSupplements")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APPLY_REGIONAL_SUPPLEMENTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PufnBpayReference")
                        .HasColumnName("PUFN_BPAY_REFERENCE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PufnDefaultLedger")
                        .HasColumnName("PUFN_DEFAULT_LEDGER");

                    b.Property<string>("PufnDepositaccount")
                        .HasColumnName("PUFN_DEPOSITACCOUNT")
                        .HasMaxLength(47)
                        .IsUnicode(false);

                    b.Property<string>("PufnFinancialname")
                        .HasColumnName("PUFN_FINANCIALNAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PufnGstrefnum")
                        .HasColumnName("PUFN_GSTREFNUM")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<short>("PufnHicdeclaration")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_HICDECLARATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PufnHideInternalRefOpts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_HIDE_INTERNAL_REF_OPTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PufnHoldclaims")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_HOLDCLAIMS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PufnInvfmtByPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_INVFMT_BY_POS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PufnInvfmtLetterPath")
                        .HasColumnName("PUFN_INVFMT_LETTER_PATH")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("PufnInvfmtMacro")
                        .HasColumnName("PUFN_INVFMT_MACRO")
                        .HasColumnType("image");

                    b.Property<short>("PufnInvfmtOvrProv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_INVFMT_OVR_PROV")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PufnInvfmtTemplateId")
                        .HasColumnName("PUFN_INVFMT_TEMPLATE_ID");

                    b.Property<long?>("PufnInvoiceformat")
                        .HasColumnName("PUFN_INVOICEFORMAT");

                    b.Property<short>("PufnIsfinancial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_ISFINANCIAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PufnOptionaltext")
                        .HasColumnName("PUFN_OPTIONALTEXT")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long>("PufnReferralPopulatType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_REFERRAL_POPULAT_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PufnScpid")
                        .HasColumnName("PUFN_SCPID")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<long>("PufnSlipformat")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_SLIPFORMAT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PufnSliptemplate")
                        .HasColumnName("PUFN_SLIPTEMPLATE")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long>("PufnStatementformat")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_STATEMENTFORMAT")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("PufnStmntfmtByPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_STMNTFMT_BY_POS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PufnStmntfmtLetterPath")
                        .HasColumnName("PUFN_STMNTFMT_LETTER_PATH")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("PufnStmntfmtMacro")
                        .HasColumnName("PUFN_STMNTFMT_MACRO")
                        .HasColumnType("image");

                    b.Property<short>("PufnStmntfmtOvrProv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUFN_STMNTFMT_OVR_PROV")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PufnStmntfmtTemplateId")
                        .HasColumnName("PUFN_STMNTFMT_TEMPLATE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("PppuId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUFINANCIAL");

                    b.HasIndex("PppuId")
                        .HasName("PPPUFINANCIAL_FK_PPPU_ID");

                    b.HasIndex("PufnDefaultLedger")
                        .HasName("FK_PPPUFINANCIAL_LEDGER_ID");

                    b.HasIndex("PufnInvfmtTemplateId")
                        .HasName("FK_PPPUFIN_INVTMPL");

                    b.HasIndex("PufnStmntfmtTemplateId")
                        .HasName("FK_PPPUFIN_STMNTTMPL");

                    b.ToTable("PPPUFINANCIAL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuimage", b =>
                {
                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PuimBitmap")
                        .HasColumnName("PUIM_BITMAP")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("PppuId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUIMAGE");

                    b.HasIndex("PppuId")
                        .HasName("PPPUIMAGE_PPPUID");

                    b.ToTable("PPPUIMAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuletterhead", b =>
                {
                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PulhBgimageId")
                        .HasColumnName("PULH_BGIMAGE_ID");

                    b.Property<string>("PulhName")
                        .HasColumnName("PULH_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<short>("PulhOnletterhead")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PULH_ONLETTERHEAD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PulhOwner")
                        .HasColumnName("PULH_OWNER");

                    b.Property<long?>("PulhPos")
                        .HasColumnName("PULH_POS");

                    b.Property<long?>("PulhPosType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PULH_POS_TYPE")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("PulhPosition")
                        .HasColumnName("PULH_POSITION")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("PulhQualifications")
                        .HasColumnName("PULH_QUALIFICATIONS")
                        .HasMaxLength(47)
                        .IsUnicode(false);

                    b.Property<short>("PulhShowEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PULH_SHOW_EMAIL")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PulhShowIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PULH_SHOW_IDENTIFIER")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PulhShowProviderPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PULH_SHOW_PROVIDER_POS")
                        .HasDefaultValueSql("((-1))");

                    b.Property<long?>("PulhStyle")
                        .HasColumnName("PULH_STYLE");

                    b.Property<string>("PulhTagline")
                        .HasColumnName("PULH_TAGLINE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("PulhTemplate")
                        .HasColumnName("PULH_TEMPLATE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("PppuId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPULETTERHEAD");

                    b.HasIndex("PppuId")
                        .IsUnique()
                        .HasName("PULH_PPPU");

                    b.HasIndex("PulhBgimageId")
                        .HasName("FK_PPPULETTERHEAD_BGIMAGE");

                    b.HasIndex("PulhPos")
                        .HasName("PPPULETTERHEAD_FK_PULH_POS");

                    b.HasIndex("PulhTemplate")
                        .HasName("PPPULETTERHEAD_FK_PULH_TEMPL");

                    b.ToTable("PPPULETTERHEAD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuPasswordHistory", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Encryptedpassword")
                        .HasColumnName("ENCRYPTEDPASSWORD")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("Usetwofactors")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USETWOFACTORS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PPPU_PASS_HIST__FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("PPPU_PASS_HIST__FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("PPPU_PASSWORD_HISTOR_FK_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPU_PASSWORD_HISTO");

                    b.HasIndex("PppuId")
                        .HasName("FK_PASSWORD_HISTORY_PPPU");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("PPPU_PASS_HIST__I_MASTERVERS");

                    b.ToTable("PPPU_PASSWORD_HISTORY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuPatientExclusion", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("DATE_CREATED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("PPPU_PATIENT_EXCLUSION_I_OBJ_G");

                    b.HasIndex("PatientId")
                        .HasName("FK_PPPU_PATIENT_EXCL_PTNT");

                    b.HasIndex("PppuId")
                        .HasName("FK_PPPU_PATIENT_EXCL_PPPU");

                    b.ToTable("PPPU_PATIENT_EXCLUSION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppupos", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CorePayeeId")
                        .HasColumnName("CORE_PAYEE_ID")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PayeeId")
                        .HasColumnName("PAYEE_ID")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<DateTime>("PppuPosDatefrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_POS_DATEFROM")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('01-JAN-1901')");

                    b.Property<DateTime?>("PppuPosDateto")
                        .HasColumnName("PPPU_POS_DATETO")
                        .HasColumnType("datetime");

                    b.Property<short>("PppuPosHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_POS_HOLD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuPosId")
                        .HasColumnName("PPPU_POS_ID");

                    b.Property<short>("PppuPosIsgroupacct")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_POS_ISGROUPACCT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuPosMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPPU_POS_METHOD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuPosMspOptOut")
                        .HasColumnName("PPPU_POS_MSP_OPT_OUT");

                    b.Property<string>("PppuPosReferencecode")
                        .HasColumnName("PPPU_POS_REFERENCECODE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("PppuPosReferencesystem")
                        .HasColumnName("PPPU_POS_REFERENCESYSTEM");

                    b.Property<long?>("PppuPosRrpScc")
                        .HasColumnName("PPPU_POS_RRP_SCC");

                    b.Property<long?>("PppuPosTopRole")
                        .HasColumnName("PPPU_POS_TOP_ROLE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUPOS");

                    b.HasIndex("PppuId")
                        .HasName("FK_PPPUPOS_PPPU_ID");

                    b.HasIndex("PppuPosId")
                        .HasName("FK_PPPUPOS_POS_ID");

                    b.HasIndex("PppuPosReferencesystem")
                        .HasName("PPPUPOS_FK_REFSYS_ID");

                    b.HasIndex("PppuPosRrpScc")
                        .HasName("PPPUPOS_RRP_SCC_FK");

                    b.HasIndex("PppuPosTopRole")
                        .HasName("PPPUPOS_I_TOP_ROLE");

                    b.HasIndex("PppuId", "PppuPosId")
                        .IsUnique()
                        .HasName("PPPUPOS_I_POS_PPPU_ID");

                    b.ToTable("PPPUPOS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuposPayees", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("PpospFinish")
                        .HasColumnName("PPOSP_FINISH")
                        .HasColumnType("datetime");

                    b.Property<string>("PpospPayee")
                        .IsRequired()
                        .HasColumnName("PPOSP_PAYEE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long>("PpospPosId")
                        .HasColumnName("PPOSP_POS_ID");

                    b.Property<long>("PpospPppuId")
                        .HasColumnName("PPOSP_PPPU_ID");

                    b.Property<DateTime>("PpospStart")
                        .HasColumnName("PPOSP_START")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUPOS_PAYEES");

                    b.HasIndex("PpospPosId")
                        .HasName("FK_PPPUPOS_PAYEES_POS_ID");

                    b.HasIndex("PpospPppuId")
                        .HasName("FK_PPPUPOS_PAYEES_PPPU_ID");

                    b.ToTable("PPPUPOS_PAYEES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppupreference", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<byte[]>("PuprData")
                        .HasColumnName("PUPR_DATA")
                        .HasColumnType("image");

                    b.Property<string>("PuprName")
                        .IsRequired()
                        .HasColumnName("PUPR_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUPREFERENCE");

                    b.HasIndex("PppuId")
                        .HasName("FOREIGN_PPPU");

                    b.HasIndex("PppuId", "PuprName")
                        .IsUnique()
                        .HasName("PPPUPREFERENCE_I_NAME_ID");

                    b.ToTable("PPPUPREFERENCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppupreferenceLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtModified")
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime");

                    b.Property<string>("LogComputer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(host_name())")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LogDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .HasColumnName("OBJ_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("PartitionId")
                        .HasColumnName("PARTITION_ID");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<byte[]>("PuprData")
                        .HasColumnName("PUPR_DATA")
                        .HasColumnType("image");

                    b.Property<string>("PuprName")
                        .IsRequired()
                        .HasColumnName("PUPR_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("LogId");

                    b.ToTable("PPPUPREFERENCE_log");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuprint", b =>
                {
                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PuprGrayscale")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_GRAYSCALE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PuprInvoiceperforation")
                        .HasColumnName("PUPR_INVOICEPERFORATION");

                    b.Property<short>("PuprLetterhead")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_LETTERHEAD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PuprMarginbottom")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_MARGINBOTTOM")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PuprMarginleft")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_MARGINLEFT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PuprMarginright")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_MARGINRIGHT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PuprMargintop")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_MARGINTOP")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PuprOffsetLeft")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_OFFSET_LEFT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PuprOffsetTop")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_OFFSET_TOP")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PuprShowdialog")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_SHOWDIALOG")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PuprZebra")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_ZEBRA")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("PppuId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUPRINT");

                    b.HasIndex("PppuId")
                        .HasName("PPPUPRINTFOREIGNKEY1");

                    b.ToTable("PPPUPRINT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuprintfontdefault", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("PupfAlternname")
                        .HasColumnName("PUPF_ALTERNNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PupfAlternsize")
                        .HasColumnName("PUPF_ALTERNSIZE");

                    b.Property<long?>("PupfPreferdsize")
                        .HasColumnName("PUPF_PREFERDSIZE");

                    b.Property<string>("PupfPreferedname")
                        .HasColumnName("PUPF_PREFEREDNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("PupfUsedas")
                        .HasColumnName("PUPF_USEDAS");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUPRINTFONTDEFAUL");

                    b.HasIndex("PppuId")
                        .HasName("PPPUPRINTFONTDEF_FK_PPPU");

                    b.HasIndex("PppuId", "PupfUsedas")
                        .IsUnique()
                        .HasName("PPPUPRINTFONTDEF_I_PPPU_USE");

                    b.ToTable("PPPUPRINTFONTDEFAULT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuprintreportdefault", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<long>("PuprPaperformat")
                        .HasColumnName("PUPR_PAPERFORMAT");

                    b.Property<long>("PuprPaperorient")
                        .HasColumnName("PUPR_PAPERORIENT");

                    b.Property<long>("PuprPapersource")
                        .HasColumnName("PUPR_PAPERSOURCE");

                    b.Property<short>("PuprPrintPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINT_PATIENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PuprPrintPatientNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINT_PATIENT_NUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PuprPrintdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINTDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PuprPrintdateJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINTDATE_JUSTIFY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PuprPrintedtext")
                        .HasColumnName("PUPR_PRINTEDTEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PuprPrintername")
                        .HasColumnName("PUPR_PRINTERNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("PuprPrintfooter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINTFOOTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PuprPrintpatientJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINTPATIENT_JUSTIFY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PuprPrintpatientNumJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINTPATIENT_NUM_JUSTIFY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PuprPrinttext")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINTTEXT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PuprPrinttextJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINTTEXT_JUSTIFY")
                        .HasDefaultValueSql("((2))");

                    b.Property<short>("PuprPrintuser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINTUSER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PuprPrintuserJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_PRINTUSER_JUSTIFY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PuprReportid")
                        .HasColumnName("PUPR_REPORTID");

                    b.Property<short>("PuprScaletofitpage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUPR_SCALETOFITPAGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUPRINTREPORTDEFA");

                    b.HasIndex("PppuId")
                        .HasName("PPPUPRINTREPORTDEF_FK_PPPU");

                    b.HasIndex("PppuId", "PuprReportid")
                        .IsUnique()
                        .HasName("PPPUPRINTREPORTDEF_I_PPPU_RPT");

                    b.ToTable("PPPUPRINTREPORTDEFAULT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuProvgrps", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("GroupId")
                        .HasColumnName("GROUP_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GroupId")
                        .HasName("FK_PPU_PROVGRPS_PROV_GRP");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPU_PROVGRPS");

                    b.HasIndex("PppuId")
                        .HasName("PPPU_PROVGRPS_PPPU_FK");

                    b.HasIndex("PppuId", "GroupId")
                        .IsUnique()
                        .HasName("PPPU_PROVGRPS_I_PPPU_SHCD");

                    b.ToTable("PPPU_PROVGRPS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuroles", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnName("CREATEDDATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Ishistoric")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISHISTORIC")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Pppuid")
                        .HasColumnName("PPPUID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Roleid")
                        .HasColumnName("ROLEID");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("PPPUROLES_FK_CREATEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUROLES");

                    b.HasIndex("Pppuid")
                        .HasName("PPPUROLES_FK_PPPU");

                    b.HasIndex("Roleid")
                        .HasName("PPPUROLES_FK_ROLEID");

                    b.ToTable("PPPUROLES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppusecurity", b =>
                {
                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PuscClinical")
                        .HasColumnName("PUSC_CLINICAL");

                    b.Property<string>("PuscEncryptedpassword")
                        .HasColumnName("PUSC_ENCRYPTEDPASSWORD")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long?>("PuscFinancial")
                        .HasColumnName("PUSC_FINANCIAL");

                    b.Property<short>("PuscIslockedout")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PUSC_ISLOCKEDOUT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Swipecardnumber")
                        .HasColumnName("SWIPECARDNUMBER")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("Swipecardtype")
                        .HasColumnName("SWIPECARDTYPE");

                    b.Property<short>("Usetwofactors")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USETWOFACTORS")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("PppuId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUSECURITY");

                    b.HasIndex("PppuId")
                        .HasName("PPPUSECURITY_FK_PPPU_ID");

                    b.ToTable("PPPUSECURITY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuSpeciality", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PspConceptId")
                        .HasColumnName("PSP_CONCEPT_ID");

                    b.Property<long>("PspPppuId")
                        .HasColumnName("PSP_PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPU_SPECIALITY");

                    b.HasIndex("PspConceptId")
                        .HasName("PPPU_SPECIALITY_CONCEPT_FK");

                    b.HasIndex("PspPppuId")
                        .HasName("PPPU_SPECIALITY_PPPUID_FK");

                    b.HasIndex("PspPppuId", "PspConceptId")
                        .IsUnique()
                        .HasName("PPPU_SPECIALITY_IU");

                    b.ToTable("PPPU_SPECIALITY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuTestLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtlConceptId")
                        .HasColumnName("PTL_CONCEPT_ID");

                    b.Property<byte[]>("PtlInstructions")
                        .HasColumnName("PTL_INSTRUCTIONS")
                        .HasColumnType("image");

                    b.Property<long>("PtlPppuId")
                        .HasColumnName("PTL_PPPU_ID");

                    b.Property<decimal>("PtlPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PTL_PRICE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("PtlTestId")
                        .HasColumnName("PTL_TEST_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPU_TEST_LINK");

                    b.HasIndex("PtlConceptId")
                        .HasName("PTL_CONCEPT_ID_FK");

                    b.HasIndex("PtlPppuId")
                        .HasName("PTL_PPPU_ID_FK");

                    b.HasIndex("PtlTestId")
                        .HasName("PTL_TEST_ID_FK");

                    b.ToTable("PPPU_TEST_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Ppputext", b =>
                {
                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PutxText")
                        .HasColumnName("PUTX_TEXT")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("PppuId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PPPUTEXT");

                    b.HasIndex("PppuId")
                        .HasName("PPPUTEXT_FK_PPPU_ID");

                    b.ToTable("PPPUTEXT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PredictDocument", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("DataHl7")
                        .HasColumnName("DATA_HL7")
                        .HasColumnType("image");

                    b.Property<byte[]>("DataHtml")
                        .HasColumnName("DATA_HTML")
                        .HasColumnType("image");

                    b.Property<byte[]>("DataXml")
                        .HasColumnName("DATA_XML")
                        .HasColumnType("image");

                    b.Property<long?>("DocCategoryId")
                        .HasColumnName("DOC_CATEGORY_ID");

                    b.Property<DateTime>("DocDate")
                        .HasColumnName("DOC_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SignedProvId")
                        .HasColumnName("SIGNED_PROV_ID");

                    b.Property<long>("StatusId")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("Subject")
                        .HasColumnName("SUBJECT")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("DocCategoryId")
                        .HasName("PREDICT_DOC_CATEGORY_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PREDICT_DOCUMENT");

                    b.HasIndex("PatientId")
                        .HasName("FK_PDCT_PATIENTID");

                    b.HasIndex("PosId")
                        .HasName("FK_PDCT_POSID");

                    b.HasIndex("ProviderId")
                        .HasName("FK_PDCT_PROVID");

                    b.HasIndex("SignedProvId")
                        .HasName("FK_PDCT_SIGNEDPROVID");

                    b.ToTable("PREDICT_DOCUMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pregnancy", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PrgnAntenatalpreferences")
                        .HasColumnName("PRGN_ANTENATALPREFERENCES")
                        .HasColumnType("image");

                    b.Property<long?>("PrgnAssessType")
                        .HasColumnName("PRGN_ASSESS_TYPE");

                    b.Property<string>("PrgnContrApproxdate")
                        .HasColumnName("PRGN_CONTR_APPROXDATE")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PrgnContrDate")
                        .HasColumnName("PRGN_CONTR_DATE")
                        .HasColumnType("datetime");

                    b.Property<short>("PrgnContrIsapproxdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRGN_CONTR_ISAPPROXDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PrgnContrText")
                        .HasColumnName("PRGN_CONTR_TEXT")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long?>("PrgnContraceptive")
                        .HasColumnName("PRGN_CONTRACEPTIVE");

                    b.Property<DateTime?>("PrgnEdd")
                        .HasColumnName("PRGN_EDD")
                        .HasColumnType("datetime");

                    b.Property<short>("PrgnIscurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRGN_ISCURRENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PrgnLabour")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRGN_LABOUR")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PrgnLmp")
                        .HasColumnName("PRGN_LMP")
                        .HasColumnType("datetime");

                    b.Property<short>("PrgnLmpCertain")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRGN_LMP_CERTAIN")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrgnNature")
                        .HasColumnName("PRGN_NATURE");

                    b.Property<long?>("PrgnOutcome")
                        .HasColumnName("PRGN_OUTCOME");

                    b.Property<string>("PrgnPerinitalCompl")
                        .HasColumnName("PRGN_PERINITAL_COMPL")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("PrgnPlace")
                        .HasColumnName("PRGN_PLACE")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PrgnPosTest")
                        .HasColumnName("PRGN_POS_TEST")
                        .HasColumnType("datetime");

                    b.Property<long>("PrgnProblem")
                        .HasColumnName("PRGN_PROBLEM");

                    b.Property<long?>("PrgnScanage")
                        .HasColumnName("PRGN_SCANAGE");

                    b.Property<DateTime?>("PrgnScandate")
                        .HasColumnName("PRGN_SCANDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("PrgnStage1")
                        .HasColumnName("PRGN_STAGE1");

                    b.Property<long?>("PrgnStage2")
                        .HasColumnName("PRGN_STAGE2");

                    b.Property<long?>("PrgnStage3")
                        .HasColumnName("PRGN_STAGE3");

                    b.Property<long?>("PrgnStatus")
                        .HasColumnName("PRGN_STATUS");

                    b.Property<long?>("PrgnWeeks")
                        .HasColumnName("PRGN_WEEKS");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PREGNANCY");

                    b.HasIndex("PrgnNature")
                        .HasName("PREGNANCY_FK_NATURE");

                    b.HasIndex("PrgnOutcome")
                        .HasName("PREGNANCY_FK_PRGN_OUTCOME");

                    b.HasIndex("PrgnProblem")
                        .HasName("PREGNANCY_FK_PRGN_PROBLEM");

                    b.HasIndex("PrgnStatus")
                        .HasName("PREGNANCY_FK_PRGN_STATUS");

                    b.ToTable("PREGNANCY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Priorapproval", b =>
                {
                    b.Property<long>("PrapId")
                        .HasColumnName("PRAP_ID");

                    b.Property<long?>("CdoTransCid")
                        .HasColumnName("CDO_TRANS_CID");

                    b.Property<long?>("CdoTransOid")
                        .HasColumnName("CDO_TRANS_OID");

                    b.Property<long?>("ContactOid")
                        .HasColumnName("CONTACT_OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrapAgencyid")
                        .HasColumnName("PRAP_AGENCYID");

                    b.Property<string>("PrapAttention")
                        .HasColumnName("PRAP_ATTENTION")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<decimal>("PrapBudgetamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAP_BUDGETAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("PrapBudgetid")
                        .HasColumnName("PRAP_BUDGETID");

                    b.Property<decimal>("PrapBudgetquantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRAP_BUDGETQUANTITY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("PrapCaseId")
                        .HasColumnName("PRAP_CASE_ID");

                    b.Property<string>("PrapComment")
                        .HasColumnName("PRAP_COMMENT")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<DateTime>("PrapDate")
                        .HasColumnName("PRAP_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PrapDatetimeadded")
                        .HasColumnName("PRAP_DATETIMEADDED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PrapDatetimealtered")
                        .HasColumnName("PRAP_DATETIMEALTERED")
                        .HasColumnType("datetime");

                    b.Property<long>("PrapDeletedid")
                        .HasColumnName("PRAP_DELETEDID");

                    b.Property<string>("PrapDescription")
                        .HasColumnName("PRAP_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("PrapEventdate")
                        .HasColumnName("PRAP_EVENTDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("PrapFormid")
                        .HasColumnName("PRAP_FORMID");

                    b.Property<long?>("PrapPppuid")
                        .HasColumnName("PRAP_PPPUID");

                    b.Property<long>("PrapPppuidadded")
                        .HasColumnName("PRAP_PPPUIDADDED");

                    b.Property<long?>("PrapPppuidaltered")
                        .HasColumnName("PRAP_PPPUIDALTERED");

                    b.Property<string>("PrapReference")
                        .HasColumnName("PRAP_REFERENCE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PrapSide")
                        .HasColumnName("PRAP_SIDE")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<long>("PrapStatusid")
                        .HasColumnName("PRAP_STATUSID");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdBodyPartId")
                        .HasColumnName("SHCD_BODY_PART_ID");

                    b.Property<long?>("ShcdIdForm")
                        .HasColumnName("SHCD_ID_FORM");

                    b.Property<long?>("ShcdNatureOfInjuryId")
                        .HasColumnName("SHCD_NATURE_OF_INJURY_ID");

                    b.HasKey("PrapId");

                    b.HasIndex("ContactOid")
                        .HasName("FK_PRAP_CONTACT_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PRIORAPPROVAL");

                    b.HasIndex("PrapAgencyid")
                        .HasName("PRAP_FK_PRAP_AGENCYID");

                    b.HasIndex("PrapBudgetid")
                        .HasName("PRIORAPPROVAL_FK_PRAP_BUDGET");

                    b.HasIndex("PrapCaseId")
                        .HasName("PRIORAPPROVAL_FK_PRAP_CASE_I");

                    b.HasIndex("PrapFormid")
                        .HasName("PRIORAPPROVAL_FK_FORMID");

                    b.HasIndex("PrapPppuid")
                        .HasName("FK_PRAP_PPPU_ID");

                    b.HasIndex("PrapPppuidadded")
                        .HasName("PRAP_FOREIGN_PPPUID_ADDED");

                    b.HasIndex("PrapPppuidaltered")
                        .HasName("PRAP_FOREIGN_PPPUID_ALTERED");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_PRIORAPPROVAL_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("PRIORAPPROVAL_FK_PPPU");

                    b.HasIndex("PtntId")
                        .HasName("PRAP_FOREIGN_PTNT_ID");

                    b.HasIndex("ShcdBodyPartId")
                        .HasName("SHCD_BODY_PART_ID_FK");

                    b.HasIndex("ShcdIdForm")
                        .HasName("PRAP_FOREIGN_SHCD_ID_FORM");

                    b.HasIndex("ShcdNatureOfInjuryId")
                        .HasName("SHCD_NATURE_OF_INJURY_ID_FK");

                    b.ToTable("PRIORAPPROVAL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PrivacyEntry", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PRIVACY_ENTRY");

                    b.HasIndex("Name", "Deletedid")
                        .IsUnique()
                        .HasName("PRIVACY_ENTRY_I_NAME");

                    b.ToTable("PRIVACY_ENTRY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProblemInstruction", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Measure")
                        .HasColumnName("MEASURE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Problem")
                        .HasColumnName("PROBLEM");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Measure")
                        .HasName("FK_PR_INSTR_MEASURE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROBLEM_INSTRUCTION");

                    b.HasIndex("Problem")
                        .HasName("FK_PR_INSTR_PROBLEM");

                    b.ToTable("PROBLEM_INSTRUCTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProblemInstructionLine", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Content")
                        .HasColumnName("CONTENT");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Instruction")
                        .HasColumnName("INSTRUCTION");

                    b.Property<long?>("MeasureValue")
                        .HasColumnName("MEASURE_VALUE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Content")
                        .HasName("FK_PR_INSTR_LINE_CONTENT");

                    b.HasIndex("Instruction")
                        .HasName("FK_PR_INSTR_LINE_INSTRUCTION");

                    b.HasIndex("MeasureValue")
                        .HasName("FK_PR_INSTR_LINE_MEASURE_VALUE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROBLEM_INSTRUCTIO1");

                    b.ToTable("PROBLEM_INSTRUCTION_LINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProcedureAudit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Comment")
                        .HasColumnName("COMMENT_")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("Complication")
                        .HasColumnName("COMPLICATION");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrganSystem")
                        .HasColumnName("ORGAN_SYSTEM");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Pathology")
                        .HasColumnName("PATHOLOGY");

                    b.Property<long>("ProcedureId")
                        .HasColumnName("PROCEDURE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Complication")
                        .HasName("PROCEDURE_AUDIT_FK_COMPLICAT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROCEDURE_AUDIT");

                    b.HasIndex("OrganSystem")
                        .HasName("PROCEDURE_AUDIT_FK_OSYSTEM");

                    b.HasIndex("Pathology")
                        .HasName("PROCEDURE_AUDIT_FK_PATHOLOGY");

                    b.HasIndex("ProcedureId")
                        .HasName("PROCEDURE_AUDIT_FK_PROCEDURE");

                    b.ToTable("PROCEDURE_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProcedureFormLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdIdForm")
                        .HasColumnName("SHCD_ID_FORM");

                    b.Property<long?>("SrvcIdProc")
                        .HasColumnName("SRVC_ID_PROC");

                    b.Property<short>("SrvcIdProcCustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRVC_ID_PROC_CUSTOM")
                        .HasDefaultValueSql("((-1))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROCEDURE_FORM_LINK");

                    b.HasIndex("ShcdIdForm")
                        .HasName("FK_PROC_FORM_SHCD");

                    b.HasIndex("SrvcIdProc")
                        .HasName("FK_PROC_FORM_SRVC");

                    b.ToTable("PROCEDURE_FORM_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Procedureop", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AnaesthetistId")
                        .HasColumnName("ANAESTHETIST_ID");

                    b.Property<long?>("AssistantId")
                        .HasColumnName("ASSISTANT_ID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<byte[]>("Comment")
                        .HasColumnName("COMMENT_")
                        .HasColumnType("image");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("DATECREATED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodified")
                        .HasColumnName("DATEMODIFIED")
                        .HasColumnType("datetime");

                    b.Property<long?>("DiseaseId")
                        .HasColumnName("DISEASE_ID");

                    b.Property<long?>("Displayorder")
                        .HasColumnName("DISPLAYORDER");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Duration")
                        .HasColumnName("DURATION");

                    b.Property<string>("HospAttendance")
                        .HasColumnName("HOSP_ATTENDANCE")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("HospInstruction")
                        .HasColumnName("HOSP_INSTRUCTION")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("IndicationId")
                        .HasColumnName("INDICATION_ID");

                    b.Property<byte[]>("Instruction")
                        .HasColumnName("INSTRUCTION")
                        .HasColumnType("image");

                    b.Property<long?>("Modifiedby")
                        .HasColumnName("MODIFIEDBY");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long?>("PrapId")
                        .HasColumnName("PRAP_ID");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long>("ProcDeletedid")
                        .HasColumnName("PROC_DELETEDID");

                    b.Property<byte[]>("ProcExplanation")
                        .HasColumnName("PROC_EXPLANATION")
                        .HasColumnType("image");

                    b.Property<long?>("ProcFormid")
                        .HasColumnName("PROC_FORMID");

                    b.Property<long>("ProcedureType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROCEDURE_TYPE")
                        .HasDefaultValueSql("((2))");

                    b.Property<long>("ProvOwnerId")
                        .HasColumnName("PROV_OWNER_ID");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdIdForm")
                        .HasColumnName("SHCD_ID_FORM");

                    b.Property<long>("Side")
                        .HasColumnName("SIDE");

                    b.Property<long?>("SrvcId")
                        .HasColumnName("SRVC_ID");

                    b.Property<DateTime?>("Starttime")
                        .HasColumnName("STARTTIME")
                        .HasColumnType("datetime");

                    b.Property<long>("Status")
                        .HasColumnName("STATUS");

                    b.Property<long?>("SurgeonId")
                        .HasColumnName("SURGEON_ID");

                    b.HasKey("Oid");

                    b.HasIndex("AnaesthetistId")
                        .HasName("PROCEDUREOP_FK_ANAESTHETIST_");

                    b.HasIndex("AssistantId")
                        .HasName("PROCEDUREOP_FK_ASSISTANT_ID");

                    b.HasIndex("CaseId")
                        .HasName("PROCEDUREOP_FK_CASE_ID");

                    b.HasIndex("Createdby")
                        .HasName("FK_PROC_CREATEDBY");

                    b.HasIndex("DiseaseId")
                        .HasName("PROCEDUREOP_FK_DISEASE_ID");

                    b.HasIndex("IndicationId")
                        .HasName("PROCEDUREOP_FK_INDICATION_ID");

                    b.HasIndex("Modifiedby")
                        .HasName("FK_PROC_MODIFIEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROCEDUREOP");

                    b.HasIndex("PosId")
                        .HasName("PROCEDUREOP_FK_POS_ID");

                    b.HasIndex("PrapId")
                        .HasName("PROCEDUREOP_FK_PRAP_ID");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_PROCEDUREOP_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("PROCEDUREOP_FK_PPPU");

                    b.HasIndex("ProcFormid")
                        .HasName("FK_PROC_FORMID");

                    b.HasIndex("ProvOwnerId")
                        .HasName("PROCEDUREOP_FK_PROV_OWNER_ID");

                    b.HasIndex("PtntId")
                        .HasName("PROCEDUREOP_FK_PTNT_ID");

                    b.HasIndex("ShcdIdForm")
                        .HasName("PROCEDUREOP_FK_SHCD_ID");

                    b.HasIndex("SrvcId")
                        .HasName("PROCEDUREOP_FK_SRVC_ID");

                    b.HasIndex("SurgeonId")
                        .HasName("PROCEDUREOP_FK_SURGEON_ID");

                    b.ToTable("PROCEDUREOP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProcedureResource", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("Checked")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHECKED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("Ordered")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORDERED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ProcId")
                        .HasColumnName("PROC_ID");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUANTITY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SrvcId")
                        .HasColumnName("SRVC_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROCEDURE_RESOURCE");

                    b.HasIndex("ProcId")
                        .HasName("PROCEDURE_RESOURCE_FK_PROC_I");

                    b.HasIndex("SrvcId")
                        .HasName("PROCEDURE_RESOURCE_FK_SRVC_I");

                    b.ToTable("PROCEDURE_RESOURCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilePartitionGroup", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("ComplexFilterOid")
                        .HasColumnName("COMPLEX_FILTER_OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(182)
                        .IsUnicode(false);

                    b.Property<long?>("PpgFirstGroup")
                        .HasColumnName("PPG_FIRST_GROUP");

                    b.Property<long>("PpgOperation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_OPERATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PpgPrivacy")
                        .HasColumnName("PPG_PRIVACY");

                    b.Property<long>("PpgProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_PRODUCT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PpgSecondGroup")
                        .HasColumnName("PPG_SECOND_GROUP");

                    b.Property<long>("PpgStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivateTo")
                        .HasColumnName("PRIVATE_TO");

                    b.HasKey("Oid");

                    b.HasIndex("ComplexFilterOid")
                        .HasName("PROFILE_PRT_GRP_FK_CF");

                    b.HasIndex("PpgFirstGroup")
                        .HasName("PRT_FK_PPG_FIRST_GROUP");

                    b.HasIndex("PpgPrivacy")
                        .HasName("PRT_FK_PPG_PRIVACY");

                    b.HasIndex("PpgSecondGroup")
                        .HasName("PRT_FK_PPG_SECOND_GROUP");

                    b.HasIndex("PrivateTo")
                        .HasName("PROFILE_PRT_GRP_FK_PPPU");

                    b.HasIndex("Name", "Deletedid")
                        .IsUnique()
                        .HasName("PROF_PART_GR_I_NAME");

                    b.ToTable("PROFILE_PARTITION_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilePartitionGroupLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("GroupOid")
                        .HasColumnName("GROUP_OID");

                    b.Property<long>("PrtId")
                        .HasColumnName("PRT_ID");

                    b.HasKey("Oid");

                    b.HasIndex("GroupOid")
                        .HasName("PROFILE_PRT_GRP_LINK_FK_GRP");

                    b.HasIndex("PrtId")
                        .HasName("PROFILE_PRT_GRP_LINK_FK_PTNT");

                    b.ToTable("PROFILE_PARTITION_GROUP_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("ComplexFilterOid")
                        .HasColumnName("COMPLEX_FILTER_OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("GroupCategoryId")
                        .HasColumnName("GROUP_CATEGORY_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(160)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PpgComparisonDescription")
                        .HasColumnName("PPG_COMPARISON_DESCRIPTION")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<short>("PpgComparisonOutputEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_COMPARISON_OUTPUT_ENABLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PpgConditions")
                        .HasColumnName("PPG_CONDITIONS")
                        .HasColumnType("image");

                    b.Property<byte[]>("PpgDenominatorConditions")
                        .HasColumnName("PPG_DENOMINATOR_CONDITIONS")
                        .HasColumnType("image");

                    b.Property<short>("PpgDenominatorCountVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_DENOMINATOR_COUNT_VISIBLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PpgDenominatorDescription")
                        .HasColumnName("PPG_DENOMINATOR_DESCRIPTION")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PpgDescription")
                        .HasColumnName("PPG_DESCRIPTION")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long?>("PpgFirstGroup")
                        .HasColumnName("PPG_FIRST_GROUP");

                    b.Property<long?>("PpgGroupKind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_GROUP_KIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PpgNumeratorCountVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_NUMERATOR_COUNT_VISIBLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PpgNumeratorDescription")
                        .HasColumnName("PPG_NUMERATOR_DESCRIPTION")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<short>("PpgNumeratorPercentVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_NUMERATOR_PERCENT_VISIBLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PpgOperation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_OPERATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PpgOwner")
                        .HasColumnName("PPG_OWNER");

                    b.Property<long?>("PpgPrivacy")
                        .HasColumnName("PPG_PRIVACY");

                    b.Property<long?>("PpgSecondGroup")
                        .HasColumnName("PPG_SECOND_GROUP");

                    b.Property<short>("PpgShowOnMobileDevices")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_SHOW_ON_MOBILE_DEVICES")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PpgStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PpgViewsettings")
                        .HasColumnName("PPG_VIEWSETTINGS")
                        .HasColumnType("image");

                    b.Property<long>("PpgViewsettingssource")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PPG_VIEWSETTINGSSOURCE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivateTo")
                        .HasColumnName("PRIVATE_TO");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ComplexFilterOid")
                        .HasName("PROFILE_PTNT_GRP_FK_CF");

                    b.HasIndex("GroupCategoryId")
                        .HasName("FK_PATIENT_GROUP_CATEGORY_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROFILE_PATIENT_GRO");

                    b.HasIndex("PpgFirstGroup")
                        .HasName("FK_PPG_FIRST_GROUP");

                    b.HasIndex("PpgOwner")
                        .HasName("FK_PROFILE_PTNT_GRP_PPG_OWNER");

                    b.HasIndex("PpgPrivacy")
                        .HasName("FK_PPG_PRIVACY");

                    b.HasIndex("PpgSecondGroup")
                        .HasName("FK_PPG_SECOND_GROUP");

                    b.HasIndex("PrivateTo")
                        .HasName("PROFILE_PTNT_GRP_FK_PPPU");

                    b.HasIndex("Name", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("PROF_PATIENT_GR_I_NAME");

                    b.ToTable("PROFILE_PATIENT_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilepatientgroupCache", b =>
                {
                    b.Property<long>("AppgclOid")
                        .HasColumnName("APPGCL_OID");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("AppgclOid", "PtntId");

                    b.HasIndex("AppgclOid")
                        .HasName("PPGC_FK_PPGCL");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROFILEPATIENTGROUP");

                    b.HasIndex("PtntId")
                        .HasName("PPGC_FK_PATIENT");

                    b.ToTable("PROFILEPATIENTGROUP_CACHE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroupLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("GroupOid")
                        .HasColumnName("GROUP_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("FK_GRP_CASE_ID");

                    b.HasIndex("GroupOid")
                        .HasName("PROFILE_PTNT_GRP_LINK_FK_GRP");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROFILE_PATIENT_GR1");

                    b.HasIndex("PatientId")
                        .HasName("PROFILE_PTNT_GRP_LINK_FK_PTN");

                    b.ToTable("PROFILE_PATIENT_GROUP_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfileptntgrpCachelog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("ComplexFilterOid")
                        .HasColumnName("COMPLEX_FILTER_OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PrecachedDate")
                        .HasColumnName("PRECACHED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SessionId")
                        .HasColumnName("SESSION_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ComplexFilterOid")
                        .HasName("PPGCL_FK_COMPLEX_FILTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROFILEPTNTGRP_CACH");

                    b.ToTable("PROFILEPTNTGRP_CACHELOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProvGroupCaseTemplate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CaseTemplateId")
                        .HasColumnName("CASE_TEMPLATE_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ProviderGroupId")
                        .HasColumnName("PROVIDER_GROUP_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CaseTemplateId")
                        .HasName("PR_GR_CASE_TMPLT_FK_CSTM");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROV_GROUP_CASE_TEM");

                    b.HasIndex("ProviderGroupId")
                        .HasName("PR_GR_CASE_TMPLT_FK_PRGR");

                    b.HasIndex("ProviderGroupId", "CaseTemplateId", "PartitionId")
                        .IsUnique()
                        .HasName("I_PR_GR_CASE_TMPLT_UNIQ");

                    b.ToTable("PROV_GROUP_CASE_TEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderCommentGl", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PcglComment")
                        .IsRequired()
                        .HasColumnName("PCGL_COMMENT")
                        .HasColumnType("image");

                    b.Property<DateTime>("PcglDate")
                        .HasColumnName("PCGL_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("PcglGuidelineId")
                        .HasColumnName("PCGL_GUIDELINE_ID");

                    b.Property<long>("PcglPatientId")
                        .HasColumnName("PCGL_PATIENT_ID");

                    b.Property<long>("PcglProviderId")
                        .HasColumnName("PCGL_PROVIDER_ID");

                    b.Property<long?>("PcglRecommendationId")
                        .HasColumnName("PCGL_RECOMMENDATION_ID");

                    b.Property<string>("PcglRecommendationName")
                        .HasColumnName("PCGL_RECOMMENDATION_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROVIDER_COMMENT_GL");

                    b.HasIndex("PcglGuidelineId")
                        .HasName("PCGL_GUIDELINE_ID_FK");

                    b.HasIndex("PcglPatientId")
                        .HasName("PCGL_PATIENT_ID_FK");

                    b.HasIndex("PcglProviderId")
                        .HasName("PCGL_PROVIDER_ID_FK");

                    b.HasIndex("PcglRecommendationId")
                        .HasName("PCGL_RECOMMENDATION_ID_FK");

                    b.ToTable("PROVIDER_COMMENT_GL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderCommentRx", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PrcmComment")
                        .IsRequired()
                        .HasColumnName("PRCM_COMMENT")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("PrcmDate")
                        .HasColumnName("PRCM_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("PrcmPrescrId")
                        .HasColumnName("PRCM_PRESCR_ID");

                    b.Property<long>("PrcmProviderId")
                        .HasColumnName("PRCM_PROVIDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROVIDER_COMMENT_RX");

                    b.HasIndex("PrcmPrescrId")
                        .HasName("PRCM_PRESCR_ID_FK");

                    b.HasIndex("PrcmProviderId")
                        .HasName("PRCM_PROVIDER_ID_FK");

                    b.ToTable("PROVIDER_COMMENT_RX");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderGroup", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("LimitToOrgLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LIMIT_TO_ORG_LEVEL")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("ObjectRights")
                        .HasColumnName("OBJECT_RIGHTS")
                        .HasColumnType("image");

                    b.Property<long?>("OrgId")
                        .HasColumnName("ORG_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PgCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PG_CODE")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("PgDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PG_DESCRIPTION")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("PgUsecase")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PG_USECASE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdProviderGroup")
                        .HasColumnName("SHCD_PROVIDER_GROUP");

                    b.Property<long>("ShcdProviderGrouptype")
                        .HasColumnName("SHCD_PROVIDER_GROUPTYPE");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROVIDER_GROUP");

                    b.HasIndex("OrgId")
                        .HasName("FK_PROVIDER_GROUP_ORG_ID");

                    b.HasIndex("ShcdProviderGrouptype")
                        .HasName("FK_PROVIDER_GROUP_SHCD_PGT");

                    b.HasIndex("PgCode", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("I_PROVIDER_GROUP_CODE");

                    b.ToTable("PROVIDER_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderGroupLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Parent")
                        .HasColumnName("PARENT");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Source")
                        .HasColumnName("SOURCE");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROVIDER_GROUP_LINK");

                    b.HasIndex("Parent")
                        .HasName("FK_PROVGRP_LINK_PARENT");

                    b.HasIndex("Source")
                        .HasName("FK_PROVGRP_LINK_SOURCE");

                    b.ToTable("PROVIDER_GROUP_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderLabel", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<long?>("PrlColor")
                        .HasColumnName("PRL_COLOR");

                    b.Property<string>("PrlLabelname")
                        .HasColumnName("PRL_LABELNAME")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.ToTable("PROVIDER_LABEL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderService", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.Property<long>("ShcdId")
                        .HasColumnName("SHCD_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROVIDER_SERVICE");

                    b.HasIndex("PppuId")
                        .HasName("PROVIDER_SRV_PPPU_ID_FK");

                    b.HasIndex("ServiceId")
                        .HasName("PROVIDER_SRV_SRV_ID_FK");

                    b.HasIndex("ShcdId")
                        .HasName("PROVIDER_SRV_SHCD_ID_FK");

                    b.ToTable("PROVIDER_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProvOrderFormat", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PofLanguage")
                        .HasColumnName("POF_LANGUAGE");

                    b.Property<long?>("PofPaperformat")
                        .HasColumnName("POF_PAPERFORMAT");

                    b.Property<long?>("PofPaperorient")
                        .HasColumnName("POF_PAPERORIENT");

                    b.Property<long?>("PofPapersource")
                        .HasColumnName("POF_PAPERSOURCE");

                    b.Property<string>("PofPrintername")
                        .HasColumnName("POF_PRINTERNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PofProvCode")
                        .HasColumnName("POF_PROV_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long>("PofProvId")
                        .HasColumnName("POF_PROV_ID");

                    b.Property<long>("PofProvType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("POF_PROV_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PofReportName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("POF_REPORT_NAME")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<long>("PofReportType")
                        .HasColumnName("POF_REPORT_TYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PROV_ORDER_FORMAT");

                    b.HasIndex("PofProvId")
                        .HasName("FK_PR_ORD_F_PROV_ID");

                    b.HasIndex("PofProvType", "PofProvId", "PofReportName")
                        .IsUnique()
                        .HasName("POF_PROV_TYPEID_REPNAME_UI");

                    b.ToTable("PROV_ORDER_FORMAT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PublishCopytoLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PbclPublishLogId")
                        .HasColumnName("PBCL_PUBLISH_LOG_ID");

                    b.Property<long>("PbclRecipientId")
                        .HasColumnName("PBCL_RECIPIENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PUBLISH_COPYTO_LINK");

                    b.HasIndex("PbclPublishLogId")
                        .HasName("PBCL_PUBLISH_LOG_ID_FK");

                    b.HasIndex("PbclRecipientId")
                        .HasName("PBCL_RECIPIENT_ID_FK");

                    b.ToTable("PUBLISH_COPYTO_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PublishItem", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PbitExternalSystemId")
                        .HasColumnName("PBIT_EXTERNAL_SYSTEM_ID");

                    b.Property<long>("PbitObjectClass")
                        .HasColumnName("PBIT_OBJECT_CLASS");

                    b.Property<long?>("PbitObjectId")
                        .HasColumnName("PBIT_OBJECT_ID");

                    b.Property<byte[]>("PbitPrepareMacro")
                        .HasColumnName("PBIT_PREPARE_MACRO")
                        .HasColumnType("image");

                    b.Property<byte[]>("PbitPublishMacro")
                        .HasColumnName("PBIT_PUBLISH_MACRO")
                        .HasColumnType("image");

                    b.Property<long>("PbitPublishTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PBIT_PUBLISH_TIMEOUT")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("PbitValidateMacro")
                        .HasColumnName("PBIT_VALIDATE_MACRO")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PUBLISH_ITEM");

                    b.HasIndex("PbitExternalSystemId")
                        .HasName("PBIT_EXTERNAL_SYSTEM_ID_FK");

                    b.HasIndex("PbitObjectId")
                        .HasName("PBIT_OBJECT_ID_FK");

                    b.ToTable("PUBLISH_ITEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PublishLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PblgDirectedtoId")
                        .HasColumnName("PBLG_DIRECTEDTO_ID");

                    b.Property<long?>("PblgLetterId")
                        .HasColumnName("PBLG_LETTER_ID");

                    b.Property<long>("PblgObjVersion")
                        .HasColumnName("PBLG_OBJ_VERSION");

                    b.Property<long>("PblgObjectClass")
                        .HasColumnName("PBLG_OBJECT_CLASS");

                    b.Property<long?>("PblgObjectId")
                        .HasColumnName("PBLG_OBJECT_ID");

                    b.Property<DateTime>("PblgPublishDate")
                        .HasColumnName("PBLG_PUBLISH_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("PblgPublisherId")
                        .HasColumnName("PBLG_PUBLISHER_ID");

                    b.Property<string>("PblgResultCode")
                        .HasColumnName("PBLG_RESULT_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("PblgResultMessage")
                        .HasColumnName("PBLG_RESULT_MESSAGE")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long>("PblgResultType")
                        .HasColumnName("PBLG_RESULT_TYPE");

                    b.Property<long>("PblgSystemId")
                        .HasColumnName("PBLG_SYSTEM_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_PUBLISH_LOG");

                    b.HasIndex("PblgDirectedtoId")
                        .HasName("PBLG_DIRECTEDTO_ID_FK");

                    b.HasIndex("PblgLetterId")
                        .HasName("PBLG_LETTER_ID_FK");

                    b.HasIndex("PblgObjectId")
                        .HasName("PBLG_OBJECT_ID_FK");

                    b.HasIndex("PblgPublisherId")
                        .HasName("PBLG_PUBLISHER_ID_FK");

                    b.HasIndex("PblgSystemId")
                        .HasName("PBLG_SYSTEM_ID_FK");

                    b.ToTable("PUBLISH_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Question", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FinProviderId")
                        .HasColumnName("FIN_PROVIDER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QuestionInvoiceId")
                        .HasColumnName("QUESTION_INVOICE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("TransId")
                        .HasColumnName("TRANS_ID");

                    b.HasKey("Oid");

                    b.HasIndex("FinProviderId")
                        .HasName("FK_QUESTION_FIN_PROVIDER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_QUESTION");

                    b.HasIndex("QuestionInvoiceId")
                        .HasName("FK_QUESTION_INVOICE");

                    b.HasIndex("TransId")
                        .HasName("FK_QUESTION_TRANS");

                    b.ToTable("QUESTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Queue", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AdminCid")
                        .HasColumnName("ADMIN_CID");

                    b.Property<long?>("AdminOid")
                        .HasColumnName("ADMIN_OID");

                    b.Property<short>("Autostart")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUTOSTART")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("CompletedLastPass")
                        .HasColumnName("COMPLETED_LAST_PASS")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("DescriptionMacroId")
                        .HasColumnName("DESCRIPTION_MACRO_ID");

                    b.Property<long?>("DescriptionScId")
                        .HasColumnName("DESCRIPTION_SC_ID");

                    b.Property<long?>("DetailsMacroId")
                        .HasColumnName("DETAILS_MACRO_ID");

                    b.Property<long?>("DetailsScId")
                        .HasColumnName("DETAILS_SC_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExternalId")
                        .HasColumnName("EXTERNAL_ID")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("InitiationMacroId")
                        .HasColumnName("INITIATION_MACRO_ID");

                    b.Property<long?>("InitiationScId")
                        .HasColumnName("INITIATION_SC_ID");

                    b.Property<DateTime?>("LastRunDatetime")
                        .HasColumnName("LAST_RUN_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextRunDatetime")
                        .HasColumnName("NEXT_RUN_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ProcessToRunOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROCESS_TO_RUN_ON")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("QueueActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUEUE_ACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QueueDatacenter")
                        .HasColumnName("QUEUE_DATACENTER");

                    b.Property<byte[]>("QueueDescription")
                        .HasColumnName("QUEUE_DESCRIPTION")
                        .HasColumnType("image");

                    b.Property<long?>("QueueDirection")
                        .HasColumnName("QUEUE_DIRECTION");

                    b.Property<long?>("QueueEmessage")
                        .HasColumnName("QUEUE_EMESSAGE");

                    b.Property<string>("QueueFilePath")
                        .HasColumnName("QUEUE_FILE_PATH")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("QueueItemCreateMacroId")
                        .HasColumnName("QUEUE_ITEM_CREATE_MACRO_ID");

                    b.Property<long?>("QueueItemCreateScId")
                        .HasColumnName("QUEUE_ITEM_CREATE_SC_ID");

                    b.Property<float?>("QueueItemLockTime")
                        .HasColumnName("QUEUE_ITEM_LOCK_TIME");

                    b.Property<long?>("QueueItemMacroId")
                        .HasColumnName("QUEUE_ITEM_MACRO_ID");

                    b.Property<long?>("QueueItemPreprocScId")
                        .HasColumnName("QUEUE_ITEM_PREPROC_SC_ID");

                    b.Property<long?>("QueueItemScId")
                        .HasColumnName("QUEUE_ITEM_SC_ID");

                    b.Property<string>("QueueName")
                        .HasColumnName("QUEUE_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("QueueNumber")
                        .HasColumnName("QUEUE_NUMBER");

                    b.Property<string>("QueuePassword")
                        .HasColumnName("QUEUE_PASSWORD")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("QueuePos")
                        .HasColumnName("QUEUE_POS");

                    b.Property<long>("QueueState")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUEUE_STATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("QueueType")
                        .HasColumnName("QUEUE_TYPE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("Queueid")
                        .HasColumnName("QUEUEID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RetiredBy")
                        .HasColumnName("RETIRED_BY");

                    b.Property<DateTime?>("RetiredOn")
                        .HasColumnName("RETIRED_ON")
                        .HasColumnType("datetime");

                    b.Property<short>("RetiredQueue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RETIRED_QUEUE")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("StopMacro")
                        .HasColumnName("STOP_MACRO")
                        .HasColumnType("image");

                    b.Property<long?>("StopMacroId")
                        .HasColumnName("STOP_MACRO_ID");

                    b.Property<long?>("StopScId")
                        .HasColumnName("STOP_SC_ID");

                    b.Property<short>("SystemQueue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SYSTEM_QUEUE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TerminationMacroId")
                        .HasColumnName("TERMINATION_MACRO_ID");

                    b.Property<long?>("TerminationScId")
                        .HasColumnName("TERMINATION_SC_ID");

                    b.HasKey("Oid");

                    b.HasIndex("CreatedBy")
                        .HasName("FK_QUEUE_CREATED_BY");

                    b.HasIndex("DescriptionMacroId")
                        .HasName("FK_QUE_SFL_DESC_MACRO_ID");

                    b.HasIndex("DescriptionScId")
                        .HasName("FK_QUEUE_SC_DESCRIPTION");

                    b.HasIndex("DetailsMacroId")
                        .HasName("FK_QUE_SFL_DETLS_MACRO_ID");

                    b.HasIndex("DetailsScId")
                        .HasName("FK_QUEUE_SC_DETAILS");

                    b.HasIndex("InitiationMacroId")
                        .HasName("FK_QUE_SFL_INIT_MACRO_ID");

                    b.HasIndex("InitiationScId")
                        .HasName("FK_QUEUE_SC_INITIATION");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_QUEUE");

                    b.HasIndex("QueueDatacenter")
                        .HasName("FK_QUEUE_DATACENTER");

                    b.HasIndex("QueueEmessage")
                        .HasName("FK_QUEUE_EMESSAGE");

                    b.HasIndex("QueueItemCreateMacroId")
                        .HasName("FK_QUE_SFL_QI_CRE_MACRO_ID");

                    b.HasIndex("QueueItemCreateScId")
                        .HasName("FK_QUEUE_SC_ITEMCREATE");

                    b.HasIndex("QueueItemMacroId")
                        .HasName("FK_QUE_SFL_QI_MACRO_ID");

                    b.HasIndex("QueueItemScId")
                        .HasName("FK_QUEUE_SC_QUEUEITEM");

                    b.HasIndex("QueuePos")
                        .HasName("FK_QUEUE_POS");

                    b.HasIndex("RetiredBy")
                        .HasName("FK_QUEUE_RETIRED_BY");

                    b.HasIndex("StopMacroId")
                        .HasName("FK_QUE_SFL_STOP_MACRO_ID");

                    b.HasIndex("StopScId")
                        .HasName("FK_QUEUE_SC_STOP");

                    b.HasIndex("TerminationMacroId")
                        .HasName("FK_QUE_SFL_TERM_MACRO_ID");

                    b.HasIndex("TerminationScId")
                        .HasName("FK_QUEUE_SC_TERMINATION");

                    b.HasIndex("QueueNumber", "PartitionId")
                        .IsUnique()
                        .HasName("I_QUEUE_NUMBER");

                    b.ToTable("QUEUE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.QueueItem", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnName("CLOSED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("ContentType")
                        .HasColumnName("CONTENT_TYPE")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<long?>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("ErrorItemNotFound")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ERROR_ITEM_NOT_FOUND")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ExternalId")
                        .HasColumnName("EXTERNAL_ID")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("FileByteSize")
                        .HasColumnName("FILE_BYTE_SIZE");

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FirstRunDatetime")
                        .HasColumnName("FIRST_RUN_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("InternalId")
                        .HasColumnName("INTERNAL_ID");

                    b.Property<DateTime?>("MaxDatetime")
                        .HasColumnName("MAX_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("MaxTries")
                        .HasColumnName("MAX_TRIES");

                    b.Property<DateTime?>("NextRunDatetime")
                        .HasColumnName("NEXT_RUN_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ObjBlob")
                        .HasColumnName("OBJ_BLOB")
                        .HasColumnType("image");

                    b.Property<long?>("ObjBlobByteSize")
                        .HasColumnName("OBJ_BLOB_BYTE_SIZE");

                    b.Property<string>("ObjExternalId")
                        .HasColumnName("OBJ_EXTERNAL_ID")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjExternalSystem")
                        .HasColumnName("OBJ_EXTERNAL_SYSTEM")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ObjectCid")
                        .HasColumnName("OBJECT_CID");

                    b.Property<long?>("ObjectOid")
                        .HasColumnName("OBJECT_OID");

                    b.Property<long?>("ObjectType")
                        .HasColumnName("OBJECT_TYPE");

                    b.Property<long?>("OriginQueueId")
                        .HasColumnName("ORIGIN_QUEUE_ID");

                    b.Property<long>("Outcome")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OUTCOME")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("OutcomeCode")
                        .HasColumnName("OUTCOME_CODE");

                    b.Property<string>("OutcomeDescription")
                        .HasColumnName("OUTCOME_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<DateTime?>("PreprocessedOn")
                        .HasColumnName("PREPROCESSED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRIORITY")
                        .HasDefaultValueSql("((10))");

                    b.Property<byte[]>("Props")
                        .HasColumnName("PROPS")
                        .HasColumnType("image");

                    b.Property<long>("QueueId")
                        .HasColumnName("QUEUE_ID");

                    b.Property<long>("QueueItemStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUEUE_ITEM_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SequenceNumber")
                        .HasColumnName("SEQUENCE_NUMBER");

                    b.Property<long>("StoredAs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STORED_AS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("TryNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRY_NUMBER")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("CreatedBy")
                        .HasName("FK_QUEUE_ITEM_CREATED_BY");

                    b.HasIndex("ObjectType")
                        .HasName("FK_QUEUEITEM_OBJTYPE");

                    b.HasIndex("OriginQueueId")
                        .HasName("FK_QITEM_ORG_QUEUE");

                    b.HasIndex("OutcomeCode")
                        .HasName("FK_QUEUEITEM_OUTCOME");

                    b.HasIndex("PatientId")
                        .HasName("FK_QUEUEITEM_PTNT_ID");

                    b.HasIndex("QueueId")
                        .HasName("FK_QUEUEITEM_QUEUE_ID");

                    b.HasIndex("ClosedOn", "NextRunDatetime")
                        .HasName("QUEUE_ITEM_I_CLOSED_ON_NEXT_RU");

                    b.HasIndex("SequenceNumber", "PartitionId")
                        .IsUnique()
                        .HasName("I_QUEUE_ITEM_SEQUENCE");

                    b.HasIndex("QueueId", "QueueItemStatus", "Deletedid", "PartitionId")
                        .HasName("QUEUE_ITEM_I_PROCESSING");

                    b.ToTable("QUEUE_ITEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.QueueItemLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LogType")
                        .HasColumnName("LOG_TYPE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("QueueItemId")
                        .HasColumnName("QUEUE_ITEM_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ResultCode")
                        .HasColumnName("RESULT_CODE");

                    b.Property<byte[]>("ResultDescription")
                        .HasColumnName("RESULT_DESCRIPTION")
                        .HasColumnType("image");

                    b.Property<long>("TryNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRY_NUMBER")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("QueueItemId")
                        .HasName("FK_QUEUEITMLOG_QUEUEITM_ID");

                    b.HasIndex("ResultCode")
                        .HasName("FK_QUEUEITMLOG_RESCODE");

                    b.ToTable("QUEUE_ITEM_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.QueueLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LogType")
                        .HasColumnName("LOG_TYPE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("QueueId")
                        .HasColumnName("QUEUE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ResultCode")
                        .HasColumnName("RESULT_CODE");

                    b.Property<byte[]>("ResultDescription")
                        .HasColumnName("RESULT_DESCRIPTION")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_QUEUE_LOG");

                    b.HasIndex("QueueId")
                        .HasName("FK_QUEUELOG_QUEUE_ID");

                    b.HasIndex("ResultCode")
                        .HasName("FK_QUEUELOG_RESCODE");

                    b.ToTable("QUEUE_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Quoteactivity", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("QuaDate")
                        .HasColumnName("QUA_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("QuaMessage")
                        .HasColumnName("QUA_MESSAGE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("QuaPosId")
                        .HasColumnName("QUA_POS_ID");

                    b.Property<long>("QuaQuoteId")
                        .HasColumnName("QUA_QUOTE_ID");

                    b.Property<long?>("QuaStatusId")
                        .HasColumnName("QUA_STATUS_ID");

                    b.Property<long?>("QuaUserId")
                        .HasColumnName("QUA_USER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_QUOTEACTIVITY");

                    b.HasIndex("QuaPosId")
                        .HasName("FK_QUA_PPPU_POS_ID");

                    b.HasIndex("QuaQuoteId")
                        .HasName("FK_QUA_QUOTE_ID");

                    b.HasIndex("QuaStatusId")
                        .HasName("FK_QUA_SHORTCODE_STATUS_ID");

                    b.HasIndex("QuaUserId")
                        .HasName("FK_QUA_PPPU_USER_ID");

                    b.ToTable("QUOTEACTIVITY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Quotedetail", b =>
                {
                    b.Property<long>("QtId")
                        .HasColumnName("QT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrapId")
                        .HasColumnName("PRAP_ID");

                    b.Property<string>("QtdtAnnotation")
                        .HasColumnName("QTDT_ANNOTATION")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("QtdtBpayReference")
                        .HasColumnName("QTDT_BPAY_REFERENCE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("QtdtCoinsurancepercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTDT_COINSURANCEPERCENTAGE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("QtdtDescription")
                        .HasColumnName("QTDT_DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("QtdtDescriptioncode")
                        .HasColumnName("QTDT_DESCRIPTIONCODE");

                    b.Property<string>("QtdtDisabilityText")
                        .HasColumnName("QTDT_DISABILITY_TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short>("QtdtIspassto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTDT_ISPASSTO")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("QtdtLinetype")
                        .HasColumnName("QTDT_LINETYPE");

                    b.Property<string>("QtdtMemberid")
                        .HasColumnName("QTDT_MEMBERID")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("QtdtMessage")
                        .HasColumnName("QTDT_MESSAGE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("QtdtPaymentdetail1")
                        .HasColumnName("QTDT_PAYMENTDETAIL1")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("QtdtPaymentdetail2")
                        .HasColumnName("QTDT_PAYMENTDETAIL2")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("QtdtPaymentdetail3")
                        .HasColumnName("QTDT_PAYMENTDETAIL3")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long>("QtdtPaymentmethod")
                        .HasColumnName("QTDT_PAYMENTMETHOD");

                    b.Property<string>("QtdtUserreference")
                        .HasColumnName("QTDT_USERREFERENCE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("QtdtVisit")
                        .HasColumnName("QTDT_VISIT");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SchdIdDescription")
                        .HasColumnName("SCHD_ID_DESCRIPTION");

                    b.Property<long?>("SchdIdDiscount")
                        .HasColumnName("SCHD_ID_DISCOUNT");

                    b.Property<long?>("SchdIdRate")
                        .HasColumnName("SCHD_ID_RATE");

                    b.Property<long?>("ShcdIdPlan")
                        .HasColumnName("SHCD_ID_PLAN");

                    b.Property<long?>("SrvcIdGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRVC_ID_GROUP")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("QtId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_QUOTEDETAIL");

                    b.HasIndex("PrapId")
                        .HasName("QTDT_FK_PRAP_ID");

                    b.HasIndex("QtId")
                        .IsUnique()
                        .HasName("QTDT_FK_QT_ID");

                    b.HasIndex("QtdtDescriptioncode")
                        .HasName("QTDT_FK_SHORTCODE");

                    b.ToTable("QUOTEDETAIL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Quoteline", b =>
                {
                    b.Property<long>("QtlnId")
                        .HasColumnName("QTLN_ID");

                    b.Property<string>("BatchPos")
                        .HasColumnName("BATCH_POS")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<long?>("CntcId")
                        .HasColumnName("CNTC_ID");

                    b.Property<long?>("ContactOid")
                        .HasColumnName("CONTACT_OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FormId")
                        .HasColumnName("FORM_ID");

                    b.Property<decimal>("LineGstTaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LINE_GST_TAX_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("LinePstTaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LINE_PST_TAX_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("LineTaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LINE_TAX_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("LklsIdAgency")
                        .HasColumnName("LKLS_ID_AGENCY");

                    b.Property<long?>("LnOrder")
                        .HasColumnName("LN_ORDER");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ParentLnId")
                        .HasColumnName("PARENT_LN_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuIdServiceprovider")
                        .HasColumnName("PPPU_ID_SERVICEPROVIDER");

                    b.Property<long?>("PppuIdValidatedby")
                        .HasColumnName("PPPU_ID_VALIDATEDBY");

                    b.Property<long?>("PrapId")
                        .HasColumnName("PRAP_ID");

                    b.Property<long?>("PtntIdService")
                        .HasColumnName("PTNT_ID_SERVICE");

                    b.Property<long>("QtId")
                        .HasColumnName("QT_ID");

                    b.Property<long?>("QtIdBulkinvoice")
                        .HasColumnName("QT_ID_BULKINVOICE");

                    b.Property<long?>("QtIdService")
                        .HasColumnName("QT_ID_SERVICE");

                    b.Property<DateTime?>("QtlnAccessionDate")
                        .HasColumnName("QTLN_ACCESSION_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("QtlnAccntRefNum")
                        .HasColumnName("QTLN_ACCNT_REF_NUM")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<DateTime?>("QtlnAdmissionDate")
                        .HasColumnName("QTLN_ADMISSION_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("QtlnAgencycode")
                        .HasColumnName("QTLN_AGENCYCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal>("QtlnAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("QtlnAmountpaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_AMOUNTPAID")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("QtlnAttendance")
                        .HasColumnName("QTLN_ATTENDANCE");

                    b.Property<string>("QtlnBatch")
                        .HasColumnName("QTLN_BATCH")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("QtlnBodyPartId")
                        .HasColumnName("QTLN_BODY_PART_ID");

                    b.Property<decimal>("QtlnBonusamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_BONUSAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("QtlnBonuscode")
                        .HasColumnName("QTLN_BONUSCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("QtlnBonusdescription")
                        .HasColumnName("QTLN_BONUSDESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("QtlnCalled")
                        .HasColumnName("QTLN_CALLED")
                        .HasColumnType("datetime");

                    b.Property<long?>("QtlnCaseId")
                        .HasColumnName("QTLN_CASE_ID");

                    b.Property<long?>("QtlnChargerate")
                        .HasColumnName("QTLN_CHARGERATE");

                    b.Property<DateTime?>("QtlnCollectionDate")
                        .HasColumnName("QTLN_COLLECTION_DATE")
                        .HasColumnType("datetime");

                    b.Property<decimal>("QtlnCopayamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_COPAYAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("QtlnCopayamountpaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_COPAYAMOUNTPAID")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<short>("QtlnCoreService")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_CORE_SERVICE")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("QtlnCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_COST")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("QtlnDescription")
                        .HasColumnName("QTLN_DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("QtlnDiagnoses")
                        .HasColumnName("QTLN_DIAGNOSES");

                    b.Property<DateTime?>("QtlnDischargeDate")
                        .HasColumnName("QTLN_DISCHARGE_DATE")
                        .HasColumnType("datetime");

                    b.Property<decimal>("QtlnDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_DISCOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("QtlnDiscountId")
                        .HasColumnName("QTLN_DISCOUNT_ID");

                    b.Property<decimal>("QtlnDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_DISTANCE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<short>("QtlnDontPrint")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_DONT_PRINT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtlnDscdId1")
                        .HasColumnName("QTLN_DSCD_ID_1");

                    b.Property<long?>("QtlnDscdId2")
                        .HasColumnName("QTLN_DSCD_ID_2");

                    b.Property<long?>("QtlnDscdId3")
                        .HasColumnName("QTLN_DSCD_ID_3");

                    b.Property<long?>("QtlnFacility")
                        .HasColumnName("QTLN_FACILITY");

                    b.Property<decimal>("QtlnFeePerUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_FEE_PER_UNIT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("QtlnFpayeramount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_FPAYERAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("QtlnFpayeramountpaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_FPAYERAMOUNTPAID")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime?>("QtlnFromdate")
                        .HasColumnName("QTLN_FROMDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("QtlnGstTaxrate")
                        .HasColumnName("QTLN_GST_TAXRATE");

                    b.Property<short>("QtlnHospital")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_HOSPITAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("QtlnIcpremium")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_ICPREMIUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtlnIdDebitline")
                        .HasColumnName("QTLN_ID_DEBITLINE");

                    b.Property<long?>("QtlnIdService")
                        .HasColumnName("QTLN_ID_SERVICE");

                    b.Property<string>("QtlnImmProductName")
                        .HasColumnName("QTLN_IMM_PRODUCT_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("QtlnInpatientposid")
                        .HasColumnName("QTLN_INPATIENTPOSID");

                    b.Property<DateTime?>("QtlnLastDate")
                        .HasColumnName("QTLN_LAST_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("QtlnLocation")
                        .HasColumnName("QTLN_LOCATION");

                    b.Property<decimal>("QtlnMileagebonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_MILEAGEBONUS")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("QtlnMileagerate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_MILEAGERATE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("QtlnModifier")
                        .HasColumnName("QTLN_MODIFIER")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<short>("QtlnMva")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_MVA")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtlnNatureId")
                        .HasColumnName("QTLN_NATURE_ID");

                    b.Property<string>("QtlnNote")
                        .HasColumnName("QTLN_NOTE")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<short>("QtlnOncall")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_ONCALL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtlnPatientgroup")
                        .HasColumnName("QTLN_PATIENTGROUP");

                    b.Property<long?>("QtlnPstTaxrate")
                        .HasColumnName("QTLN_PST_TAXRATE");

                    b.Property<decimal>("QtlnQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_QUANTITY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("QtlnReference")
                        .HasColumnName("QTLN_REFERENCE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("QtlnReferral")
                        .HasColumnName("QTLN_REFERRAL");

                    b.Property<long?>("QtlnReflOverride")
                        .HasColumnName("QTLN_REFL_OVERRIDE");

                    b.Property<long?>("QtlnRoleId")
                        .HasColumnName("QTLN_ROLE_ID");

                    b.Property<string>("QtlnRotation")
                        .HasColumnName("QTLN_ROTATION")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<short>("QtlnRule3Exempt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_RULE3_EXEMPT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("QtlnS4b3Exempt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_S4B3_EXEMPT")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("QtlnSchedulebonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_SCHEDULEBONUS")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("QtlnSchedulecode")
                        .HasColumnName("QTLN_SCHEDULECODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("QtlnScpId")
                        .HasColumnName("QTLN_SCP_ID")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<long?>("QtlnServicepos")
                        .HasColumnName("QTLN_SERVICEPOS");

                    b.Property<long>("QtlnSide")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_SIDE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtlnSite")
                        .HasColumnName("QTLN_SITE");

                    b.Property<long?>("QtlnStatus")
                        .HasColumnName("QTLN_STATUS");

                    b.Property<long?>("QtlnStockLocationId")
                        .HasColumnName("QTLN_STOCK_LOCATION_ID");

                    b.Property<long?>("QtlnStockLotId")
                        .HasColumnName("QTLN_STOCK_LOT_ID");

                    b.Property<long?>("QtlnSubmissioncode")
                        .HasColumnName("QTLN_SUBMISSIONCODE");

                    b.Property<decimal>("QtlnSubsidyamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_SUBSIDYAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("QtlnTaxrate")
                        .HasColumnName("QTLN_TAXRATE");

                    b.Property<DateTime?>("QtlnTodate")
                        .HasColumnName("QTLN_TODATE")
                        .HasColumnType("datetime");

                    b.Property<decimal>("QtlnTravelamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_TRAVELAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("QtlnTravelcode")
                        .HasColumnName("QTLN_TRAVELCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("QtlnTraveldescription")
                        .HasColumnName("QTLN_TRAVELDESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("QtlnTreatmentLocation")
                        .HasColumnName("QTLN_TREATMENT_LOCATION");

                    b.Property<float>("QtlnUnitPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_UNIT_PERCENT")
                        .HasDefaultValueSql("((100))");

                    b.Property<byte[]>("QtlnValidMacroMsg")
                        .HasColumnName("QTLN_VALID_MACRO_MSG")
                        .HasColumnType("image");

                    b.Property<long>("QtlnValidMacroType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_VALID_MACRO_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("QtlnValidationMsg")
                        .HasColumnName("QTLN_VALIDATION_MSG")
                        .HasColumnType("image");

                    b.Property<long>("QtlnValidationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QTLN_VALIDATION_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RefType")
                        .HasColumnName("REF_TYPE");

                    b.Property<long?>("ShcdIdLedger")
                        .HasColumnName("SHCD_ID_LEDGER");

                    b.Property<long?>("SrvcId")
                        .HasColumnName("SRVC_ID");

                    b.HasKey("QtlnId");

                    b.HasIndex("FormId")
                        .HasName("QL_FK_FORM_ID");

                    b.HasIndex("LklsIdAgency")
                        .HasName("QL_FK_PATIENT_AGENCY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_QUOTELINE");

                    b.HasIndex("ParentLnId")
                        .HasName("QL_FK_PARENT_LN_I");

                    b.HasIndex("PppuIdServiceprovider")
                        .HasName("QL_FK_SRVCPROVIDER");

                    b.HasIndex("PppuIdValidatedby")
                        .HasName("QL_FK_VALIDATEDBY");

                    b.HasIndex("PrapId")
                        .HasName("QL_FK_PRAP_ID");

                    b.HasIndex("PtntIdService")
                        .HasName("QUOTELINE_FK_PTNT_SERVICE");

                    b.HasIndex("QtId")
                        .HasName("QL_FK_QT_ID");

                    b.HasIndex("QtIdBulkinvoice")
                        .HasName("QL_FK_ID_BULKINVOICE");

                    b.HasIndex("QtIdService")
                        .HasName("QUOTELINE_FK_QT_SERVICE");

                    b.HasIndex("QtlnAttendance")
                        .HasName("QL_FK_ATTENDANCE");

                    b.HasIndex("QtlnBodyPartId")
                        .HasName("QTLN_BODY_PART_ID_FK");

                    b.HasIndex("QtlnCaseId")
                        .HasName("QL_FK_BCASE_CASE_ID");

                    b.HasIndex("QtlnChargerate")
                        .HasName("QL_FK_CHARGERATE");

                    b.HasIndex("QtlnDiagnoses")
                        .HasName("QUOTELINE_FK_DIAGNOSES");

                    b.HasIndex("QtlnDiscountId")
                        .HasName("FK_QUOTELINE_DISCOUNT_ID");

                    b.HasIndex("QtlnDscdId1")
                        .HasName("QUOTELINE_FK_DSCD_ID_1");

                    b.HasIndex("QtlnDscdId2")
                        .HasName("QUOTELINE_FK_DSCD_ID_2");

                    b.HasIndex("QtlnDscdId3")
                        .HasName("QUOTELINE_FK_DSCD_ID_3");

                    b.HasIndex("QtlnFacility")
                        .HasName("QUOTELINE_FACILITY_FK");

                    b.HasIndex("QtlnGstTaxrate")
                        .HasName("FK_QTLN_SHCD_GST_TAXRATE");

                    b.HasIndex("QtlnIdDebitline")
                        .HasName("QL_FK_ID_DEBITLINE");

                    b.HasIndex("QtlnIdService")
                        .HasName("QUOTELINE_FK_QTLN_SERVICE");

                    b.HasIndex("QtlnInpatientposid")
                        .HasName("QL_FK_INPATIENTPOSID");

                    b.HasIndex("QtlnLocation")
                        .HasName("QUOTELINE_LOCATION_FK");

                    b.HasIndex("QtlnNatureId")
                        .HasName("QTLN_NATURE_ID_FK");

                    b.HasIndex("QtlnPstTaxrate")
                        .HasName("FK_QTLN_SHCD_PST_TAXRATE");

                    b.HasIndex("QtlnReferral")
                        .HasName("QL_FK_REFERRAL");

                    b.HasIndex("QtlnServicepos")
                        .HasName("QL_FK_SERVICEPOS");

                    b.HasIndex("QtlnStockLocationId")
                        .HasName("FK_QTLN_STOCK_LOCATION_ID");

                    b.HasIndex("QtlnStockLotId")
                        .HasName("FK_QTLN_STOCK_LOT_ID");

                    b.HasIndex("QtlnSubmissioncode")
                        .HasName("QUOTELINE_SUBMISSIONCODE_FK");

                    b.HasIndex("QtlnTaxrate")
                        .HasName("QL_FK_TAXRATE");

                    b.HasIndex("ShcdIdLedger")
                        .HasName("QL_FK_LEDGER");

                    b.HasIndex("SrvcId")
                        .HasName("QL_FK_SRVC_ID");

                    b.ToTable("QUOTELINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Quotes", b =>
                {
                    b.Property<long>("QtId")
                        .HasColumnName("QT_ID");

                    b.Property<long?>("ArchId")
                        .HasColumnName("ARCH_ID");

                    b.Property<long?>("BatchId")
                        .HasColumnName("BATCH_ID");

                    b.Property<long?>("DepositId")
                        .HasColumnName("DEPOSIT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EobId")
                        .HasColumnName("EOB_ID");

                    b.Property<long>("FinRefNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FIN_REF_NUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FinRefType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FIN_REF_TYPE")
                        .HasColumnType("char(2)")
                        .HasDefaultValueSql("('')");

                    b.Property<short>("FromEob")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FROM_EOB")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("InvoiceValidatedBy")
                        .HasColumnName("INVOICE_VALIDATED_BY");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuIdIncome")
                        .HasColumnName("PPPU_ID_INCOME");

                    b.Property<long?>("PppuIdPaymentpos")
                        .HasColumnName("PPPU_ID_PAYMENTPOS");

                    b.Property<long?>("PppuIdPaymentprovider")
                        .HasColumnName("PPPU_ID_PAYMENTPROVIDER");

                    b.Property<long?>("PppuIdPos")
                        .HasColumnName("PPPU_ID_POS");

                    b.Property<long?>("PppuIdService")
                        .HasColumnName("PPPU_ID_SERVICE");

                    b.Property<long?>("PrapId")
                        .HasColumnName("PRAP_ID");

                    b.Property<long>("PtntIdGuarantor")
                        .HasColumnName("PTNT_ID_GUARANTOR");

                    b.Property<long?>("PtntIdInsurer")
                        .HasColumnName("PTNT_ID_INSURER");

                    b.Property<long?>("PtntIdService")
                        .HasColumnName("PTNT_ID_SERVICE");

                    b.Property<string>("QtAgencycode")
                        .HasColumnName("QT_AGENCYCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal>("QtAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("QtAmountreconciled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_AMOUNTRECONCILED")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("QtAnnotation")
                        .HasColumnName("QT_ANNOTATION")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long?>("QtAttendance")
                        .HasColumnName("QT_ATTENDANCE");

                    b.Property<long?>("QtAutocreated")
                        .HasColumnName("QT_AUTOCREATED");

                    b.Property<string>("QtBpayReference")
                        .HasColumnName("QT_BPAY_REFERENCE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("QtCaseId")
                        .HasColumnName("QT_CASE_ID");

                    b.Property<decimal>("QtCoinsurancepercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_COINSURANCEPERCENTAGE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("QtCopayamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_COPAYAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("QtCopayamountreconciled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_COPAYAMOUNTRECONCILED")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("QtCoverid")
                        .HasColumnName("QT_COVERID");

                    b.Property<long?>("QtCreditNoteId")
                        .HasColumnName("QT_CREDIT_NOTE_ID");

                    b.Property<string>("QtDataCentre")
                        .HasColumnName("QT_DATA_CENTRE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime>("QtDate")
                        .HasColumnName("QT_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("QtDeletedbyid")
                        .HasColumnName("QT_DELETEDBYID");

                    b.Property<DateTime?>("QtDeleteddt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_DELETEDDT")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('01-JAN-3000')");

                    b.Property<long>("QtDeletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("QtDescription")
                        .HasColumnName("QT_DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("QtDescriptioncode")
                        .HasColumnName("QT_DESCRIPTIONCODE");

                    b.Property<string>("QtDisabilityText")
                        .HasColumnName("QT_DISABILITY_TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short>("QtEmergencyreferral")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_EMERGENCYREFERRAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtFpayer")
                        .HasColumnName("QT_FPAYER");

                    b.Property<decimal>("QtFpayeramount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_FPAYERAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("QtFpayeramountreconciled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_FPAYERAMOUNTRECONCILED")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("QtIdAnnulled")
                        .HasColumnName("QT_ID_ANNULLED");

                    b.Property<long?>("QtIdGroup")
                        .HasColumnName("QT_ID_GROUP");

                    b.Property<long?>("QtInvoiceId")
                        .HasColumnName("QT_INVOICE_ID");

                    b.Property<short>("QtIsadmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_ISADMIN")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("QtIspassto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_ISPASSTO")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("QtIsreversed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_ISREVERSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("QtIsunmatched")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_ISUNMATCHED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtLedgerId")
                        .HasColumnName("QT_LEDGER_ID");

                    b.Property<long?>("QtLetterId")
                        .HasColumnName("QT_LETTER_ID");

                    b.Property<short>("QtLostreferral")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_LOSTREFERRAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("QtManualReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_MANUAL_REVIEW")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("QtMedicareType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_MEDICARE_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("QtMemberid")
                        .HasColumnName("QT_MEMBERID")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("QtMessage")
                        .HasColumnName("QT_MESSAGE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("QtPayer")
                        .HasColumnName("QT_PAYER");

                    b.Property<long>("QtPayerType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_PAYER_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtPayerplan")
                        .HasColumnName("QT_PAYERPLAN");

                    b.Property<long?>("QtPayerplanrate")
                        .HasColumnName("QT_PAYERPLANRATE");

                    b.Property<string>("QtPaymentdetail1")
                        .HasColumnName("QT_PAYMENTDETAIL1")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("QtPaymentdetail2")
                        .HasColumnName("QT_PAYMENTDETAIL2")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("QtPaymentdetail3")
                        .HasColumnName("QT_PAYMENTDETAIL3")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long>("QtPaymentmethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_PAYMENTMETHOD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtPendingstatusId")
                        .HasColumnName("QT_PENDINGSTATUS_ID");

                    b.Property<string>("QtReference")
                        .HasColumnName("QT_REFERENCE")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<long?>("QtReferral")
                        .HasColumnName("QT_REFERRAL");

                    b.Property<long?>("QtRequestOid")
                        .HasColumnName("QT_REQUEST_OID");

                    b.Property<short>("QtRequiresvalidation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_REQUIRESVALIDATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("QtResubmitId")
                        .HasColumnName("QT_RESUBMIT_ID");

                    b.Property<long?>("QtSecondpayer")
                        .HasColumnName("QT_SECONDPAYER");

                    b.Property<long?>("QtSeqNumber")
                        .HasColumnName("QT_SEQ_NUMBER");

                    b.Property<double?>("QtSplitprecent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_SPLITPRECENT")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("QtSplitprov")
                        .HasColumnName("QT_SPLITPROV");

                    b.Property<short>("QtStartedEditing")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_STARTED_EDITING")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("QtStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QT_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("QtType")
                        .HasColumnName("QT_TYPE");

                    b.Property<string>("QtUserreference")
                        .HasColumnName("QT_USERREFERENCE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SchdIdDiscount")
                        .HasColumnName("SCHD_ID_DISCOUNT");

                    b.Property<long?>("SchdIdRate")
                        .HasColumnName("SCHD_ID_RATE");

                    b.Property<long?>("ShcdIdPlan")
                        .HasColumnName("SHCD_ID_PLAN");

                    b.HasKey("QtId");

                    b.HasIndex("BatchId")
                        .HasName("FK_QUOTE_BATCH_ID");

                    b.HasIndex("DepositId")
                        .HasName("FK_QUOTE_DEPOSIT_ID");

                    b.HasIndex("EobId")
                        .HasName("FK_QUOTE_EOB_ID");

                    b.HasIndex("InvoiceValidatedBy")
                        .HasName("FK_QUOTE_VALIDATED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_QUOTES");

                    b.HasIndex("PppuIdIncome")
                        .HasName("FK_QUOTE_PPPU_ID_INCOME");

                    b.HasIndex("PppuIdPaymentpos")
                        .HasName("FK_QUOTE_PPPU_ID_PAYMPOS");

                    b.HasIndex("PppuIdPaymentprovider")
                        .HasName("FK_QUOTE_PPPU_ID_PAYMPROV");

                    b.HasIndex("PppuIdPos")
                        .HasName("QUOTES_FK_PPPU_ID_POS");

                    b.HasIndex("PppuIdService")
                        .HasName("FK_QUOTE_PPPU_ID_SERVICE");

                    b.HasIndex("PrapId")
                        .HasName("FK_QUOTE_PRAP_ID");

                    b.HasIndex("PtntIdGuarantor")
                        .HasName("FK_QUOTE_GUARANTOR");

                    b.HasIndex("PtntIdInsurer")
                        .HasName("FK_QUOTE_INSURER");

                    b.HasIndex("PtntIdService")
                        .HasName("FK_QUOTE_PTNT_SERVICE");

                    b.HasIndex("QtAttendance")
                        .HasName("FK_QUOTE_ATTENDANCE");

                    b.HasIndex("QtAutocreated")
                        .HasName("FK_QT_AUTOCREATED");

                    b.HasIndex("QtCaseId")
                        .HasName("FK_QUOTE_BCASE_CASE_ID");

                    b.HasIndex("QtCoverid")
                        .HasName("FK_QUOTECOVER");

                    b.HasIndex("QtCreditNoteId")
                        .HasName("QT_CREDIT_NOTE_ID_FK");

                    b.HasIndex("QtDate")
                        .HasName("I_QT_DATE");

                    b.HasIndex("QtDeletedbyid")
                        .HasName("FK_QUOTE_DELETEDBYID");

                    b.HasIndex("QtDescriptioncode")
                        .HasName("FK_QUOTE_DESCRIPTIONCODE");

                    b.HasIndex("QtFpayer")
                        .HasName("FK_QUOTES_PATIENT_FPAYER");

                    b.HasIndex("QtIdAnnulled")
                        .HasName("QUOTES_FK_ANNULLED");

                    b.HasIndex("QtIdGroup")
                        .HasName("QUOTES_FK_GROUP");

                    b.HasIndex("QtInvoiceId")
                        .HasName("FK_QT_INVOICE_ID");

                    b.HasIndex("QtLedgerId")
                        .HasName("FK_QT_LEDGER_SHORTCODE");

                    b.HasIndex("QtLetterId")
                        .HasName("FK_QT_LETTER_ID");

                    b.HasIndex("QtPayer")
                        .HasName("QUOTES_FK_PAYER");

                    b.HasIndex("QtPayerplan")
                        .HasName("QUOTES_FK_PAYERPLAN");

                    b.HasIndex("QtPayerplanrate")
                        .HasName("FK_QUOTE_PAYERPLANRATE");

                    b.HasIndex("QtPendingstatusId")
                        .HasName("FK_QT_SHCD_PENDINGSTATUS_ID");

                    b.HasIndex("QtReference")
                        .HasName("I_QT_REFERENCE");

                    b.HasIndex("QtReferral")
                        .HasName("FK_QUOTE_REFERRAL");

                    b.HasIndex("QtRequestOid")
                        .HasName("FK_QUOTES_REQUEST");

                    b.HasIndex("QtRequiresvalidation")
                        .HasName("I_QT_REQUIRESVALIDATION");

                    b.HasIndex("QtResubmitId")
                        .HasName("QT_RESUBMIT_ID_FK");

                    b.HasIndex("QtSecondpayer")
                        .HasName("QUOTES_FK_SECONDPAYER");

                    b.HasIndex("QtSplitprov")
                        .HasName("FK_QT_SPLITPROVIDER");

                    b.HasIndex("QtStatus")
                        .HasName("QUOTES_I_QT_STATUS");

                    b.HasIndex("SchdIdDiscount")
                        .HasName("FK_QUOTE_DISCOUNT");

                    b.HasIndex("SchdIdRate")
                        .HasName("FK_QUOTE_RATE");

                    b.HasIndex("ShcdIdPlan")
                        .HasName("FK_QUOTE_PLAN");

                    b.HasIndex("FinRefType", "FinRefNum")
                        .HasName("QUOTE_REF_TYPE_NUM");

                    b.ToTable("QUOTES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RbField", b =>
                {
                    b.Property<string>("TableName")
                        .HasColumnName("TABLE_NAME")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("FieldName")
                        .HasColumnName("FIELD_NAME")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Autosearch")
                        .HasColumnName("AUTOSEARCH")
                        .HasColumnType("char(1)");

                    b.Property<string>("Datatype")
                        .HasColumnName("DATATYPE")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("FieldAlias")
                        .HasColumnName("FIELD_ALIAS")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Mandatory")
                        .HasColumnName("MANDATORY")
                        .HasColumnType("char(1)");

                    b.Property<string>("Searchable")
                        .HasColumnName("SEARCHABLE")
                        .HasColumnType("char(1)");

                    b.Property<string>("Selectable")
                        .HasColumnName("SELECTABLE")
                        .HasColumnType("char(1)");

                    b.Property<string>("Sortable")
                        .HasColumnName("SORTABLE")
                        .HasColumnType("char(1)");

                    b.HasKey("TableName", "FieldName");

                    b.ToTable("RB_FIELD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RbJoin", b =>
                {
                    b.Property<string>("TableName1")
                        .HasColumnName("TABLE_NAME1")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("TableName2")
                        .HasColumnName("TABLE_NAME2")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("FieldNames1")
                        .HasColumnName("FIELD_NAMES1")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FieldNames2")
                        .HasColumnName("FIELD_NAMES2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("JoinType")
                        .HasColumnName("JOIN_TYPE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Operators")
                        .HasColumnName("OPERATORS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("TableName1", "TableName2");

                    b.ToTable("RB_JOIN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RbTable", b =>
                {
                    b.Property<string>("TableName")
                        .HasColumnName("TABLE_NAME")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("TableAlias")
                        .HasColumnName("TABLE_ALIAS")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("TableName");

                    b.ToTable("RB_TABLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallauditmacrolist", b =>
                {
                    b.Property<long>("RcpaId")
                        .HasColumnName("RCPA_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("RcpaAddonimport")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPA_ADDONIMPORT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RcpaCareplanid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPA_CAREPLANID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RcpaDeletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPA_DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RcpaMacroname")
                        .HasColumnName("RCPA_MACRONAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("RcpaMacrotext")
                        .HasColumnName("RCPA_MACROTEXT")
                        .HasColumnType("image");

                    b.Property<string>("RcpaOnimportcode")
                        .HasColumnName("RCPA_ONIMPORTCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("RcpaId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_RECALLAUDITMACROLIS");

                    b.HasIndex("RcpaCareplanid")
                        .HasName("FK_CAREPLANID_RCPL_ID");

                    b.ToTable("RECALLAUDITMACROLIST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallcarevisit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RcvDateOffsetAmount")
                        .HasColumnName("RCV_DATE_OFFSET_AMOUNT");

                    b.Property<long>("RcvDateOffsetType")
                        .HasColumnName("RCV_DATE_OFFSET_TYPE");

                    b.Property<short>("RcvIsImmunisation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCV_IS_IMMUNISATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RcvPosId")
                        .HasColumnName("RCV_POS_ID");

                    b.Property<long>("RcvPosType")
                        .HasColumnName("RCV_POS_TYPE");

                    b.Property<long?>("RcvProviderId")
                        .HasColumnName("RCV_PROVIDER_ID");

                    b.Property<long>("RcvProviderType")
                        .HasColumnName("RCV_PROVIDER_TYPE");

                    b.Property<string>("RcvReasonDesc")
                        .HasColumnName("RCV_REASON_DESC")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("RcvReasonId")
                        .HasColumnName("RCV_REASON_ID");

                    b.Property<long>("RcvRepeatAmount")
                        .HasColumnName("RCV_REPEAT_AMOUNT");

                    b.Property<long>("RcvRepeatType")
                        .HasColumnName("RCV_REPEAT_TYPE");

                    b.Property<long?>("RcvVisitTypeId")
                        .HasColumnName("RCV_VISIT_TYPE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("RECALLCAREVISIT_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLCAREVISIT_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RECALLCAREVISIT_FK_MASTER");

                    b.HasIndex("RcvPosId")
                        .HasName("RCV_POS_ID_FK");

                    b.HasIndex("RcvProviderId")
                        .HasName("RCV_PROVIDER_ID_FK");

                    b.HasIndex("RcvReasonId")
                        .HasName("RCV_REASON_ID_FK");

                    b.HasIndex("RcvVisitTypeId")
                        .HasName("RCV_VISIT_TYPE_ID_FK");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLCAREVISIT_I_MASTERVERS");

                    b.ToTable("RECALLCAREVISIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallimmunisation", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AdverseConfidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ADVERSE_CONFIDENCE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AdverseNature")
                        .HasColumnName("ADVERSE_NATURE")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<long?>("AdverseSeverity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ADVERSE_SEVERITY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Batch")
                        .HasColumnName("BATCH")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("BatchDiluent")
                        .HasColumnName("BATCH_DILUENT")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("BatchDiluentExpiry")
                        .HasColumnName("BATCH_DILUENT_EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BatchExpiry")
                        .HasColumnName("BATCH_EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long?>("DiluentStockItemId")
                        .HasColumnName("DILUENT_STOCK_ITEM_ID");

                    b.Property<long?>("DiluentStockLotId")
                        .HasColumnName("DILUENT_STOCK_LOT_ID");

                    b.Property<short>("DoneElsewhere")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DONE_ELSEWHERE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Dose")
                        .HasColumnName("DOSE");

                    b.Property<decimal>("DoseValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DOSE_VALUE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExternalAgency")
                        .HasColumnName("EXTERNAL_AGENCY")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long?>("IndicationShortcodeId")
                        .HasColumnName("INDICATION_SHORTCODE_ID");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Needle")
                        .HasColumnName("NEEDLE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RouteShortcodeId")
                        .HasColumnName("ROUTE_SHORTCODE_ID");

                    b.Property<long?>("RxCid")
                        .HasColumnName("RX_CID");

                    b.Property<long?>("RxId")
                        .HasColumnName("RX_ID");

                    b.Property<long?>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.Property<long?>("SiteShortcodeId")
                        .HasColumnName("SITE_SHORTCODE_ID");

                    b.Property<long?>("StockLotId")
                        .HasColumnName("STOCK_LOT_ID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("RECALLIMM_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLIMM_FK_DELETEDBY");

                    b.HasIndex("DiluentStockItemId")
                        .HasName("IMM_DIL_STOCK_ITEM_FK");

                    b.HasIndex("DiluentStockLotId")
                        .HasName("IMM_DLNT_STOCK_LOT_FK");

                    b.HasIndex("Dose")
                        .HasName("RECALLIMMUNISATION_DOSE_FK");

                    b.HasIndex("IndicationShortcodeId")
                        .HasName("FK_INDICATION_SHORTCODE_ID");

                    b.HasIndex("MasterId")
                        .HasName("RECALLIMMUNISATION_FK_MASTER");

                    b.HasIndex("Needle")
                        .HasName("RECALLIMMUNISATION_NEEDLE_FK");

                    b.HasIndex("RouteShortcodeId")
                        .HasName("FK_RI_ROUTE_SHORTCODE_ID");

                    b.HasIndex("RxId")
                        .HasName("RECALLIMM_FK_RX_ID");

                    b.HasIndex("ServiceId")
                        .HasName("IMM_SERVICE_FK");

                    b.HasIndex("SiteShortcodeId")
                        .HasName("FK_RI_SITE_SHORTCODE_ID");

                    b.HasIndex("StockLotId")
                        .HasName("IMM_STOCK_LOT_FK");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLIMM_I_MASTERVERS");

                    b.ToTable("RECALLIMMUNISATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallobjective", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("ApprovalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APPROVAL_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Careobjectiveid")
                        .HasColumnName("CAREOBJECTIVEID");

                    b.Property<long?>("Caseid")
                        .HasColumnName("CASEID");

                    b.Property<DateTime?>("Completedon")
                        .HasColumnName("COMPLETEDON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<short>("Datematchesplan")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DATEMATCHESPLAN")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(2500)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnName("ENDDATE")
                        .HasColumnType("datetime");

                    b.Property<short>("Hold")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HOLD")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Iscompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISCOMPLETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Orderindex")
                        .HasColumnName("ORDERINDEX");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<long?>("Privacyroleid")
                        .HasColumnName("PRIVACYROLEID");

                    b.Property<long>("Recallplanid")
                        .HasColumnName("RECALLPLANID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Reviewdate")
                        .HasColumnName("REVIEWDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.Property<long?>("ShcdCompletedoutcomeid")
                        .HasColumnName("SHCD_COMPLETEDOUTCOMEID");

                    b.Property<long?>("ShcdObjectivetypeid")
                        .HasColumnName("SHCD_OBJECTIVETYPEID");

                    b.Property<string>("Sourceref")
                        .HasColumnName("SOURCEREF")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Startdate")
                        .HasColumnName("STARTDATE")
                        .HasColumnType("datetime");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Careobjectiveid")
                        .HasName("FK_RECALLOBJECTIVE_CAREO_ID");

                    b.HasIndex("Caseid")
                        .HasName("FK_RECALLOBJECTIVE_CASEID");

                    b.HasIndex("Createdby")
                        .HasName("RECALLOBJECTIVE_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLOBJECTIVE_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RECALLOBJECTIVE_FK_MASTER");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("RECALLOBJECTIVE_FK_PPPU");

                    b.HasIndex("Privacyroleid")
                        .HasName("FK_RECALLOBJECTIVE_PR_ID");

                    b.HasIndex("Recallplanid")
                        .HasName("FK_RECALLOBJECTIVE_RP_ID");

                    b.HasIndex("ServiceId")
                        .HasName("FK_RECALLOBJECTIVE_SERVICE_ID");

                    b.HasIndex("ShcdCompletedoutcomeid")
                        .HasName("FK_RECALLOBJECTIVE_CO_ID");

                    b.HasIndex("ShcdObjectivetypeid")
                        .HasName("FK_RECALLOBJECTIVE_OT_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLOBJECTIVE_I_MASTERVERS");

                    b.ToTable("RECALLOBJECTIVE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplan", b =>
                {
                    b.Property<long>("RcplId")
                        .HasColumnName("RCPL_ID");

                    b.Property<DateTime>("Changed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("RcplAllowmultipleuseinptnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPL_ALLOWMULTIPLEUSEINPTNT")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("RcplAssmacro")
                        .HasColumnName("RCPL_ASSMACRO")
                        .HasColumnType("image");

                    b.Property<byte[]>("RcplAuditmacros")
                        .HasColumnName("RCPL_AUDITMACROS")
                        .HasColumnType("image");

                    b.Property<DateTime?>("RcplChanged")
                        .HasColumnName("RCPL_CHANGED")
                        .HasColumnType("datetime");

                    b.Property<string>("RcplComment")
                        .HasColumnName("RCPL_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<byte[]>("RcplCompletedcodes")
                        .HasColumnName("RCPL_COMPLETEDCODES")
                        .HasColumnType("image");

                    b.Property<long?>("RcplComplexFilterId")
                        .HasColumnName("RCPL_COMPLEX_FILTER_ID");

                    b.Property<byte[]>("RcplDeclinedcodes")
                        .HasColumnName("RCPL_DECLINEDCODES")
                        .HasColumnType("image");

                    b.Property<long?>("RcplDefaultStreamId")
                        .HasColumnName("RCPL_DEFAULT_STREAM_ID");

                    b.Property<short>("RcplDenyDuplicating")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPL_DENY_DUPLICATING")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("RcplDenyEditing")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPL_DENY_EDITING")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RcplDescription")
                        .HasColumnName("RCPL_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("RcplDesignedbyid")
                        .HasColumnName("RCPL_DESIGNEDBYID");

                    b.Property<long?>("RcplEnroltype")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPL_ENROLTYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("RcplExcludedcodes")
                        .HasColumnName("RCPL_EXCLUDEDCODES")
                        .HasColumnType("image");

                    b.Property<long>("RcplExclusionUcp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPL_EXCLUSION_UCP")
                        .HasDefaultValueSql("((2))");

                    b.Property<string>("RcplExtagency")
                        .HasColumnName("RCPL_EXTAGENCY")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RcplGolivefrom")
                        .HasColumnName("RCPL_GOLIVEFROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RcplGoliveto")
                        .HasColumnName("RCPL_GOLIVETO")
                        .HasColumnType("datetime");

                    b.Property<long?>("RcplHelpInfo")
                        .HasColumnName("RCPL_HELP_INFO");

                    b.Property<string>("RcplInitassessmentformcode")
                        .HasColumnName("RCPL_INITASSESSMENTFORMCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<short>("RcplIsOutcomeMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPL_IS_OUTCOME_MANDATORY")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("RcplObjectivesB")
                        .HasColumnName("RCPL_OBJECTIVES_B")
                        .HasColumnType("image");

                    b.Property<short>("RcplOptOnOff")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPL_OPT_ON_OFF")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("RcplOrdersAudiologyKwl")
                        .HasColumnName("RCPL_ORDERS_AUDIOLOGY_KWL")
                        .HasColumnType("image");

                    b.Property<byte[]>("RcplOrdersOtherKwl")
                        .HasColumnName("RCPL_ORDERS_OTHER_KWL")
                        .HasColumnType("image");

                    b.Property<byte[]>("RcplOrdersPathologyKwl")
                        .HasColumnName("RCPL_ORDERS_PATHOLOGY_KWL")
                        .HasColumnType("image");

                    b.Property<byte[]>("RcplOrdersPrescriptKwl")
                        .HasColumnName("RCPL_ORDERS_PRESCRIPT_KWL")
                        .HasColumnType("image");

                    b.Property<byte[]>("RcplOrdersRadiologyKwl")
                        .HasColumnName("RCPL_ORDERS_RADIOLOGY_KWL")
                        .HasColumnType("image");

                    b.Property<string>("RcplPassword")
                        .HasColumnName("RCPL_PASSWORD")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RcplPrivacyroleid")
                        .HasColumnName("RCPL_PRIVACYROLEID");

                    b.Property<long?>("RcplProviderInfo")
                        .HasColumnName("RCPL_PROVIDER_INFO");

                    b.Property<short>("RcplShowInImmView")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPL_SHOW_IN_IMM_VIEW")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RcplStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCPL_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("RcplStillduecodes")
                        .HasColumnName("RCPL_STILLDUECODES")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SrvcIdPlanid")
                        .HasColumnName("SRVC_ID_PLANID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RcplId");

                    b.HasIndex("Createdby")
                        .HasName("RECALLPLAN_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLPLAN_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RECALLPLAN_FK_MASTER");

                    b.HasIndex("RcplComplexFilterId")
                        .HasName("RCPL_FK_COMP_FILTERID");

                    b.HasIndex("RcplDefaultStreamId")
                        .HasName("RCPL_FK_DEFAULT_STREAM_ID");

                    b.HasIndex("RcplDesignedbyid")
                        .HasName("RECALLPLAN_FK_DESIGNEDBYID");

                    b.HasIndex("RcplHelpInfo")
                        .HasName("RCPL_FK_HELP_INFO");

                    b.HasIndex("RcplPrivacyroleid")
                        .HasName("FK_RP_PRIVACYROLEID");

                    b.HasIndex("RcplProviderInfo")
                        .HasName("RCPL_FK_PROVIDER_INFO");

                    b.HasIndex("SrvcIdPlanid")
                        .HasName("RECALLPLANFOREIGNKEY1");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLPLAN_I_MASTERVERS");

                    b.ToTable("RECALLPLAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplanaction", b =>
                {
                    b.Property<long>("CpacId")
                        .HasColumnName("CPAC_ID");

                    b.Property<DateTime>("Changed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("CpacActivityobjid")
                        .HasColumnName("CPAC_ACTIVITYOBJID");

                    b.Property<long>("CpacActivitytype")
                        .HasColumnName("CPAC_ACTIVITYTYPE");

                    b.Property<long?>("CpacActprocind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CPAC_ACTPROCIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("CpacAltReasonExactmatch")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CPAC_ALT_REASON_EXACTMATCH")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CpacAlternativeCpId")
                        .HasColumnName("CPAC_ALTERNATIVE_CP_ID");

                    b.Property<byte[]>("CpacBlobdata")
                        .HasColumnName("CPAC_BLOBDATA")
                        .HasColumnType("image");

                    b.Property<short>("CpacCheckedbydefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CPAC_CHECKEDBYDEFAULT")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("CpacCode")
                        .HasColumnName("CPAC_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long?>("CpacCpvsId")
                        .HasColumnName("CPAC_CPVS_ID");

                    b.Property<string>("CpacDescription")
                        .HasColumnName("CPAC_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("CpacFunded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CPAC_FUNDED")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("CpacMacro")
                        .HasColumnName("CPAC_MACRO")
                        .HasColumnType("image");

                    b.Property<long?>("CpacMacrotimeout")
                        .HasColumnName("CPAC_MACROTIMEOUT");

                    b.Property<long?>("CpacOrderindex")
                        .HasColumnName("CPAC_ORDERINDEX");

                    b.Property<long?>("CpacRecommendationId")
                        .HasColumnName("CPAC_RECOMMENDATION_ID");

                    b.Property<long?>("CpacRunmacroprocind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CPAC_RUNMACROPROCIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CpacTermprocind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CPAC_TERMPROCIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("CpacTyptempinclfont")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CPAC_TYPTEMPINCLFONT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CpacVisittemplateid")
                        .HasColumnName("CPAC_VISITTEMPLATEID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("CpacId");

                    b.HasIndex("CpacAlternativeCpId")
                        .HasName("FK_CPAC_ALTERNATIVE_CP_ID");

                    b.HasIndex("CpacCpvsId")
                        .HasName("FK_CPVS_RCPL_ID");

                    b.HasIndex("CpacRecommendationId")
                        .HasName("CPAC_RECOMMENDATION_ID_FK");

                    b.HasIndex("CpacVisittemplateid")
                        .HasName("RPA_FK_VISITTEMPLATE");

                    b.HasIndex("Createdby")
                        .HasName("RECALLPLANACTION_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLPLANACTION_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RECALLPLANACTION_FK_MASTER");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLPLANACTION_I_MASTERVERS");

                    b.ToTable("RECALLPLANACTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplaneventprops", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ConceptId")
                        .HasColumnName("CONCEPT_ID");

                    b.Property<long?>("DiseaseId")
                        .HasColumnName("DISEASE_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("EventId")
                        .HasColumnName("EVENT_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("TermId")
                        .HasColumnName("TERM_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ConceptId")
                        .HasName("RPE_PROPS_FK_CONCEPT");

                    b.HasIndex("DiseaseId")
                        .HasName("RPE_PROPS_FK_DISEASECODE");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasName("RPE_PROPS_UI_EVENTID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_RECALLPLANEVENTPROP");

                    b.HasIndex("TermId")
                        .HasName("RPE_PROPS_FK_TERM");

                    b.ToTable("RECALLPLANEVENTPROPS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplanevents", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CareplanId")
                        .HasColumnName("CAREPLAN_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Eventtype")
                        .HasColumnName("EVENTTYPE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("CareplanId")
                        .HasName("RP_EVENTS_FK_RECALLPLAN");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_RECALLPLANEVENTS");

                    b.HasIndex("CareplanId", "Eventtype")
                        .IsUnique()
                        .HasName("RP_EVENTS_UK_CP_ET");

                    b.ToTable("RECALLPLANEVENTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplanstream", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("RcstChanged")
                        .HasColumnName("RCST_CHANGED")
                        .HasColumnType("datetime");

                    b.Property<string>("RcstDescription")
                        .HasColumnName("RCST_DESCRIPTION")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<short>("RcstIsdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RCST_ISDELETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RcstRcplId")
                        .HasColumnName("RCST_RCPL_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_RECALLPLANSTREAM");

                    b.HasIndex("RcstRcplId")
                        .HasName("RC_STREAM_FK_RCPL_ID");

                    b.ToTable("RECALLPLANSTREAM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplanvisit", b =>
                {
                    b.Property<long>("RpvsId")
                        .HasColumnName("RPVS_ID");

                    b.Property<DateTime>("Changed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuIdProvider")
                        .HasColumnName("PPPU_ID_PROVIDER");

                    b.Property<long?>("PppuPos")
                        .HasColumnName("PPPU_POS");

                    b.Property<long?>("Privacyroleid")
                        .HasColumnName("PRIVACYROLEID");

                    b.Property<long>("RcplId")
                        .HasColumnName("RCPL_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RpvsAgeendmonth")
                        .HasColumnName("RPVS_AGEENDMONTH");

                    b.Property<long?>("RpvsAgeendweek")
                        .HasColumnName("RPVS_AGEENDWEEK");

                    b.Property<long?>("RpvsAgeendyear")
                        .HasColumnName("RPVS_AGEENDYEAR");

                    b.Property<short>("RpvsAgeflag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RPVS_AGEFLAG")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RpvsAgestartmonth")
                        .HasColumnName("RPVS_AGESTARTMONTH");

                    b.Property<long?>("RpvsAgestartweek")
                        .HasColumnName("RPVS_AGESTARTWEEK");

                    b.Property<long?>("RpvsAgestartyear")
                        .HasColumnName("RPVS_AGESTARTYEAR");

                    b.Property<short>("RpvsCalcPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RPVS_CALC_POS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RpvsCareobjectiveId")
                        .HasColumnName("RPVS_CAREOBJECTIVE_ID");

                    b.Property<long?>("RpvsCarerecurrenceOid")
                        .HasColumnName("RPVS_CARERECURRENCE_OID");

                    b.Property<string>("RpvsClash")
                        .HasColumnName("RPVS_CLASH")
                        .HasColumnType("char(1)");

                    b.Property<short>("RpvsClashflag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RPVS_CLASHFLAG")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("RpvsDate")
                        .HasColumnName("RPVS_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("RpvsDateagemonth")
                        .HasColumnName("RPVS_DATEAGEMONTH");

                    b.Property<long?>("RpvsDateageweek")
                        .HasColumnName("RPVS_DATEAGEWEEK");

                    b.Property<long?>("RpvsDateageyear")
                        .HasColumnName("RPVS_DATEAGEYEAR");

                    b.Property<long?>("RpvsDateoffsetamount")
                        .HasColumnName("RPVS_DATEOFFSETAMOUNT");

                    b.Property<short>("RpvsDateoffsetflag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RPVS_DATEOFFSETFLAG")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("RpvsDdFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RPVS_DD_FLAG")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("RpvsDdMacro")
                        .HasColumnName("RPVS_DD_MACRO")
                        .HasColumnType("image");

                    b.Property<long?>("RpvsDdMethod")
                        .HasColumnName("RPVS_DD_METHOD");

                    b.Property<long?>("RpvsDdVisit")
                        .HasColumnName("RPVS_DD_VISIT");

                    b.Property<string>("RpvsDescription")
                        .HasColumnName("RPVS_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("RpvsExtProvider")
                        .HasColumnName("RPVS_EXT_PROVIDER");

                    b.Property<byte[]>("RpvsLettertext")
                        .HasColumnName("RPVS_LETTERTEXT")
                        .HasColumnType("image");

                    b.Property<long?>("RpvsLklsDateoffsettype")
                        .HasColumnName("RPVS_LKLS_DATEOFFSETTYPE");

                    b.Property<long>("RpvsLklsDatetype")
                        .HasColumnName("RPVS_LKLS_DATETYPE");

                    b.Property<long>("RpvsLklsProvidertype")
                        .HasColumnName("RPVS_LKLS_PROVIDERTYPE");

                    b.Property<long?>("RpvsOrderIndex")
                        .HasColumnName("RPVS_ORDER_INDEX");

                    b.Property<long?>("RpvsPlanstreamid")
                        .HasColumnName("RPVS_PLANSTREAMID");

                    b.Property<short>("RpvsRepeatflag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RPVS_REPEATFLAG")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RpvsSex")
                        .HasColumnName("RPVS_SEX")
                        .HasColumnType("char(1)");

                    b.Property<short>("RpvsSexflag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RPVS_SEXFLAG")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RpvsSpecialtyconceptId")
                        .HasColumnName("RPVS_SPECIALTYCONCEPT_ID");

                    b.Property<long?>("RpvsSpecialtytypeconceptId")
                        .HasColumnName("RPVS_SPECIALTYTYPECONCEPT_ID");

                    b.Property<string>("RpvsSubject")
                        .HasColumnName("RPVS_SUBJECT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<byte[]>("RpvsValiditymacro")
                        .HasColumnName("RPVS_VALIDITYMACRO")
                        .HasColumnType("image");

                    b.Property<long?>("RpvsWindowafter")
                        .HasColumnName("RPVS_WINDOWAFTER");

                    b.Property<long?>("RpvsWindowafterunits")
                        .HasColumnName("RPVS_WINDOWAFTERUNITS");

                    b.Property<long?>("RpvsWindowbefore")
                        .HasColumnName("RPVS_WINDOWBEFORE");

                    b.Property<long?>("RpvsWindowbeforeunits")
                        .HasColumnName("RPVS_WINDOWBEFOREUNITS");

                    b.Property<long?>("ShcdVisittype")
                        .HasColumnName("SHCD_VISITTYPE");

                    b.Property<long>("SrvcIdVisitid")
                        .HasColumnName("SRVC_ID_VISITID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RpvsId");

                    b.HasIndex("Createdby")
                        .HasName("RECALLPLANVISIT_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLPLANVISIT_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RECALLPLANVISIT_FK_MASTER");

                    b.HasIndex("PppuIdProvider")
                        .HasName("RECALLPLANVISIT_FK_PROVIDER");

                    b.HasIndex("PppuPos")
                        .HasName("FK_RV_PPPU_POS");

                    b.HasIndex("Privacyroleid")
                        .HasName("FK_RV_PRIVACYROLEID");

                    b.HasIndex("RcplId")
                        .HasName("RECALLPLANVISITFOREIGNKEY1");

                    b.HasIndex("RpvsCareobjectiveId")
                        .HasName("FK_RPVS_CAREOBJECTIVE_ID");

                    b.HasIndex("RpvsCarerecurrenceOid")
                        .HasName("FK_RPVS_CARERECURRENCE_OID");

                    b.HasIndex("RpvsDdVisit")
                        .HasName("FK_PRVS_DD_VISIT");

                    b.HasIndex("RpvsExtProvider")
                        .HasName("FK_CV_EXT_PROVIDER");

                    b.HasIndex("RpvsPlanstreamid")
                        .HasName("RPVS_PLANSTREAMID_FK");

                    b.HasIndex("RpvsSpecialtyconceptId")
                        .HasName("FK_RPVS_SPEC_CONCEPT_ID");

                    b.HasIndex("RpvsSpecialtytypeconceptId")
                        .HasName("FK_RPVS_SPEC_TYPECONCEPT_ID");

                    b.HasIndex("ShcdVisittype")
                        .HasName("FK_RV_SHCD_VISITTYPE");

                    b.HasIndex("SrvcIdVisitid")
                        .HasName("RECALLPLANVISITFOREIGNKEY2");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLPLANVISIT_I_MASTERVERS");

                    b.ToTable("RECALLPLANVISIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallrecurrence", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RrcEndDate")
                        .HasColumnName("RRC_END_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("RrcEndtype")
                        .HasColumnName("RRC_ENDTYPE");

                    b.Property<long?>("RrcOccurencycount")
                        .HasColumnName("RRC_OCCURENCYCOUNT");

                    b.Property<long?>("RrcParam1")
                        .HasColumnName("RRC_PARAM1");

                    b.Property<long?>("RrcParam2")
                        .HasColumnName("RRC_PARAM2");

                    b.Property<long?>("RrcParam3")
                        .HasColumnName("RRC_PARAM3");

                    b.Property<long?>("RrcRepeattype")
                        .HasColumnName("RRC_REPEATTYPE");

                    b.Property<short>("RrcSeriesIsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RRC_SERIES_IS_COMPLETE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RrcSourceref")
                        .HasColumnName("RRC_SOURCEREF")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RrcStartDate")
                        .HasColumnName("RRC_START_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("RrcSubtype")
                        .HasColumnName("RRC_SUBTYPE");

                    b.Property<short>("RrcUpdateFormEachTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RRC_UPDATE_FORM_EACH_TIME")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RrcVisitRepeatamount")
                        .HasColumnName("RRC_VISIT_REPEATAMOUNT");

                    b.Property<long?>("RrcVisitRepeattype")
                        .HasColumnName("RRC_VISIT_REPEATTYPE");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("RECALLRECURRENCE_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLRECURRENCE_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RECALLRECURRENCE_FK_MASTER");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLRECURRENCE_I_MASTERVERS");

                    b.ToTable("RECALLRECURRENCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallreference", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ActivityId")
                        .HasColumnName("ACTIVITY_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<string>("Diagnosisdescr")
                        .HasColumnName("DIAGNOSISDESCR")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("Diagnosisid")
                        .HasColumnName("DIAGNOSISID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Explanation")
                        .HasColumnName("EXPLANATION")
                        .HasColumnType("image");

                    b.Property<short>("Isemergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISEMERGENCY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Isindefinite")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISINDEFINITE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Isoriginallost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISORIGINALLOST")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("LetterId")
                        .HasColumnName("LETTER_ID");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("NumbOfTreatments")
                        .HasColumnName("NUMB_OF_TREATMENTS");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Period")
                        .HasColumnName("PERIOD");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("ActivityId")
                        .HasName("RECALLREFERENCE_FK_ACTIVITY");

                    b.HasIndex("Createdby")
                        .HasName("RECALLREFERENCE_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLREFERENCE_FK_DELETEDBY");

                    b.HasIndex("Diagnosisid")
                        .HasName("RECALLREFER_FK_DIAGNOSIS");

                    b.HasIndex("LetterId")
                        .HasName("RECALLREFERENCE_FK_LETTER");

                    b.HasIndex("MasterId")
                        .HasName("RECALLREFERENCE_FK_MASTER");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLREFERENCE_I_MASTERVERS");

                    b.ToTable("RECALLREFERENCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RecallResultAction", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CarePlanActionId")
                        .HasColumnName("CARE_PLAN_ACTION_ID");

                    b.Property<long?>("ConceptId")
                        .HasColumnName("CONCEPT_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RecallPlanActionId")
                        .HasColumnName("RECALL_PLAN_ACTION_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ResultWords")
                        .HasColumnName("RESULT_WORDS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("TermsetId")
                        .HasColumnName("TERMSET_ID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.Property<long?>("WindowAfter")
                        .HasColumnName("WINDOW_AFTER");

                    b.Property<long?>("WindowAfterUnits")
                        .HasColumnName("WINDOW_AFTER_UNITS");

                    b.Property<long?>("WindowBefore")
                        .HasColumnName("WINDOW_BEFORE");

                    b.Property<long?>("WindowBeforeUnits")
                        .HasColumnName("WINDOW_BEFORE_UNITS");

                    b.HasKey("Oid");

                    b.HasIndex("CarePlanActionId")
                        .HasName("FK_RRA_CARE_PLAN_ACTION_ID");

                    b.HasIndex("ConceptId")
                        .HasName("FK_RRA_CONCEPT_ID");

                    b.HasIndex("Createdby")
                        .HasName("RECALLRESULTACT_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLRESULTACT_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RECALL_RESULT_ACTION_FK_MASTER");

                    b.HasIndex("RecallPlanActionId")
                        .HasName("FK_RRA_RECALL_PLAN_ACTION_ID");

                    b.HasIndex("TermsetId")
                        .HasName("FK_RRA_TERMSET_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLRESULTACT_I_MASTERVERS");

                    b.ToTable("RECALL_RESULT_ACTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RecallresultactionShortcode", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ResultActionId")
                        .HasColumnName("RESULT_ACTION_ID");

                    b.Property<long?>("ShortCodeId")
                        .HasColumnName("SHORT_CODE_ID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("RECALLRESACT_SC_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLRESACT_SC_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RRASC_SHORTCODE_FK_MASTER");

                    b.HasIndex("ResultActionId")
                        .HasName("FK_RRASC_RESULT_ACTION_ID");

                    b.HasIndex("ShortCodeId")
                        .HasName("FK_RRASC_SHORT_CODE_ID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLRESACT_SC_I_MASTERVERS");

                    b.ToTable("RECALLRESULTACTION_SHORTCODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallservice", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Isbillable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISBILLABLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Isforceontonextinvoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISFORCEONTONEXTINVOICE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Ismaster")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISMASTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Quantity")
                        .HasColumnName("QUANTITY");

                    b.Property<long?>("Rate")
                        .HasColumnName("RATE");

                    b.Property<long?>("Ratetype")
                        .HasColumnName("RATETYPE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Serviceid")
                        .HasColumnName("SERVICEID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("RECALLSERVICE_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLSERVICE_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RECALLSERVICE_FK_MASTER");

                    b.HasIndex("Rate")
                        .HasName("RECALLSERVICE_FK_RATE");

                    b.HasIndex("Serviceid")
                        .HasName("FK_RECALLSERVID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLSERVICE_I_MASTERVERS");

                    b.ToTable("RECALLSERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallvisittemplate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ConceptId")
                        .HasColumnName("CONCEPT_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("InclDescendants")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INCL_DESCENDANTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Isshared")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISSHARED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OwnerPppuId")
                        .HasColumnName("OWNER_PPPU_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Repeatfrequency")
                        .HasColumnName("REPEATFREQUENCY");

                    b.Property<long?>("Repeatunit")
                        .HasColumnName("REPEATUNIT");

                    b.Property<long?>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("ConceptId")
                        .HasName("FK_RV_TEMPLATE_CONCEPT");

                    b.HasIndex("Createdby")
                        .HasName("RECALLVISITTEMP_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RECALLVISITTEMP_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("RECALLVISITTEMPLATE_FK_MASTER");

                    b.HasIndex("OwnerPppuId")
                        .HasName("RVT_FK_PPPU");

                    b.HasIndex("ServiceId")
                        .HasName("RVT_FK_SERVICE");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RECALLVISITTEMP_I_MASTERVERS");

                    b.ToTable("RECALLVISITTEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recommendation", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FolderOid")
                        .HasColumnName("FOLDER_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RcGuidelineId")
                        .HasColumnName("RC_GUIDELINE_ID");

                    b.Property<string>("RcInfoLink")
                        .HasColumnName("RC_INFO_LINK")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RcName")
                        .HasColumnName("RC_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<byte[]>("RcNarrative")
                        .HasColumnName("RC_NARRATIVE")
                        .HasColumnType("image");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("FolderOid")
                        .HasName("REC_REC_FOLDERS_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_RECOMMENDATION");

                    b.HasIndex("RcGuidelineId")
                        .HasName("RC_GUIDELINE_ID_FK");

                    b.ToTable("RECOMMENDATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recommendationsfolders", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FolderName")
                        .HasColumnName("FOLDER_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("GuidelinesOid")
                        .HasColumnName("GUIDELINES_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ParentfolderOid")
                        .HasColumnName("PARENTFOLDER_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GuidelinesOid")
                        .HasName("REC_FOLDERS_GUIDELN_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_RECOMMENDATIONSFOLD");

                    b.HasIndex("ParentfolderOid")
                        .HasName("REC_FOLDERS_REC_FOLDERS_FK");

                    b.ToTable("RECOMMENDATIONSFOLDERS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RecommSituationLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RslRecommendationId")
                        .HasColumnName("RSL_RECOMMENDATION_ID");

                    b.Property<long>("RslSituationId")
                        .HasColumnName("RSL_SITUATION_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_RECOMM_SITUATION_LI");

                    b.HasIndex("RslRecommendationId")
                        .HasName("RSL_RECOMMENDATION_ID_FK");

                    b.HasIndex("RslSituationId")
                        .HasName("RSL_SITUATION_ID_FK");

                    b.ToTable("RECOMM_SITUATION_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Referral", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("ActivityDescr")
                        .HasColumnName("ACTIVITY_DESCR")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("ActivityId")
                        .HasColumnName("ACTIVITY_ID");

                    b.Property<long?>("AlteredById")
                        .HasColumnName("ALTERED_BY_ID");

                    b.Property<DateTime?>("AlteredOn")
                        .HasColumnName("ALTERED_ON")
                        .HasColumnType("datetime");

                    b.Property<long?>("AppointmentId")
                        .HasColumnName("APPOINTMENT_ID");

                    b.Property<long?>("Case2")
                        .HasColumnName("CASE2");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnName("CLOSED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnName("CREATOR_ID");

                    b.Property<long?>("Decision")
                        .HasColumnName("DECISION");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DiagnosisDescription")
                        .HasColumnName("DIAGNOSIS_DESCRIPTION")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("DiagnosisId")
                        .HasColumnName("DIAGNOSIS_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Explanation")
                        .HasColumnName("EXPLANATION")
                        .HasColumnType("image");

                    b.Property<DateTime?>("FirstvisitOn")
                        .HasColumnName("FIRSTVISIT_ON")
                        .HasColumnType("datetime");

                    b.Property<long?>("LinkedTo")
                        .HasColumnName("LINKED_TO");

                    b.Property<long?>("NumbOfTreatments")
                        .HasColumnName("NUMB_OF_TREATMENTS");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("Period")
                        .HasColumnName("PERIOD");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<DateTime?>("ReceivedOn")
                        .HasColumnName("RECEIVED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RefAppointmentdatetime")
                        .HasColumnName("REF_APPOINTMENTDATETIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("RefByExtProvId")
                        .HasColumnName("REF_BY_EXT_PROV_ID");

                    b.Property<long?>("RefByPosId")
                        .HasColumnName("REF_BY_POS_ID");

                    b.Property<long?>("RefByProvId")
                        .HasColumnName("REF_BY_PROV_ID");

                    b.Property<byte[]>("RefDecisionDescr")
                        .HasColumnName("REF_DECISION_DESCR")
                        .HasColumnType("image");

                    b.Property<long?>("RefDecisionShortcodeid")
                        .HasColumnName("REF_DECISION_SHORTCODEID");

                    b.Property<short>("RefEchochangesinoutref")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_ECHOCHANGESINOUTREF")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RefEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_EMERGENCY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("RefExpiryClose")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_EXPIRY_CLOSE")
                        .HasDefaultValueSql("((-1))");

                    b.Property<DateTime?>("RefExpiryDate")
                        .HasColumnName("REF_EXPIRY_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("RefIndefine")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_INDEFINE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("RefLetterId")
                        .HasColumnName("REF_LETTER_ID");

                    b.Property<long?>("RefOriginallost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_ORIGINALLOST")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("RefPartyInformDt")
                        .HasColumnName("REF_PARTY_INFORM_DT")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RefPartyInformNote")
                        .HasColumnName("REF_PARTY_INFORM_NOTE")
                        .HasColumnType("image");

                    b.Property<short>("RefPartyInformed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_PARTY_INFORMED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefPatientadvice")
                        .HasColumnName("REF_PATIENTADVICE")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long?>("RefPriorityId")
                        .HasColumnName("REF_PRIORITY_ID");

                    b.Property<short>("RefSeenbefore")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_SEENBEFORE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RefSendStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_SEND_STATUS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RefToExtProvId")
                        .HasColumnName("REF_TO_EXT_PROV_ID");

                    b.Property<long?>("RefToPosId")
                        .HasColumnName("REF_TO_POS_ID");

                    b.Property<long?>("RefToProvId")
                        .HasColumnName("REF_TO_PROV_ID");

                    b.Property<long?>("RefType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ReferredOn")
                        .HasColumnName("REFERRED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("SourceRef")
                        .HasColumnName("SOURCE_REF")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SrcGuid")
                        .HasColumnName("SRC_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Status")
                        .HasColumnName("STATUS");

                    b.Property<long?>("Tracking")
                        .HasColumnName("TRACKING");

                    b.Property<byte[]>("TrackingDescr")
                        .HasColumnName("TRACKING_DESCR")
                        .HasColumnType("image");

                    b.Property<long?>("ValidityDuration")
                        .HasColumnName("VALIDITY_DURATION");

                    b.Property<long?>("ValidityDurationUnit")
                        .HasColumnName("VALIDITY_DURATION_UNIT");

                    b.HasKey("Oid");

                    b.HasIndex("ActivityId")
                        .HasName("REFERRAL_FK_ACTIVITY_ID");

                    b.HasIndex("AlteredById")
                        .HasName("REFERRAL_FK_ALTERED_BY_ID");

                    b.HasIndex("AppointmentId")
                        .HasName("REFERRAL_FK_APPOINTMENT");

                    b.HasIndex("Case2")
                        .HasName("REFERRAL_FK_CASE2");

                    b.HasIndex("CreatorId")
                        .HasName("REFERRAL_FK_CREATOR_ID");

                    b.HasIndex("DiagnosisId")
                        .HasName("REFERRAL_FK_DIAGNOSIS_ID");

                    b.HasIndex("LinkedTo")
                        .HasName("REFERRAL_FK_LINKEDTO");

                    b.HasIndex("PatientId")
                        .HasName("REFERRAL_FK_PATIENT_ID");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_REFERRAL_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("REFERRAL_FK_PPPU");

                    b.HasIndex("RefByExtProvId")
                        .HasName("REFERRAL_FK_REF_BY_EXT_PROV_");

                    b.HasIndex("RefByPosId")
                        .HasName("REFERRAL_FK_REF_BY_POS_ID");

                    b.HasIndex("RefByProvId")
                        .HasName("REFERRAL_FK_REF_BY_PROV_ID");

                    b.HasIndex("RefDecisionShortcodeid")
                        .HasName("FK_REFERRAL_DECISION_SHORTCO");

                    b.HasIndex("RefLetterId")
                        .HasName("REFERRAL_FK_REF_LETTER_ID");

                    b.HasIndex("RefPriorityId")
                        .HasName("FK_REFERRAL_PRIORITY_ID");

                    b.HasIndex("RefToExtProvId")
                        .HasName("REFERRAL_FK_REF_TO_EXT_PROV_");

                    b.HasIndex("RefToPosId")
                        .HasName("REFERRAL_FK_REF_TO_POS_ID");

                    b.HasIndex("RefToProvId")
                        .HasName("REFERRAL_FK_REF_TO_PROV_ID");

                    b.HasIndex("SourceRef")
                        .HasName("I_REFERRAL_SOURCE_REF");

                    b.HasIndex("Tracking")
                        .HasName("REF_TRACKING_SHORTCODE_FK");

                    b.HasIndex("ObjGuid", "PartitionId")
                        .IsUnique()
                        .HasName("I_REFERRAL_OBJ_GUID");

                    b.ToTable("REFERRAL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralDocumentitemLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RdilReferralId")
                        .HasColumnName("RDIL_REFERRAL_ID");

                    b.Property<long>("RdilTransId")
                        .HasColumnName("RDIL_TRANS_ID");

                    b.Property<long>("RdilTransdataId")
                        .HasColumnName("RDIL_TRANSDATA_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("RdilReferralId")
                        .HasName("FK_RDIL_REFERRAL_ID");

                    b.HasIndex("RdilTransId")
                        .HasName("FK_RDIL_TRANS_ID");

                    b.HasIndex("RdilTransdataId")
                        .HasName("FK_RDIL_TRANSDATA_ID");

                    b.ToTable("REFERRAL_DOCUMENTITEM_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralDocumentLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RdlReferralId")
                        .HasColumnName("RDL_REFERRAL_ID");

                    b.Property<long>("RdlTransId")
                        .HasColumnName("RDL_TRANS_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REFERRAL_DOCUMENT_L");

                    b.HasIndex("RdlReferralId")
                        .HasName("FK_RDL_REFERRAL_ID");

                    b.HasIndex("RdlTransId")
                        .HasName("FK_RDL_TRANS_ID");

                    b.ToTable("REFERRAL_DOCUMENT_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralFamilyproblemLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RfplFamilyproblemId")
                        .HasColumnName("RFPL_FAMILYPROBLEM_ID");

                    b.Property<long>("RfplReferralId")
                        .HasColumnName("RFPL_REFERRAL_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("REFERRAL_FAMILYPROBLEM_LINKS_I");

                    b.HasIndex("RfplFamilyproblemId")
                        .HasName("FK_RFPL_FPROBLEM_ID");

                    b.HasIndex("RfplReferralId")
                        .HasName("FK_RFPL_REFERRAL_ID");

                    b.ToTable("REFERRAL_FAMILYPROBLEM_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralFlowchartLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RflFlowchartId")
                        .HasColumnName("RFL_FLOWCHART_ID");

                    b.Property<long>("RflReferralId")
                        .HasColumnName("RFL_REFERRAL_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REFERRAL_FLOWCHART_");

                    b.HasIndex("RflFlowchartId")
                        .HasName("FK_RFL_FLOWCHART_ID");

                    b.HasIndex("RflReferralId")
                        .HasName("FK_RFL_REFERRAL_ID");

                    b.ToTable("REFERRAL_FLOWCHART_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralFormLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("FormId")
                        .HasColumnName("FORM_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ReferralId")
                        .HasColumnName("REFERRAL_ID");

                    b.HasKey("Oid");

                    b.HasIndex("FormId")
                        .HasName("REF_FORM_LINKS_FK_FORM");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REFERRAL_FORM_LINKS");

                    b.HasIndex("ReferralId")
                        .HasName("REF_FORM_LINKS_FK_REFERRAL");

                    b.ToTable("REFERRAL_FORM_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralMedLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RmlMedCid")
                        .HasColumnName("RML_MED_CID");

                    b.Property<long>("RmlMedOid")
                        .HasColumnName("RML_MED_OID");

                    b.Property<long>("RmlReferralId")
                        .HasColumnName("RML_REFERRAL_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REFERRAL_MED_LINKS");

                    b.HasIndex("RmlMedOid")
                        .HasName("FK_RML_MED_OID");

                    b.HasIndex("RmlReferralId")
                        .HasName("FK_RML_REFERRAL_ID");

                    b.ToTable("REFERRAL_MED_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralOrderitemLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RoilOrderId")
                        .HasColumnName("ROIL_ORDER_ID");

                    b.Property<long>("RoilOrderItemId")
                        .HasColumnName("ROIL_ORDER_ITEM_ID");

                    b.Property<long>("RoilReferralId")
                        .HasColumnName("ROIL_REFERRAL_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("REFERRAL_ORDERITEM_LINKS_I_OBJ");

                    b.HasIndex("RoilOrderId")
                        .HasName("FK_ROIL_ORDER_ID");

                    b.HasIndex("RoilOrderItemId")
                        .HasName("FK_ROIL_ORDERITEM_ID");

                    b.HasIndex("RoilReferralId")
                        .HasName("FK_ROIL_REFERRAL_ID");

                    b.ToTable("REFERRAL_ORDERITEM_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralProblemLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RplProblemId")
                        .HasColumnName("RPL_PROBLEM_ID");

                    b.Property<long>("RplReferralId")
                        .HasColumnName("RPL_REFERRAL_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REFERRAL_PROBLEM_LI");

                    b.HasIndex("RplProblemId")
                        .HasName("FK_RPL_PROBLEM_ID");

                    b.HasIndex("RplReferralId")
                        .HasName("FK_RPL_REFERRAL_ID");

                    b.ToTable("REFERRAL_PROBLEM_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralProcedureLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RprlProcedureId")
                        .HasColumnName("RPRL_PROCEDURE_ID");

                    b.Property<long>("RprlReferralId")
                        .HasColumnName("RPRL_REFERRAL_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("REFERRAL_PROCEDURE_LINKS_I_OBJ");

                    b.HasIndex("RprlProcedureId")
                        .HasName("FK_RPRL_PROCEDURE_ID");

                    b.HasIndex("RprlReferralId")
                        .HasName("FK_RPRL_REFERRAL_ID");

                    b.ToTable("REFERRAL_PROCEDURE_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Region", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RgnCode")
                        .HasColumnName("RGN_CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RgnName")
                        .HasColumnName("RGN_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("RgnParent")
                        .HasColumnName("RGN_PARENT");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REGION");

                    b.HasIndex("RgnParent")
                        .HasName("REGION_FK_TREE");

                    b.HasIndex("RgnCode", "PartitionId")
                        .IsUnique()
                        .HasName("REGION_CODE_IU")
                        .HasFilter("[RGN_CODE] IS NOT NULL");

                    b.ToTable("REGION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RegionPostcode", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RgpcPostcode")
                        .HasColumnName("RGPC_POSTCODE");

                    b.Property<long?>("RgpcRegion")
                        .HasColumnName("RGPC_REGION");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REGION_POSTCODE");

                    b.HasIndex("RgpcPostcode")
                        .HasName("RGPC_FK_POSTCODE");

                    b.HasIndex("RgpcRegion")
                        .HasName("RGPC_FK_REGION");

                    b.HasIndex("RgpcRegion", "RgpcPostcode")
                        .IsUnique()
                        .HasName("REGION_POSTCODE_IU")
                        .HasFilter("[RGPC_REGION] IS NOT NULL AND [RGPC_POSTCODE] IS NOT NULL");

                    b.ToTable("REGION_POSTCODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Registry", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<DateTime?>("Changed")
                        .HasColumnName("CHANGED")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("DATE_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ExtProviderId")
                        .HasColumnName("EXT_PROVIDER_ID");

                    b.Property<short>("Ispassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISPASSWORD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("KeyId")
                        .HasColumnName("KEY_ID");

                    b.Property<string>("KeyValue")
                        .HasColumnName("KEY_VALUE")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrgMemberId")
                        .HasColumnName("ORG_MEMBER_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RegRole")
                        .HasColumnName("REG_ROLE");

                    b.Property<string>("Sourceref")
                        .HasColumnName("SOURCEREF")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("REGISTRY_FK_CASE_ID");

                    b.HasIndex("Createdby")
                        .HasName("REGISTRY_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("REGISTRY_FK_DELETEDBY");

                    b.HasIndex("ExtProviderId")
                        .HasName("REGISTRY_FK_EXT_PROVIDER_ID");

                    b.HasIndex("KeyId")
                        .HasName("REGISTRY_FK_KEY_ID");

                    b.HasIndex("KeyValue")
                        .HasName("REGISTRY_I_KEY_VALUE");

                    b.HasIndex("MasterId")
                        .HasName("REGISTRY_FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REGISTRY");

                    b.HasIndex("OrgMemberId")
                        .HasName("REGISTRY_FK_ORG_MEMBER_ID");

                    b.HasIndex("PatientId")
                        .HasName("REGISTRY_FK_PATIENT_ID");

                    b.HasIndex("PppuId")
                        .HasName("REGISTRY_FK_PPPU_ID");

                    b.HasIndex("RegRole")
                        .HasName("FK_REGISTRY_ROLE_ID");

                    b.HasIndex("Sourceref")
                        .HasName("I_REGISTRY_SOURCEREF");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("REGISTRY_I_MASTERVERS");

                    b.ToTable("REGISTRY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Reports", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<byte[]>("AdditionalAttrs")
                        .HasColumnName("ADDITIONAL_ATTRS")
                        .HasColumnType("image");

                    b.Property<byte[]>("Body")
                        .HasColumnName("BODY")
                        .HasColumnType("image");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("DATECREATED")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("NumberFields")
                        .HasColumnName("NUMBER_FIELDS");

                    b.Property<long?>("NumberLines")
                        .HasColumnName("NUMBER_LINES");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Ondblclick")
                        .HasColumnName("ONDBLCLICK")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Ondblclickcaption")
                        .HasColumnName("ONDBLCLICKCAPTION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Patientidcolumn")
                        .HasColumnName("PATIENTIDCOLUMN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RpMacroId")
                        .HasColumnName("RP_MACRO_ID");

                    b.Property<long?>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REPORTS");

                    b.HasIndex("RpMacroId")
                        .HasName("REPORTS_FK_MACRO");

                    b.HasIndex("UserId")
                        .HasName("REPORTS_FK_USER_ID");

                    b.ToTable("REPORTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReportsLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RlCompName")
                        .HasColumnName("RL_COMP_NAME")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<DateTime>("RlDatetime")
                        .HasColumnName("RL_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("RlIp")
                        .IsRequired()
                        .HasColumnName("RL_IP")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RlOutcome")
                        .HasColumnName("RL_OUTCOME");

                    b.Property<long?>("RlPatientId")
                        .HasColumnName("RL_PATIENT_ID");

                    b.Property<long>("RlPosId")
                        .HasColumnName("RL_POS_ID");

                    b.Property<string>("RlReportName")
                        .IsRequired()
                        .HasColumnName("RL_REPORT_NAME")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<long>("RlReportType")
                        .HasColumnName("RL_REPORT_TYPE");

                    b.Property<long>("RlUserId")
                        .HasColumnName("RL_USER_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_REPORTS_LOG");

                    b.HasIndex("RlPatientId")
                        .HasName("FK_REPORTS_LOG_PATIENT_ID");

                    b.HasIndex("RlPosId")
                        .HasName("FK_REPORTS_LOG_POS_ID");

                    b.HasIndex("RlUserId")
                        .HasName("FK_REPORTS_LOG_USER_ID");

                    b.ToTable("REPORTS_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ResultDrugMapping", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("ConceptId")
                        .HasColumnName("CONCEPT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RxCid")
                        .HasColumnName("RX_CID");

                    b.Property<long>("RxId")
                        .HasColumnName("RX_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ConceptId")
                        .HasName("FK_CONCEPT_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_RESULT_DRUG_MAPPING");

                    b.HasIndex("RxId")
                        .HasName("FK_RX_ID");

                    b.HasIndex("ConceptId", "RxId", "PartitionId")
                        .IsUnique()
                        .HasName("RESULT_DRUG_MAPPING_U_I");

                    b.ToTable("RESULT_DRUG_MAPPING");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Rolepreference", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("RpData")
                        .HasColumnName("RP_DATA")
                        .HasColumnType("image");

                    b.Property<string>("RpName")
                        .IsRequired()
                        .HasColumnName("RP_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("RpRoleId")
                        .HasColumnName("RP_ROLE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_ROLEPREFERENCE");

                    b.HasIndex("RpRoleId")
                        .HasName("FK_RP_ROLE_ID");

                    b.HasIndex("RpRoleId", "RpName", "PartitionId")
                        .IsUnique()
                        .HasName("ROLEPREFERENCE_I_RP_ROLE_ID_RP");

                    b.ToTable("ROLEPREFERENCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RolepreferenceLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DtModified")
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime");

                    b.Property<string>("LogComputer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(host_name())")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LogDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .HasColumnName("OBJ_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("PartitionId")
                        .HasColumnName("PARTITION_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("RpData")
                        .HasColumnName("RP_DATA")
                        .HasColumnType("image");

                    b.Property<string>("RpName")
                        .HasColumnName("RP_NAME")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("RpRoleId")
                        .HasColumnName("RP_ROLE_ID");

                    b.HasKey("LogId");

                    b.ToTable("ROLEPREFERENCE_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RxDispenseAdminister", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RdaBatch")
                        .HasColumnName("RDA_BATCH")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("RdaDatetime")
                        .HasColumnName("RDA_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("RdaDiluentBatch")
                        .HasColumnName("RDA_DILUENT_BATCH")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RdaDiluentExpiry")
                        .HasColumnName("RDA_DILUENT_EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<long?>("RdaDiluentStockLotId")
                        .HasColumnName("RDA_DILUENT_STOCK_LOT_ID");

                    b.Property<DateTime?>("RdaExpiry")
                        .HasColumnName("RDA_EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<long>("RdaInitiation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RDA_INITIATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RdaNote")
                        .HasColumnName("RDA_NOTE")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<long>("RdaNumber")
                        .HasColumnName("RDA_NUMBER");

                    b.Property<long?>("RdaParentDispenseId")
                        .HasColumnName("RDA_PARENT_DISPENSE_ID");

                    b.Property<long?>("RdaPrimaryPrescrId")
                        .HasColumnName("RDA_PRIMARY_PRESCR_ID");

                    b.Property<long?>("RdaStockLotId")
                        .HasColumnName("RDA_STOCK_LOT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("RdaDiluentStockLotId")
                        .HasName("RDA_DILUENT_STOCK_LOT_FK");

                    b.HasIndex("RdaParentDispenseId")
                        .HasName("RDA_PARENT_DISPENSE_ID_FK");

                    b.HasIndex("RdaPrimaryPrescrId")
                        .HasName("RDA_PRIMARY_PRESCR_ID_FK");

                    b.HasIndex("RdaStockLotId")
                        .HasName("RDA_STOCK_LOT_FK");

                    b.ToTable("RX_DISPENSE_ADMINISTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RxScheduleMeds", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Comment")
                        .HasColumnName("COMMENT")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MaxDose")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MAX_DOSE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MinDose")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MIN_DOSE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .HasColumnName("OBJ_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RxClass")
                        .HasColumnName("RX_CLASS");

                    b.Property<long>("RxGroup")
                        .HasColumnName("RX_GROUP");

                    b.Property<long>("RxId")
                        .HasColumnName("RX_ID");

                    b.Property<long>("StationeryId")
                        .HasColumnName("STATIONERY_ID");

                    b.HasKey("Oid");

                    b.HasIndex("RxId")
                        .HasName("FK_RXSCHEDULE_MEDS_RX");

                    b.HasIndex("StationeryId")
                        .HasName("FK_RXSCDLS_MEDS_STATIONERY");

                    b.ToTable("RX_SCHEDULE_MEDS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RxSchedules", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("AltPharmacyId")
                        .HasColumnName("ALT_PHARMACY_ID");

                    b.Property<long?>("AutoNumA4")
                        .HasColumnName("AUTO_NUM_A4");

                    b.Property<long?>("CancelReason")
                        .HasColumnName("CANCEL_REASON");

                    b.Property<string>("CancelReasonOther")
                        .HasColumnName("CANCEL_REASON_OTHER")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("CategoryType")
                        .HasColumnName("CATEGORY_TYPE");

                    b.Property<string>("ContactName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CONTACT_NAME")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("CreateBy")
                        .HasColumnName("CREATE_BY");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<long>("DailyDose")
                        .HasColumnName("DAILY_DOSE");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long>("Doses")
                        .HasColumnName("DOSES");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("END_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("FrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FREQUENCY_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Instructions")
                        .HasColumnName("INSTRUCTIONS")
                        .HasColumnType("image");

                    b.Property<short>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_APPROVED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_CANCELLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LastDoseDate")
                        .HasColumnName("LAST_DOSE_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastTaDate")
                        .HasColumnName("LAST_TA_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("LocationId")
                        .HasColumnName("LOCATION_ID");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("MaxDailyDose")
                        .HasColumnName("MAX_DAILY_DOSE");

                    b.Property<long?>("MedicationId")
                        .HasColumnName("MEDICATION_ID");

                    b.Property<long?>("ModifyBy")
                        .HasColumnName("MODIFY_BY");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnName("MODIFY_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .HasColumnName("OBJ_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<short>("PatientPickUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PATIENT_PICK_UP")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PharmacyId")
                        .HasColumnName("PHARMACY_ID");

                    b.Property<byte[]>("PharmacyNote")
                        .HasColumnName("PHARMACY_NOTE")
                        .HasColumnType("image");

                    b.Property<long?>("PrintBy")
                        .HasColumnName("PRINT_BY");

                    b.Property<DateTime?>("PrintDate")
                        .HasColumnName("PRINT_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReduceFrequency")
                        .HasColumnName("REDUCE_FREQUENCY");

                    b.Property<long?>("ReduceRule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REDUCE_RULE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ReduceStep")
                        .HasColumnName("REDUCE_STEP");

                    b.Property<long?>("ReduceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REDUCE_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ReplaceNo1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REPLACE_NO_1")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ReplaceNo2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REPLACE_NO_2")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ReplaceNo3")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REPLACE_NO_3")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("ReplaceRef1")
                        .HasColumnName("REPLACE_REF_1");

                    b.Property<long?>("ReplaceRef2")
                        .HasColumnName("REPLACE_REF_2");

                    b.Property<long?>("ReplaceRef3")
                        .HasColumnName("REPLACE_REF_3");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnName("REQUEST_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("RequestFrom")
                        .HasColumnName("REQUEST_FROM");

                    b.Property<long?>("RequestGroup")
                        .HasColumnName("REQUEST_GROUP");

                    b.Property<long?>("RequestReason1")
                        .HasColumnName("REQUEST_REASON_1");

                    b.Property<long?>("RequestReason2")
                        .HasColumnName("REQUEST_REASON_2");

                    b.Property<long?>("RequestReason3")
                        .HasColumnName("REQUEST_REASON_3");

                    b.Property<long?>("RequestTo")
                        .HasColumnName("REQUEST_TO");

                    b.Property<DateTime?>("RestartDate")
                        .HasColumnName("RESTART_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("RestartProviderId")
                        .HasColumnName("RESTART_PROVIDER_ID");

                    b.Property<long?>("RestartReason")
                        .HasColumnName("RESTART_REASON");

                    b.Property<string>("RestartReasonOther")
                        .HasColumnName("RESTART_REASON_OTHER")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("ScriptNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCRIPT_NUMBER")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("SharedCareGp")
                        .HasColumnName("SHARED_CARE_GP");

                    b.Property<long?>("SplitMane")
                        .HasColumnName("SPLIT_MANE");

                    b.Property<long?>("SplitNocte")
                        .HasColumnName("SPLIT_NOCTE");

                    b.Property<long?>("SplitTakeaway")
                        .HasColumnName("SPLIT_TAKEAWAY");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("StationeryId")
                        .HasColumnName("STATIONERY_ID");

                    b.Property<long?>("StopReason")
                        .HasColumnName("STOP_REASON");

                    b.Property<string>("StopReasonOther")
                        .HasColumnName("STOP_REASON_OTHER")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("StopType")
                        .HasColumnName("STOP_TYPE");

                    b.Property<string>("TempAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMP_ADDRESS")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("ThreeDaysNotice")
                        .HasColumnName("THREE_DAYS_NOTICE");

                    b.Property<long?>("VerifyBy")
                        .HasColumnName("VERIFY_BY");

                    b.Property<DateTime?>("VerifyDate")
                        .HasColumnName("VERIFY_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("WasCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WAS_COMPLETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("WeekDays")
                        .HasColumnName("WEEK_DAYS");

                    b.HasKey("Oid");

                    b.HasIndex("AltPharmacyId")
                        .HasName("FK_RXSCHEDULES_ALT_PHARMACY");

                    b.HasIndex("CancelReason")
                        .HasName("FK_RXSCHEDULES_CANCEL_REASON");

                    b.HasIndex("CaseId")
                        .HasName("FK_RXSCHDLS_CASE_ID");

                    b.HasIndex("CreateBy")
                        .HasName("FK_RXSCHEDULES_CREATE_BY");

                    b.HasIndex("Createdby")
                        .HasName("RX_SCHEDULES_I_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("RX_SCHEDULES_I_DELETEDBY");

                    b.HasIndex("FrequencyId")
                        .HasName("FK_RXSCDLS_FREQ");

                    b.HasIndex("LocationId")
                        .HasName("FK_RXSCHEDULES_LOCATION");

                    b.HasIndex("MasterId")
                        .HasName("RX_SCHEDULES_I_MASTER_ID");

                    b.HasIndex("MedicationId")
                        .HasName("FK_RXSCHEDULES_MEDS");

                    b.HasIndex("ModifyBy")
                        .HasName("FK_RXSCHEDULES_MODIFY_BY");

                    b.HasIndex("PatientId")
                        .HasName("FK_RXSCHEDULES_PATIENT");

                    b.HasIndex("PharmacyId")
                        .HasName("FK_RXSCHEDULES_PHARMACY");

                    b.HasIndex("PrintBy")
                        .HasName("FK_RXSCHEDULES_PRINT_BY");

                    b.HasIndex("ReduceFrequency")
                        .HasName("FK_RXSCDLS_REDUCE_FREQ");

                    b.HasIndex("ReduceStep")
                        .HasName("FK_RXSCDLS_REDUCE_STEP");

                    b.HasIndex("ReplaceRef1")
                        .HasName("FK_RXSCDLS_REPLACE_REF_1");

                    b.HasIndex("ReplaceRef2")
                        .HasName("FK_RXSCDLS_REPLACE_REF_2");

                    b.HasIndex("ReplaceRef3")
                        .HasName("FK_RXSCDLS_REPLACE_REF_3");

                    b.HasIndex("RequestFrom")
                        .HasName("FK_RXSCHEDULES_REQUEST_FROM");

                    b.HasIndex("RequestGroup")
                        .HasName("I_RXSCDLS_RQST_GROUP");

                    b.HasIndex("RequestReason1")
                        .HasName("FK_RXSCDLS_RQST_REASON_1");

                    b.HasIndex("RequestReason2")
                        .HasName("FK_RXSCDLS_RQST_REASON_2");

                    b.HasIndex("RequestReason3")
                        .HasName("FK_RXSCDLS_RQST_REASON_3");

                    b.HasIndex("RequestTo")
                        .HasName("FK_RXSCHEDULES_REQUEST_TO");

                    b.HasIndex("RestartProviderId")
                        .HasName("FK_RXSCHEDULES_RESTART_PROV_ID");

                    b.HasIndex("RestartReason")
                        .HasName("FK_RXSCHEDULES_RESTART_REASON");

                    b.HasIndex("SharedCareGp")
                        .HasName("FK_RXSCHEDULES_SHARED_CARE_GP");

                    b.HasIndex("StationeryId")
                        .HasName("FK_RXSCDLS_STATIONERY");

                    b.HasIndex("StopReason")
                        .HasName("FK_RXSCHEDULES_STOP_REASON");

                    b.HasIndex("VerifyBy")
                        .HasName("FK_RXSCHEDULES_VERIFY_BY");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("RX_SCHEDULES_I_MASTERVERS");

                    b.ToTable("RX_SCHEDULES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RxScheduleStationery", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("IsHandwritten")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_HANDWRITTEN")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsMedication")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_MEDICATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MaxDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MAX_DAYS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MaxDigits")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MAX_DIGITS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MinDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MIN_DAYS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MinDigits")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MIN_DIGITS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("TemplatePath")
                        .HasColumnName("TEMPLATE_PATH")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("RX_SCHEDULE_STATIONERY_I_OBJ_G");

                    b.ToTable("RX_SCHEDULE_STATIONERY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Savepatient", b =>
                {
                    b.Property<long>("SvplId")
                        .HasColumnName("SVPL_ID");

                    b.Property<long>("PtntId")
                        .HasColumnName("PTNT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("SvplId", "PtntId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SAVEPATIENT");

                    b.HasIndex("PtntId")
                        .HasName("SAVEPATIENT_FK_PTNT_ID");

                    b.HasIndex("SvplId")
                        .HasName("SAVEPATIENT_FK_SVPL_ID");

                    b.ToTable("SAVEPATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Savepatientlist", b =>
                {
                    b.Property<long>("SvplId")
                        .HasColumnName("SVPL_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuIdSavedby")
                        .HasColumnName("PPPU_ID_SAVEDBY");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SvplDatesaved")
                        .HasColumnName("SVPL_DATESAVED")
                        .HasColumnType("datetime");

                    b.Property<string>("SvplDescription")
                        .HasColumnName("SVPL_DESCRIPTION")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.HasKey("SvplId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SAVEPATIENTLIST");

                    b.HasIndex("PppuIdSavedby")
                        .HasName("SAVEPATIENTLIST_FK_SAVEDBY");

                    b.ToTable("SAVEPATIENTLIST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpMessageIn", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SccpmBody")
                        .HasColumnName("SCCPM_BODY");

                    b.Property<DateTime>("SccpmDate")
                        .HasColumnName("SCCPM_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("SccpmLinkedmsguid")
                        .HasColumnName("SCCPM_LINKEDMSGUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SccpmPatient")
                        .HasColumnName("SCCPM_PATIENT");

                    b.Property<long>("SccpmStatus")
                        .HasColumnName("SCCPM_STATUS");

                    b.Property<long>("SccpmType")
                        .HasColumnName("SCCPM_TYPE");

                    b.Property<string>("SccpmUid")
                        .HasColumnName("SCCPM_UID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("FK_SCCPM_CREATEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCCP_MESSAGE_IN");

                    b.HasIndex("SccpmBody")
                        .HasName("FK_SCCPM_BODY");

                    b.HasIndex("SccpmPatient")
                        .HasName("FK_SCCPM_PATIENT");

                    b.ToTable("SCCP_MESSAGE_IN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpMessageInLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SmilCreatedon")
                        .HasColumnName("SMIL_CREATEDON")
                        .HasColumnType("datetime");

                    b.Property<long>("SmilLogtype")
                        .HasColumnName("SMIL_LOGTYPE");

                    b.Property<long>("SmilMessageid")
                        .HasColumnName("SMIL_MESSAGEID");

                    b.Property<long?>("SmilText")
                        .HasColumnName("SMIL_TEXT");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCCP_MESSAGE_IN_LOG");

                    b.HasIndex("SmilMessageid")
                        .HasName("FK_SMIL_MESSAGEID");

                    b.HasIndex("SmilText")
                        .HasName("FK_SMIL_TEXT");

                    b.ToTable("SCCP_MESSAGE_IN_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpMessageOut", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SccpmBody")
                        .HasColumnName("SCCPM_BODY");

                    b.Property<DateTime>("SccpmDate")
                        .HasColumnName("SCCPM_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("SccpmDescriptionStr")
                        .HasColumnName("SCCPM_DESCRIPTION_STR")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long?>("SccpmLinkedId")
                        .HasColumnName("SCCPM_LINKED_ID");

                    b.Property<long?>("SccpmMrc")
                        .HasColumnName("SCCPM_MRC");

                    b.Property<string>("SccpmOptions")
                        .HasColumnName("SCCPM_OPTIONS")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long?>("SccpmPatient")
                        .HasColumnName("SCCPM_PATIENT");

                    b.Property<long?>("SccpmProvider")
                        .HasColumnName("SCCPM_PROVIDER");

                    b.Property<long>("SccpmStatus")
                        .HasColumnName("SCCPM_STATUS");

                    b.Property<long?>("SccpmTransOid")
                        .HasColumnName("SCCPM_TRANS_OID");

                    b.Property<long>("SccpmType")
                        .HasColumnName("SCCPM_TYPE");

                    b.Property<string>("SccpmUid")
                        .HasColumnName("SCCPM_UID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("FK_SCCPMO_CREATEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCCP_MESSAGE_OUT");

                    b.HasIndex("SccpmBody")
                        .HasName("FK_SCCPMO_BODY");

                    b.HasIndex("SccpmLinkedId")
                        .HasName("FK_SCCP_OUT_LINKED_ID");

                    b.HasIndex("SccpmMrc")
                        .HasName("FK_SCCPMO_MRC");

                    b.HasIndex("SccpmPatient")
                        .HasName("FK_SCCPMO_PATIENT");

                    b.HasIndex("SccpmProvider")
                        .HasName("FK_SCCPMO_PROVIDER");

                    b.HasIndex("SccpmTransOid")
                        .HasName("FK_SCCPM_TRANS_OID");

                    b.ToTable("SCCP_MESSAGE_OUT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpMessageOutLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SmolCreatedon")
                        .HasColumnName("SMOL_CREATEDON")
                        .HasColumnType("datetime");

                    b.Property<long>("SmolLogtype")
                        .HasColumnName("SMOL_LOGTYPE");

                    b.Property<long>("SmolMessageid")
                        .HasColumnName("SMOL_MESSAGEID");

                    b.Property<long?>("SmolText")
                        .HasColumnName("SMOL_TEXT");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCCP_MESSAGE_OUT_LO");

                    b.HasIndex("SmolMessageid")
                        .HasName("FK_SMOL_MESSAGEID");

                    b.HasIndex("SmolText")
                        .HasName("FK_SMOL_TEXT");

                    b.ToTable("SCCP_MESSAGE_OUT_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpUcpAcceptance", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SccpcpaFlag")
                        .HasColumnName("SCCPCPA_FLAG");

                    b.Property<long>("SccpcpaMessage")
                        .HasColumnName("SCCPCPA_MESSAGE");

                    b.Property<string>("SccpcpaObjUid")
                        .IsRequired()
                        .HasColumnName("SCCPCPA_OBJ_UID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCCP_UCP_ACCEPTANCE");

                    b.HasIndex("SccpcpaMessage")
                        .HasName("FK_SCCPCPA_MESSAGE");

                    b.ToTable("SCCP_UCP_ACCEPTANCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Schedule", b =>
                {
                    b.Property<long>("SchdId")
                        .HasColumnName("SCHD_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("GmssIsrural")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GMSS_ISRURAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("GmssMileagerate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GMSS_MILEAGERATE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("SchdAddfileidtofilename")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCHD_ADDFILEIDTOFILENAME")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SchdAdjustcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCHD_ADJUSTCODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("SchdAdjustcodeid")
                        .HasColumnName("SCHD_ADJUSTCODEID");

                    b.Property<string>("SchdAdjustcodevalue")
                        .HasColumnName("SCHD_ADJUSTCODEVALUE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("SchdAgencycode")
                        .IsRequired()
                        .HasColumnName("SCHD_AGENCYCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long?>("SchdCapitatedcriteria")
                        .HasColumnName("SCHD_CAPITATEDCRITERIA");

                    b.Property<short>("SchdChangeagency")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCHD_CHANGEAGENCY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SchdChangeagencycode")
                        .HasColumnName("SCHD_CHANGEAGENCYCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<short>("SchdClaimelectronic")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCHD_CLAIMELECTRONIC")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SchdClaimemail")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCHD_CLAIMEMAIL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("SchdClaimmacroid")
                        .HasColumnName("SCHD_CLAIMMACROID");

                    b.Property<short>("SchdClaimsignature")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCHD_CLAIMSIGNATURE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SchdClaimsummary")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCHD_CLAIMSUMMARY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SchdConsultcodes")
                        .HasColumnName("SCHD_CONSULTCODES")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SchdEncryptkey")
                        .HasColumnName("SCHD_ENCRYPTKEY")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SchdEncryptpass")
                        .HasColumnName("SCHD_ENCRYPTPASS")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("SchdFileid")
                        .HasColumnName("SCHD_FILEID");

                    b.Property<string>("SchdFilenameextension")
                        .HasColumnName("SCHD_FILENAMEEXTENSION")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("SchdFilenameprefix")
                        .HasColumnName("SCHD_FILENAMEPREFIX")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<short>("SchdFilterzeroclaim")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCHD_FILTERZEROCLAIM")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("SchdIdClaimformat")
                        .HasColumnName("SCHD_ID_CLAIMFORMAT");

                    b.Property<string>("SchdInputdirectory")
                        .HasColumnName("SCHD_INPUTDIRECTORY")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("SchdMacro")
                        .HasColumnName("SCHD_MACRO");

                    b.Property<string>("SchdOutputdirectory")
                        .HasColumnName("SCHD_OUTPUTDIRECTORY")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("SchdPaperclaimformat")
                        .HasColumnName("SCHD_PAPERCLAIMFORMAT");

                    b.Property<long?>("SchdPaperclaimmacroid")
                        .HasColumnName("SCHD_PAPERCLAIMMACROID");

                    b.Property<short>("SchdPrintinvoices")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCHD_PRINTINVOICES")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("SchdId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCHEDULE");

                    b.HasIndex("SchdMacro")
                        .HasName("SCHEDULE_FK_SHCD_MACRO");

                    b.HasIndex("SchdPaperclaimmacroid")
                        .HasName("SCHEDULE_FK_SCHD_PAPERCLAIMM");

                    b.ToTable("SCHEDULE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScheduledBilling", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SbCreatedby")
                        .HasColumnName("SB_CREATEDBY");

                    b.Property<long?>("SbScheduledClaimId")
                        .HasColumnName("SB_SCHEDULED_CLAIM_ID");

                    b.Property<long?>("SbScheduledInvoiceId")
                        .HasColumnName("SB_SCHEDULED_INVOICE_ID");

                    b.Property<long?>("SbScheduledTaskId")
                        .HasColumnName("SB_SCHEDULED_TASK_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCHEDULED_BILLING");

                    b.HasIndex("SbCreatedby")
                        .HasName("SB_CREATEDBY_FK");

                    b.HasIndex("SbScheduledClaimId")
                        .HasName("QT_FK_SCHCLAIM");

                    b.HasIndex("SbScheduledInvoiceId")
                        .HasName("QT_FK_SCHINVOICE");

                    b.HasIndex("SbScheduledTaskId")
                        .HasName("SCHTSK_FK_SHTASK");

                    b.ToTable("SCHEDULED_BILLING");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScheduledTask", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ActionedCntcId")
                        .HasColumnName("ACTIONED_CNTC_ID");

                    b.Property<long?>("ActionedcntcPtntId")
                        .HasColumnName("ACTIONEDCNTC_PTNT_ID");

                    b.Property<string>("AgencyCodes")
                        .HasColumnName("AGENCY_CODES")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("ContactOid")
                        .HasColumnName("CONTACT_OID");

                    b.Property<long>("CreatorId")
                        .HasColumnName("CREATOR_ID");

                    b.Property<long?>("CreatorPosId")
                        .HasColumnName("CREATOR_POS_ID");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("DATE_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EmessagesServiceId")
                        .HasColumnName("EMESSAGES_SERVICE_ID");

                    b.Property<long?>("HolderGroup")
                        .HasColumnName("HOLDER_GROUP");

                    b.Property<long?>("HolderId")
                        .HasColumnName("HOLDER_ID");

                    b.Property<short>("IncludeCasuals")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INCLUDE_CASUALS")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_CANCELLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LastFinishTime")
                        .HasColumnName("LAST_FINISH_TIME")
                        .HasColumnType("datetime");

                    b.Property<string>("LastRunMsg")
                        .HasColumnName("LAST_RUN_MSG")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnName("LAST_RUN_TIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("MacroId")
                        .HasColumnName("MACRO_ID");

                    b.Property<long?>("MacroTimeout")
                        .HasColumnName("MACRO_TIMEOUT");

                    b.Property<long?>("MissedAction")
                        .HasColumnName("MISSED_ACTION");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyId")
                        .HasColumnName("PRIVACY_ID");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<short>("ReadByHolder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("READ_BY_HOLDER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdId")
                        .HasColumnName("SHCD_ID");

                    b.Property<DateTime?>("TaskAdded")
                        .HasColumnName("TASK_ADDED")
                        .HasColumnType("datetime");

                    b.Property<long>("TaskAdviseActivityBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TASK_ADVISE_ACTIVITY_BY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TaskAdviseby")
                        .HasColumnName("TASK_ADVISEBY");

                    b.Property<long?>("TaskCaseid")
                        .HasColumnName("TASK_CASEID");

                    b.Property<DateTime?>("TaskChanged")
                        .HasColumnName("TASK_CHANGED")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("TaskComment")
                        .HasColumnName("TASK_COMMENT")
                        .HasColumnType("image");

                    b.Property<string>("TaskData")
                        .HasColumnName("TASK_DATA")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<short>("TaskDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TASK_DELETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TaskDescription")
                        .HasColumnName("TASK_DESCRIPTION")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("TaskDictationId")
                        .HasColumnName("TASK_DICTATION_ID");

                    b.Property<string>("TaskExtObsreqCodingsys")
                        .HasColumnName("TASK_EXT_OBSREQ_CODINGSYS")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TaskExtObsreqDesc")
                        .HasColumnName("TASK_EXT_OBSREQ_DESC")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("TaskExtObsreqId")
                        .HasColumnName("TASK_EXT_OBSREQ_ID")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TaskExternalId")
                        .HasColumnName("TASK_EXTERNAL_ID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TaskExternalRef")
                        .HasColumnName("TASK_EXTERNAL_REF")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<short>("TaskKickScheduler")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TASK_KICK_SCHEDULER")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("TaskNote")
                        .HasColumnName("TASK_NOTE")
                        .HasColumnType("image");

                    b.Property<long?>("TaskPatientId")
                        .HasColumnName("TASK_PATIENT_ID");

                    b.Property<long>("TaskPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TASK_PRIORITY")
                        .HasDefaultValueSql("((2))");

                    b.Property<long?>("TaskStatus")
                        .HasColumnName("TASK_STATUS");

                    b.Property<long?>("TemplateId")
                        .HasColumnName("TEMPLATE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ActionedcntcPtntId")
                        .HasName("SCHEDULED_TASK_FK_PTNT_ID");

                    b.HasIndex("CreatorId")
                        .HasName("SCHEDULED_TASK_FK_CREATOR_ID");

                    b.HasIndex("CreatorPosId")
                        .HasName("SHDL_TASK_FK_CREATOR_POS_ID");

                    b.HasIndex("EmessagesServiceId")
                        .HasName("SCHEDULED_TASK_FK_EMESSAGE");

                    b.HasIndex("HolderGroup")
                        .HasName("SCD_TASK_FK_HOLDER_GROUP");

                    b.HasIndex("HolderId")
                        .HasName("SCHEDULED_TASK_FK_HOLDER_ID");

                    b.HasIndex("MacroId")
                        .HasName("SCHEDULED_TASK_FK_MACRO_ID");

                    b.HasIndex("ModifiedBy")
                        .HasName("FK_SCD_TASK_PPPU_MODIFIED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCHEDULED_TASK");

                    b.HasIndex("PrivacyId")
                        .HasName("FK_SCHEDULED_TASK_PRIVACY_ID");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("SCHEDULED_TASK_FK_PPPU");

                    b.HasIndex("ShcdId")
                        .HasName("SCHEDULED_TASK_FK_SHCD_ID");

                    b.HasIndex("TaskCaseid")
                        .HasName("FK_SCHEDULED_TASK_CASEID");

                    b.HasIndex("TaskDictationId")
                        .HasName("SC_TASK_FK_DICTATION_ID");

                    b.HasIndex("TaskPatientId")
                        .HasName("SC_TASK_FK_PATIENT_ID");

                    b.HasIndex("TemplateId")
                        .HasName("SCD_TASK_FK_TASK_TEMPLATES");

                    b.ToTable("SCHEDULED_TASK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScheduledTaskShare", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("StsClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STS_CLOSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("StsMasterId")
                        .HasColumnName("STS_MASTER_ID");

                    b.Property<long>("StsSlaveId")
                        .HasColumnName("STS_SLAVE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("StsMasterId")
                        .HasName("FK_TASKSHARE_MASTER_ID");

                    b.HasIndex("StsSlaveId")
                        .HasName("FK_TASKSHARE_SLAVE_ID");

                    b.HasIndex("StsMasterId", "StsSlaveId")
                        .IsUnique()
                        .HasName("STS_I_MASTER_SLAVE");

                    b.ToTable("SCHEDULED_TASK_SHARE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScheduledTaskTrg", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("END_DATE")
                        .HasColumnType("datetime");

                    b.Property<short>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_CANCELLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsTimeUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_TIME_USED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnName("LAST_RUN_TIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("MinutesDuration")
                        .HasColumnName("MINUTES_DURATION");

                    b.Property<long?>("MinutesInterval")
                        .HasColumnName("MINUTES_INTERVAL");

                    b.Property<DateTime?>("NextRunTime")
                        .HasColumnName("NEXT_RUN_TIME")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RepeatInterval")
                        .HasColumnName("REPEAT_INTERVAL");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("TaskCid")
                        .HasColumnName("TASK_CID");

                    b.Property<long>("TaskOid")
                        .HasColumnName("TASK_OID");

                    b.Property<DateTime?>("TrgEndBefore")
                        .HasColumnName("TRG_END_BEFORE")
                        .HasColumnType("datetime");

                    b.Property<long?>("TrgFlags")
                        .HasColumnName("TRG_FLAGS");

                    b.Property<DateTime?>("TrgStartAfter")
                        .HasColumnName("TRG_START_AFTER")
                        .HasColumnType("datetime");

                    b.Property<long?>("TrgType")
                        .HasColumnName("TRG_TYPE");

                    b.Property<long?>("TrgTypeV1")
                        .HasColumnName("TRG_TYPE_V1");

                    b.Property<long?>("TrgTypeV2")
                        .HasColumnName("TRG_TYPE_V2");

                    b.Property<long?>("TrgTypeV3")
                        .HasColumnName("TRG_TYPE_V3");

                    b.HasKey("Oid");

                    b.HasIndex("NextRunTime")
                        .HasName("STT_I_NEXT_RT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCHEDULED_TASK_TRG");

                    b.HasIndex("StartDate")
                        .HasName("I_SCHEDULEDTASKTRG_STARTDATE");

                    b.HasIndex("TaskOid")
                        .HasName("SCHEDULED_TASK_TRG_FK_TASK_O");

                    b.HasIndex("TrgType")
                        .HasName("STT_I_TRG_TYPE");

                    b.ToTable("SCHEDULED_TASK_TRG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Scheduleline", b =>
                {
                    b.Property<long>("SclnId")
                        .HasColumnName("SCLN_ID");

                    b.Property<long?>("AutoLinkToKind")
                        .HasColumnName("AUTO_LINK_TO_KIND");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FormType")
                        .HasColumnName("FORM_TYPE");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RefSource")
                        .HasColumnName("REF_SOURCE");

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SchdId")
                        .HasColumnName("SCHD_ID");

                    b.Property<decimal>("SclnAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCLN_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<short>("SclnApplyquantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCLN_APPLYQUANTITY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SclnCanalteramounts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCLN_CANALTERAMOUNTS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SclnCode")
                        .IsRequired()
                        .HasColumnName("SCLN_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("SclnDescription")
                        .HasColumnName("SCLN_DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<short>("SclnIsrefrequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCLN_ISREFREQUIRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("SclnMax")
                        .HasColumnName("SCLN_MAX");

                    b.Property<string>("SclnOutputcode")
                        .HasColumnName("SCLN_OUTPUTCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("SclnId");

                    b.HasIndex("FormType")
                        .HasName("SCHEDULELINE_FK_FORM_TYPE");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCHEDULELINE");

                    b.HasIndex("SchdId")
                        .HasName("SCHEDULELINE_FK_SCHD_ID");

                    b.HasIndex("SclnCode", "SchdId")
                        .IsUnique()
                        .HasName("SCLN_UQ_SCLN_CODE_SCHD_ID");

                    b.ToTable("SCHEDULELINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScriptRefillItems", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("ActionedBy")
                        .HasColumnName("ACTIONED_BY");

                    b.Property<DateTime?>("ActionedOn")
                        .HasColumnName("ACTIONED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Notes")
                        .HasColumnName("NOTES")
                        .HasColumnType("image");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OrderId")
                        .HasColumnName("ORDER_ID");

                    b.Property<long?>("Outcome")
                        .HasColumnName("OUTCOME");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PatientRequested")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PATIENT_REQUESTED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("PharmacyCalled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PHARMACY_CALLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ScriptId")
                        .HasColumnName("SCRIPT_ID");

                    b.Property<long?>("StatusId")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ActionedBy")
                        .HasName("FK_SCRIPT_REFILL_ACTIONED");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCRIPT_REFILL_ITEMS");

                    b.HasIndex("OrderId")
                        .HasName("FK_SCRIPT_REFILL_ITEMS_ORDER");

                    b.HasIndex("ScriptId")
                        .HasName("FK_SCRIPT_REFILL_SCRIPT");

                    b.HasIndex("StatusId")
                        .HasName("FK_SCRIPT_REFILL_STATUS");

                    b.ToTable("SCRIPT_REFILL_ITEMS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScriptRefillOrder", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EncounterId")
                        .HasColumnName("ENCOUNTER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SupplierId")
                        .HasColumnName("SUPPLIER_ID");

                    b.HasKey("Oid");

                    b.HasIndex("CreatedBy")
                        .HasName("FK_SCRIPT_REFILL_CREATED");

                    b.HasIndex("EncounterId")
                        .HasName("FK_SCRIPT_REFILL_ENCOUNTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SCRIPT_REFILL_ORDER");

                    b.HasIndex("PatientId")
                        .HasName("FK_SCRIPT_REFILL_PATIENT");

                    b.HasIndex("PosId")
                        .HasName("FK_SCRIPT_REFILL_POS");

                    b.HasIndex("ProviderId")
                        .HasName("FK_SCRIPT_REFILL_PROVIDER");

                    b.HasIndex("SupplierId")
                        .HasName("FK_SCRIPT_REFILL_SUPPLIER");

                    b.ToTable("SCRIPT_REFILL_ORDER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Securityquestion", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Answertext")
                        .IsRequired()
                        .HasColumnName("ANSWERTEXT")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("Questiontext")
                        .IsRequired()
                        .HasColumnName("QUESTIONTEXT")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long>("Questiontype")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QUESTIONTYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SECURITYQUESTION");

                    b.HasIndex("PatientId")
                        .HasName("FK_SECQUESTION_PATIENT");

                    b.HasIndex("PppuId")
                        .HasName("FK_SECQUESTION_PPPU");

                    b.ToTable("SECURITYQUESTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SequenceAllocator", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Kind")
                        .HasColumnName("KIND");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SeqNumber")
                        .IsRequired()
                        .HasColumnName("SEQ_NUMBER")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("SEQUENCE_ALLOCATOR_I_OBJ_GUID");

                    b.ToTable("SEQUENCE_ALLOCATOR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServerSessionLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("SslLastUpdateTime")
                        .HasColumnName("SSL_LAST_UPDATE_TIME")
                        .HasColumnType("datetime");

                    b.Property<string>("SslServerUrl")
                        .HasColumnName("SSL_SERVER_URL")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("SslSessionId")
                        .HasColumnName("SSL_SESSION_ID")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime>("SslSessionStartTime")
                        .HasColumnName("SSL_SESSION_START_TIME")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.ToTable("SERVER_SESSION_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServerShutdownLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("ShlComputerName")
                        .HasColumnName("SHL_COMPUTER_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("ShlManaged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHL_MANAGED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ShlPppuInitiating")
                        .HasColumnName("SHL_PPPU_INITIATING");

                    b.Property<string>("ShlReason")
                        .HasColumnName("SHL_REASON")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<short>("ShlScheduled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHL_SCHEDULED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ShlShutdown")
                        .HasColumnName("SHL_SHUTDOWN")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ShlStartup")
                        .HasColumnName("SHL_STARTUP")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("ShlPppuInitiating")
                        .HasName("FK_SHL_PPPU_INITIATING");

                    b.ToTable("SERVER_SHUTDOWN_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Service", b =>
                {
                    b.Property<long>("SrvcId")
                        .HasColumnName("SRVC_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PtntIdSupplier")
                        .HasColumnName("PTNT_ID_SUPPLIER");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdIdCategory")
                        .HasColumnName("SHCD_ID_CATEGORY");

                    b.Property<long?>("ShcdIdGroup")
                        .HasColumnName("SHCD_ID_GROUP");

                    b.Property<DateTime?>("SrvcAdded")
                        .HasColumnName("SRVC_ADDED")
                        .HasColumnType("datetime");

                    b.Property<short>("SrvcAllowfractionalrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRVC_ALLOWFRACTIONALRATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SrvcCode")
                        .IsRequired()
                        .HasColumnName("SRVC_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<double?>("SrvcConsumptionrate")
                        .HasColumnName("SRVC_CONSUMPTIONRATE");

                    b.Property<long?>("SrvcDefaultdisease")
                        .HasColumnName("SRVC_DEFAULTDISEASE");

                    b.Property<string>("SrvcDescription")
                        .HasColumnName("SRVC_DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<short>("SrvcDontprintoninvoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRVC_DONTPRINTONINVOICE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SrvcExttaskcodes")
                        .HasColumnName("SRVC_EXTTASKCODES")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SrvcFulldescription")
                        .HasColumnName("SRVC_FULLDESCRIPTION")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("SrvcHelpInfo")
                        .HasColumnName("SRVC_HELP_INFO");

                    b.Property<short>("SrvcIsconsumed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRVC_ISCONSUMED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SrvcIsgroupheader")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRVC_ISGROUPHEADER")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SrvcIsrestrictprovsrvs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRVC_ISRESTRICTPROVSRVS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("SrvcLedgerId")
                        .HasColumnName("SRVC_LEDGER_ID");

                    b.Property<long?>("SrvcLoanperiod")
                        .HasColumnName("SRVC_LOANPERIOD");

                    b.Property<byte[]>("SrvcMacro")
                        .HasColumnName("SRVC_MACRO")
                        .HasColumnType("image");

                    b.Property<string>("SrvcOutputcode")
                        .HasColumnName("SRVC_OUTPUTCODE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("SrvcProcedureid")
                        .HasColumnName("SRVC_PROCEDUREID");

                    b.Property<long?>("SrvcProviderInfo")
                        .HasColumnName("SRVC_PROVIDER_INFO");

                    b.Property<string>("SrvcReference")
                        .HasColumnName("SRVC_REFERENCE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("SrvcSelecttype")
                        .HasColumnName("SRVC_SELECTTYPE");

                    b.Property<long?>("SrvcServiceLocation")
                        .HasColumnName("SRVC_SERVICE_LOCATION");

                    b.Property<string>("SrvcShorttitle")
                        .HasColumnName("SRVC_SHORTTITLE")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<long?>("SrvcSourcetype")
                        .HasColumnName("SRVC_SOURCETYPE");

                    b.Property<long>("SrvcStatus")
                        .HasColumnName("SRVC_STATUS");

                    b.Property<long?>("SrvcStockItem")
                        .HasColumnName("SRVC_STOCK_ITEM");

                    b.Property<long?>("SrvcStockPosid")
                        .HasColumnName("SRVC_STOCK_POSID");

                    b.Property<long?>("SrvcStockProviderid")
                        .HasColumnName("SRVC_STOCK_PROVIDERID");

                    b.Property<string>("SrvcStockSupplierref")
                        .HasColumnName("SRVC_STOCK_SUPPLIERREF")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<short>("SrvcTimeDependency")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRVC_TIME_DEPENDENCY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("SrvcValidfor")
                        .HasColumnName("SRVC_VALIDFOR");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("SrvcId");

                    b.HasIndex("MasterId")
                        .HasName("SERVICE_FK_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SERVICE");

                    b.HasIndex("SrvcDefaultdisease")
                        .HasName("SERVICE_DEFAULTDISEASE_FK");

                    b.HasIndex("SrvcHelpInfo")
                        .HasName("SRVC_FK_HELP_INFO");

                    b.HasIndex("SrvcLedgerId")
                        .HasName("FK_SERVICE_LEDGER_ID");

                    b.HasIndex("SrvcProcedureid")
                        .HasName("FK_SERVICE_PROCEDUREID");

                    b.HasIndex("SrvcProviderInfo")
                        .HasName("SRVC_FK_PROVIDER_INFO");

                    b.HasIndex("SrvcServiceLocation")
                        .HasName("SRVC_SERVICE_LOCATION_ID_I");

                    b.HasIndex("SrvcStockItem")
                        .HasName("SERVICE_STOCK_ITEM_FK");

                    b.HasIndex("SrvcStockPosid")
                        .HasName("SERVICE_FK_SRVC_STOCK_POSID");

                    b.HasIndex("SrvcStockProviderid")
                        .HasName("SERVICE_FK_SRVC_STOCK_PROVID");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("SERVICE_I_MASTERVERS");

                    b.HasIndex("SrvcCode", "PartitionId", "Deleted")
                        .HasName("SERVICE_I_CODE_PART_DEL");

                    b.ToTable("SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServiceClinicalActionMap", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("ScamAsk")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCAM_ASK")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ScamForce")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCAM_FORCE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ScamParentServiceId")
                        .HasColumnName("SCAM_PARENT_SERVICE_ID");

                    b.Property<long?>("ScamPosId")
                        .HasColumnName("SCAM_POS_ID");

                    b.Property<long?>("ScamServiceId")
                        .HasColumnName("SCAM_SERVICE_ID");

                    b.Property<string>("ScamStartWith")
                        .HasColumnName("SCAM_START_WITH")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long?>("ScamTypeId")
                        .HasColumnName("SCAM_TYPE_ID");

                    b.Property<long?>("ScamWhenActionedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCAM_WHEN_ACTIONED_ID")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SERVICE_CLINICAL_AC");

                    b.HasIndex("ScamParentServiceId")
                        .HasName("FK_SCAM_PARENT_SRVC_ID");

                    b.HasIndex("ScamPosId")
                        .HasName("FK_SCAM_POS_ID");

                    b.HasIndex("ScamServiceId")
                        .HasName("FK_SCAM_SRVC_ID");

                    b.ToTable("SERVICE_CLINICAL_ACTION_MAP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Servicediscount", b =>
                {
                    b.Property<long>("SrdsId")
                        .HasColumnName("SRDS_ID");

                    b.Property<long>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CID")
                        .HasDefaultValueSql("((22005))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ServicePriceId")
                        .HasColumnName("SERVICE_PRICE_ID");

                    b.Property<long>("ShcdIdCode")
                        .HasColumnName("SHCD_ID_CODE");

                    b.Property<decimal>("SrdsAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRDS_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("SrdsDeletedid")
                        .HasColumnName("SRDS_DELETEDID");

                    b.Property<long>("SrdsMethod")
                        .HasColumnName("SRDS_METHOD");

                    b.HasKey("SrdsId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SERVICEDISCOUNT");

                    b.HasIndex("ServicePriceId")
                        .HasName("SERVICEDISCOUNT_FK_PRICE");

                    b.HasIndex("ShcdIdCode")
                        .HasName("SERVICEDISCOUNTFOREIGNKEY1");

                    b.HasIndex("ShcdIdCode", "ServicePriceId", "SrdsDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("SRVCDISCOUNT_UN");

                    b.ToTable("SERVICEDISCOUNT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServiceLedgers", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SlLedger")
                        .HasColumnName("SL_LEDGER");

                    b.Property<long>("SlService")
                        .HasColumnName("SL_SERVICE");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SERVICE_LEDGERS");

                    b.HasIndex("SlLedger")
                        .HasName("FK_SL_LEDGER");

                    b.HasIndex("SlService")
                        .HasName("FK_SL_SERVICE");

                    b.ToTable("SERVICE_LEDGERS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServicePrice", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<decimal>("Add7")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ADD7")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("Add7p")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ADD7P")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("AgencyCode")
                        .HasColumnName("AGENCY_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("AmountMethod")
                        .HasColumnName("AMOUNT_METHOD");

                    b.Property<long?>("BasedOn")
                        .HasColumnName("BASED_ON");

                    b.Property<string>("BulkCode")
                        .HasColumnName("BULK_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CID")
                        .HasDefaultValueSql("((22004))");

                    b.Property<long>("CodeMethod")
                        .HasColumnName("CODE_METHOD");

                    b.Property<decimal>("DefaultQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DEFAULT_QUANTITY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("Distance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DISTANCE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("END_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("GstTaxrateId")
                        .HasColumnName("GST_TAXRATE_ID");

                    b.Property<short>("IsBulkbiller")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_BULKBILLER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PstTaxrateId")
                        .HasColumnName("PST_TAXRATE_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SrvcId")
                        .HasColumnName("SRVC_ID");

                    b.Property<long>("SrvpDeletedid")
                        .HasColumnName("SRVP_DELETEDID");

                    b.Property<decimal>("StandardPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STANDARD_PRICE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("TaxrateId")
                        .HasColumnName("TAXRATE_ID");

                    b.Property<decimal>("UnitCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UNIT_COST")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.HasKey("Oid");

                    b.HasIndex("GstTaxrateId")
                        .HasName("FK_SRVPRICE_GST_TAXRATE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SERVICE_PRICE");

                    b.HasIndex("PstTaxrateId")
                        .HasName("FK_SRVPRICE_PST_TAXRATE_ID");

                    b.HasIndex("SrvcId")
                        .HasName("FK_SERVICE_PRICE_SRVC_ID");

                    b.HasIndex("TaxrateId")
                        .HasName("FK_SERVICE_PRICE_TAXRATE_ID");

                    b.ToTable("SERVICE_PRICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Servicerate", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CID")
                        .HasDefaultValueSql("((22006))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ServicePriceId")
                        .HasColumnName("SERVICE_PRICE_ID");

                    b.Property<long>("ShcdIdCode")
                        .HasColumnName("SHCD_ID_CODE");

                    b.Property<decimal>("SrrtAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRRT_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SERVICERATE");

                    b.HasIndex("ServicePriceId")
                        .HasName("SERVICERATE_FK_PRICE");

                    b.HasIndex("ShcdIdCode")
                        .HasName("SERVICERATEFOREIGNKEY1");

                    b.ToTable("SERVICERATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Servicesetline", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CID")
                        .HasDefaultValueSql("((22007))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdId")
                        .HasColumnName("SHCD_ID");

                    b.Property<long?>("SrvcId")
                        .HasColumnName("SRVC_ID");

                    b.Property<long?>("SrvcIdLine")
                        .HasColumnName("SRVC_ID_LINE");

                    b.Property<short>("SslnInvoicedontprint")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SSLN_INVOICEDONTPRINT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SslnInvoiceomit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SSLN_INVOICEOMIT")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("SslnQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SSLN_QUANTITY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("SslnTaxRateId")
                        .HasColumnName("SSLN_TAX_RATE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SERVICESETLINE");

                    b.HasIndex("PppuId")
                        .HasName("SERVICESETLINE_FK_PPPU_ID");

                    b.HasIndex("ShcdId")
                        .HasName("SERVICESETLINE_FK_SHCD_ID");

                    b.HasIndex("SrvcId")
                        .HasName("SERVICESETLINEFOREIGNKEY1");

                    b.HasIndex("SrvcIdLine")
                        .HasName("SERVICESETLINEFOREIGNKEY2");

                    b.HasIndex("SslnTaxRateId")
                        .HasName("SERVICESETLINE_FK_TAXRATE_ID");

                    b.ToTable("SERVICESETLINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServicesForCase", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("CaseId")
                        .HasColumnName("CASE_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnName("CLOSED_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnName("OPEN_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Principal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRINCIPAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("CaseId")
                        .HasName("FK_SERV_CASE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SERVICES_FOR_CASE");

                    b.HasIndex("ProviderId")
                        .HasName("FK_SERV_PROVIDER_ID");

                    b.HasIndex("ServiceId")
                        .HasName("FK_SERV_SERVICE_ID");

                    b.ToTable("SERVICES_FOR_CASE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Sessionticket", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Partitionid")
                        .HasColumnName("PARTITIONID");

                    b.Property<long>("StAccessType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ST_ACCESS_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("StCaseid")
                        .HasColumnName("ST_CASEID");

                    b.Property<DateTime>("StCreatedOn")
                        .HasColumnName("ST_CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("StDeviceSn")
                        .HasColumnName("ST_DEVICE_SN")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("StExpiredOn")
                        .HasColumnName("ST_EXPIRED_ON")
                        .HasColumnType("datetime");

                    b.Property<long>("StFlags")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ST_FLAGS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("StOrgstuctureid")
                        .HasColumnName("ST_ORGSTUCTUREID");

                    b.Property<string>("StOwnerHostName")
                        .HasColumnName("ST_OWNER_HOST_NAME")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("StOwnerIpAddress")
                        .HasColumnName("ST_OWNER_IP_ADDRESS")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StOwnerSid")
                        .HasColumnName("ST_OWNER_SID")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<long?>("StPosid")
                        .HasColumnName("ST_POSID");

                    b.Property<long?>("StPppuid")
                        .HasColumnName("ST_PPPUID");

                    b.Property<long?>("StPtntid")
                        .HasColumnName("ST_PTNTID");

                    b.Property<long>("StTickettype")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ST_TICKETTYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("StUid")
                        .IsRequired()
                        .HasColumnName("ST_UID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StUsername")
                        .HasColumnName("ST_USERNAME")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("UserText")
                        .HasColumnName("USER_TEXT")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Partitionid")
                        .HasName("SESSIONTICKET_FK_PARTITIONID");

                    b.HasIndex("StCaseid")
                        .HasName("SESSIONTICKET_FK_CASEID");

                    b.HasIndex("StOrgstuctureid")
                        .HasName("SESSIONTICKET_FK_ORGSTUCTUREID");

                    b.HasIndex("StPosid")
                        .HasName("SESSIONTICKET_FK_POSID");

                    b.HasIndex("StPppuid")
                        .HasName("SESSIONTICKET_FK_PPPUID");

                    b.HasIndex("StPtntid")
                        .HasName("SESSIONTICKET_FK_PTNTID");

                    b.HasIndex("StUid")
                        .IsUnique()
                        .HasName("SESSIONTICKET_I_UID");

                    b.ToTable("SESSIONTICKET");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SharedHealthItem", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .HasColumnName("OBJ_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ShiComment")
                        .HasColumnName("SHI_COMMENT")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("ShiDateFrom")
                        .HasColumnName("SHI_DATE_FROM")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ShiDateTo")
                        .HasColumnName("SHI_DATE_TO")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ShiDescription")
                        .HasColumnName("SHI_DESCRIPTION")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("ShiDirections")
                        .HasColumnName("SHI_DIRECTIONS")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<long>("ShiDocumentId")
                        .HasColumnName("SHI_DOCUMENT_ID");

                    b.Property<long?>("ShiImmunisationId")
                        .HasColumnName("SHI_IMMUNISATION_ID");

                    b.Property<short>("ShiIsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHI_IS_ACTIVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ShiIsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHI_IS_PRIVATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ShiItemType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHI_ITEM_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ShiMedicationId")
                        .HasColumnName("SHI_MEDICATION_ID");

                    b.Property<long?>("ShiProblemId")
                        .HasColumnName("SHI_PROBLEM_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ShiDocumentId")
                        .HasName("FK_SHI_SUMMARY_ID");

                    b.HasIndex("ShiImmunisationId")
                        .HasName("FK_SHI_IMMUNISATION_ID");

                    b.HasIndex("ShiMedicationId")
                        .HasName("FK_SHI_MEDICATION_ID");

                    b.HasIndex("ShiProblemId")
                        .HasName("FK_SHI_PROBLEM_ID");

                    b.ToTable("SHARED_HEALTH_ITEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SharingConsentClinic", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PsccClinicPartId")
                        .HasColumnName("PSCC_CLINIC_PART_ID");

                    b.Property<long>("PsccConsentId")
                        .HasColumnName("PSCC_CONSENT_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("SC_CLN_PART_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("SC_CLN_PART_FK_DELETEDBY");

                    b.HasIndex("MasterId")
                        .HasName("SC_CLN_PART_FK_MASTER_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SHARING_CONSENT_CLI");

                    b.HasIndex("PsccClinicPartId")
                        .HasName("FK_CONSENTCLINIC_PARTITION");

                    b.HasIndex("PsccConsentId")
                        .HasName("FK_CONSENTCLINIC_CONSENT");

                    b.HasIndex("MasterId", "Version")
                        .IsUnique()
                        .HasName("SC_CLN_PART_I_MASTERVERS");

                    b.ToTable("SHARING_CONSENT_CLINIC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Shortcode", b =>
                {
                    b.Property<long>("ShcdId")
                        .HasColumnName("SHCD_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ShcdAdded")
                        .HasColumnName("SHCD_ADDED")
                        .HasColumnType("datetime");

                    b.Property<short>("ShcdAllowadminenc")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_ALLOWADMINENC")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ShcdBeginnum")
                        .HasColumnName("SHCD_BEGINNUM")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdCaselevel")
                        .HasColumnName("SHCD_CASELEVEL");

                    b.Property<DateTime?>("ShcdChanged")
                        .HasColumnName("SHCD_CHANGED")
                        .HasColumnType("datetime");

                    b.Property<string>("ShcdCode")
                        .IsRequired()
                        .HasColumnName("SHCD_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_COLOR")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("ShcdComment")
                        .HasColumnName("SHCD_COMMENT")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("ShcdCurnum")
                        .HasColumnName("SHCD_CURNUM")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long>("ShcdDeletedid")
                        .HasColumnName("SHCD_DELETEDID");

                    b.Property<string>("ShcdDescription")
                        .HasColumnName("SHCD_DESCRIPTION")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<long?>("ShcdEmphasis")
                        .HasColumnName("SHCD_EMPHASIS");

                    b.Property<string>("ShcdEndnum")
                        .HasColumnName("SHCD_ENDNUM")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<short>("ShcdExtactivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_EXTACTIVITY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("ShcdIncludefont")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_INCLUDEFONT")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("ShcdMacro")
                        .HasColumnName("SHCD_MACRO")
                        .HasColumnType("image");

                    b.Property<string>("ShcdOutput")
                        .HasColumnName("SHCD_OUTPUT")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<short>("ShcdOverrun")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_OVERRUN")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ShcdOwnerpppuid")
                        .HasColumnName("SHCD_OWNERPPPUID");

                    b.Property<long?>("ShcdParentid")
                        .HasColumnName("SHCD_PARENTID");

                    b.Property<short>("ShcdPatientcontact")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_PATIENTCONTACT")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("ShcdRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_RATE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("ShcdRate2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_RATE2")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<short>("ShcdReadonly")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_READONLY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ShcdRoleid")
                        .HasColumnName("SHCD_ROLEID");

                    b.Property<byte[]>("ShcdRtftext")
                        .HasColumnName("SHCD_RTFTEXT")
                        .HasColumnType("image");

                    b.Property<long>("ShcdSysid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHCD_SYSID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ShcdTag")
                        .HasColumnName("SHCD_TAG");

                    b.Property<long>("ShcdType")
                        .HasColumnName("SHCD_TYPE");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VERSION")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("ShcdId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SHORTCODE");

                    b.HasIndex("ShcdParentid")
                        .HasName("FK_SHORTCODE_SHCD_PARENTID");

                    b.HasIndex("ShcdRoleid")
                        .HasName("FK_SHORTCODE_SHCD_ROLEID");

                    b.HasIndex("ShcdType")
                        .HasName("SHORTCODE_FK_SHCD_TYPE");

                    b.HasIndex("ShcdSysid", "ShcdDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("SHORTCODE_SYSID");

                    b.HasIndex("ShcdId", "PartitionId", "MasterId", "ShcdType")
                        .HasName("IX_SHORTCODE_MULTICOL");

                    b.HasIndex("ShcdCode", "ShcdType", "ShcdOwnerpppuid", "ShcdDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("CODETYPEDELETEDID");

                    b.ToTable("SHORTCODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ShortcodeOutcome", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("Cancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CANCELLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COMPLETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Declined")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DECLINED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Excluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EXCLUDED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ShcdId")
                        .HasColumnName("SHCD_ID");

                    b.Property<short>("StillDue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STILL_DUE")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SHORTCODE_OUTCOME");

                    b.HasIndex("ShcdId")
                        .HasName("FK_SC_OUTCOME_SHCD_ID");

                    b.ToTable("SHORTCODE_OUTCOME");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ShortcodeType", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CATEGORY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Editable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EDITABLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ParentTypeId")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SHORTCODE_TYPE");

                    b.HasIndex("ParentTypeId")
                        .HasName("FK_SHORTCODE_TYPE_PARENT");

                    b.HasIndex("Oid", "PartitionId", "Category")
                        .HasName("IX_SHORTCODE_TYPE_MULTICOL");

                    b.ToTable("SHORTCODE_TYPE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SimpleCompoundRolesLinks", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<long>("CompoundOid")
                        .HasColumnName("COMPOUND_OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SimpleOid")
                        .HasColumnName("SIMPLE_OID");

                    b.HasKey("Oid");

                    b.HasIndex("CompoundOid")
                        .HasName("SMPL_CMPND_RLS_LNK_FK_CMPND");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SIMPLE_COMPOUND_ROL");

                    b.HasIndex("SimpleOid")
                        .HasName("SMPL_CMPND_RLS_LNK_FK_SMPL");

                    b.ToTable("SIMPLE_COMPOUND_ROLES_LINKS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Situation", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FolderOid")
                        .HasColumnName("FOLDER_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("StGuidelineId")
                        .HasColumnName("ST_GUIDELINE_ID");

                    b.Property<string>("StName")
                        .HasColumnName("ST_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<byte[]>("StNarrative")
                        .HasColumnName("ST_NARRATIVE")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("FolderOid")
                        .HasName("SIT_SIT_FOLDERS_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SITUATION");

                    b.HasIndex("StGuidelineId")
                        .HasName("ST_GUIDELINE_ID_FK");

                    b.ToTable("SITUATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SituationComplexFilter", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SicfComplexFilterId")
                        .HasColumnName("SICF_COMPLEX_FILTER_ID");

                    b.Property<long>("SicfSituationId")
                        .HasColumnName("SICF_SITUATION_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SITUATION_COMPLEX_F");

                    b.HasIndex("SicfComplexFilterId")
                        .HasName("SICF_COMPLEX_FILTER_ID_FK");

                    b.HasIndex("SicfSituationId")
                        .HasName("SICF_SITUATION_ID_FK");

                    b.ToTable("SITUATION_COMPLEX_FILTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SituationCriteria", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ScConceptId")
                        .HasColumnName("SC_CONCEPT_ID");

                    b.Property<long>("ScCondition")
                        .HasColumnName("SC_CONDITION");

                    b.Property<long>("ScCriteriaType")
                        .HasColumnName("SC_CRITERIA_TYPE");

                    b.Property<long?>("ScDimensionId")
                        .HasColumnName("SC_DIMENSION_ID");

                    b.Property<long>("ScHriattribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SC_HRIATTRIBUTE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("ScSelectType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SC_SELECT_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("ScSituationId")
                        .HasColumnName("SC_SITUATION_ID");

                    b.Property<long>("ScTimeFrame")
                        .HasColumnName("SC_TIME_FRAME");

                    b.Property<string>("ScValue")
                        .HasColumnName("SC_VALUE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SITUATION_CRITERIA");

                    b.HasIndex("ScConceptId")
                        .HasName("SC_CONCEPT_ID_FK");

                    b.HasIndex("ScDimensionId")
                        .HasName("SC_DIMENSION_ID_FK");

                    b.HasIndex("ScSituationId")
                        .HasName("SC_SITUATION_ID_FK");

                    b.ToTable("SITUATION_CRITERIA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Situationsfolders", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FolderName")
                        .HasColumnName("FOLDER_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("GuidelinesOid")
                        .HasColumnName("GUIDELINES_OID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ParentfolderOid")
                        .HasColumnName("PARENTFOLDER_OID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("GuidelinesOid")
                        .HasName("SIT_FOLDERS_GUIDELN_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SITUATIONSFOLDERS");

                    b.HasIndex("ParentfolderOid")
                        .HasName("SIT_FOLDERS_REC_FOLDERS_FK");

                    b.ToTable("SITUATIONSFOLDERS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SourceData", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("Sourcedata")
                        .HasColumnName("SOURCEDATA")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SOURCE_DATA");

                    b.ToTable("SOURCE_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SourceFile", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FileComment")
                        .HasColumnName("FILE_COMMENT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("FileDataId")
                        .HasColumnName("FILE_DATA_ID");

                    b.Property<string>("FileName")
                        .HasColumnName("FILE_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long>("FolderId")
                        .HasColumnName("FOLDER_ID");

                    b.Property<long>("MacroTimeoutMsec")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MACRO_TIMEOUT_MSEC")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("MasterId")
                        .HasColumnName("MASTER_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("Version")
                        .HasColumnName("VERSION");

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("SOURCE_FILE_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("SOURCE_FILE_FK_DELETEDBY");

                    b.HasIndex("FileDataId")
                        .HasName("SOURCE_FILE_FK_DATA");

                    b.HasIndex("FolderId")
                        .HasName("SOURCE_FILE_FK_FOLDER");

                    b.HasIndex("MasterId")
                        .HasName("SOURCE_FILE_FK_MASTER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SOURCE_FILE");

                    b.HasIndex("FolderId", "FileName", "Version", "PartitionId")
                        .HasName("SOURCE_FILE_I_NAME");

                    b.ToTable("SOURCE_FILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SourceFolder", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Createdby")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Deletedby")
                        .HasColumnName("DELETEDBY");

                    b.Property<long?>("Deletedid")
                        .HasColumnName("DELETEDID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FolderName")
                        .HasColumnName("FOLDER_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ParentId")
                        .HasColumnName("PARENT_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Createdby")
                        .HasName("SOURCE_FOLDER_FK_CREATEDBY");

                    b.HasIndex("Deletedby")
                        .HasName("SOURCE_FOLDER_FK_DELETEDBY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SOURCE_FOLDER");

                    b.HasIndex("ParentId")
                        .HasName("SOURCE_FOLDER_FK_PARENT");

                    b.HasIndex("ParentId", "FolderName", "Deletedid", "PartitionId")
                        .HasName("SOURCE_FOLDER_I_NAME");

                    b.ToTable("SOURCE_FOLDER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Sqlstatement", b =>
                {
                    b.Property<long>("SqlsId")
                        .HasColumnName("SQLS_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SqlsClinsecThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLS_CLINSEC_THRESHOLD")
                        .HasDefaultValueSql("((3))");

                    b.Property<string>("SqlsCode")
                        .IsRequired()
                        .HasColumnName("SQLS_CODE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SqlsCreatedBy")
                        .HasColumnName("SQLS_CREATED_BY")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SqlsCreatedByContact")
                        .HasColumnName("SQLS_CREATED_BY_CONTACT")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SqlsCreatedDate")
                        .HasColumnName("SQLS_CREATED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("SqlsCreatedFor")
                        .HasColumnName("SQLS_CREATED_FOR")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("SqlsDateformat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLS_DATEFORMAT")
                        .HasDefaultValueSql("('c')")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short>("SqlsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLS_DELETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SqlsDescription")
                        .IsRequired()
                        .HasColumnName("SQLS_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("SqlsFileFormat")
                        .HasColumnName("SQLS_FILE_FORMAT");

                    b.Property<short>("SqlsFileHasColheader")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLS_FILE_HAS_COLHEADER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SqlsFileName")
                        .HasColumnName("SQLS_FILE_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SqlsFileNameExt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLS_FILE_NAME_EXT")
                        .HasDefaultValueSql("('TXT')")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long?>("SqlsFileNameNew")
                        .HasColumnName("SQLS_FILE_NAME_NEW");

                    b.Property<string>("SqlsFileToDir")
                        .HasColumnName("SQLS_FILE_TO_DIR")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long>("SqlsFinsecThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLS_FINSEC_THRESHOLD")
                        .HasDefaultValueSql("((3))");

                    b.Property<short>("SqlsIscustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLS_ISCUSTOM")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SqlsName")
                        .HasColumnName("SQLS_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("SqlsOutputTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLS_OUTPUT_TO")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("SqlsProfileMaxversion")
                        .HasColumnName("SQLS_PROFILE_MAXVERSION");

                    b.Property<long>("SqlsProfileMinversion")
                        .HasColumnName("SQLS_PROFILE_MINVERSION");

                    b.Property<string>("SqlsStatement")
                        .HasColumnName("SQLS_STATEMENT")
                        .HasMaxLength(1500)
                        .IsUnicode(false);

                    b.Property<long>("SqlsVersion")
                        .HasColumnName("SQLS_VERSION");

                    b.HasKey("SqlsId");

                    b.ToTable("SQLSTATEMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Sqlstatementlog", b =>
                {
                    b.Property<long>("SqllId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLL_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("SqllDate")
                        .HasColumnName("SQLL_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("SqllPppuId")
                        .HasColumnName("SQLL_PPPU_ID");

                    b.Property<short>("SqllResultSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SQLL_RESULT_SUCCESS")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("SqllSqlsId")
                        .HasColumnName("SQLL_SQLS_ID");

                    b.Property<string>("SqllSqlsStatement")
                        .HasColumnName("SQLL_SQLS_STATEMENT")
                        .HasMaxLength(1500)
                        .IsUnicode(false);

                    b.Property<long?>("SqllSqlsVersion")
                        .HasColumnName("SQLL_SQLS_VERSION");

                    b.HasKey("SqllId");

                    b.HasIndex("SqllPppuId")
                        .HasName("SQLL_PPPU_ID");

                    b.HasIndex("SqllSqlsId")
                        .HasName("SQLL_SQLS_ID");

                    b.ToTable("SQLSTATEMENTLOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockItem", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SiCode")
                        .IsRequired()
                        .HasColumnName("SI_CODE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SiDescription")
                        .IsRequired()
                        .HasColumnName("SI_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("SiGroup")
                        .HasColumnName("SI_GROUP");

                    b.Property<string>("SiNote")
                        .HasColumnName("SI_NOTE")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<long?>("SiPackCount")
                        .HasColumnName("SI_PACK_COUNT");

                    b.Property<long?>("SiPackItem")
                        .HasColumnName("SI_PACK_ITEM");

                    b.Property<long?>("SiRxLink")
                        .HasColumnName("SI_RX_LINK");

                    b.Property<string>("SiSku")
                        .HasColumnName("SI_SKU")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("SiSupplier")
                        .HasColumnName("SI_SUPPLIER");

                    b.Property<string>("SiSupplierref")
                        .HasColumnName("SI_SUPPLIERREF")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("STOCK_ITEM_I_OBJ_GUID");

                    b.HasIndex("SiGroup")
                        .HasName("STOCK_ITEM_GROUP_FK");

                    b.HasIndex("SiPackItem")
                        .HasName("STOCK_ITEM_PACK_FK");

                    b.HasIndex("SiRxLink")
                        .HasName("STOCK_ITEM_RX_FK");

                    b.HasIndex("SiSku")
                        .HasName("STOCK_ITEM_SKU_IDX");

                    b.HasIndex("SiSupplier")
                        .HasName("STOCK_ITEM_SUPPLIER_FK");

                    b.HasIndex("SiCode", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("STOCK_ITEM_CODE_IDX");

                    b.ToTable("STOCK_ITEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockLevel", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Maximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MAXIMUM")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("Minimum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MINIMUM")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("Movementscm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOVEMENTSCM")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<decimal>("Openlevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OPENLEVEL")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PosId")
                        .HasColumnName("POS_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<decimal>("Reorder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REORDER")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("Salescm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SALESCM")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("ServiceId")
                        .HasColumnName("SERVICE_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_STOCK_LEVEL");

                    b.HasIndex("PosId")
                        .HasName("STOCK_LEVEL_FK_POS_ID");

                    b.HasIndex("ServiceId")
                        .HasName("STOCK_LEVEL_FK_SERVICE_ID");

                    b.ToTable("STOCK_LEVEL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockLevels", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SvLocation")
                        .HasColumnName("SV_LOCATION");

                    b.Property<long?>("SvMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SV_MAXIMUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("SvMinimum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SV_MINIMUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SvNote")
                        .HasColumnName("SV_NOTE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("SvReorder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SV_REORDER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("SvStockItem")
                        .HasColumnName("SV_STOCK_ITEM");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("STOCK_LEVELS_I_OBJ_GUID");

                    b.HasIndex("SvLocation")
                        .HasName("STOCK_LEVELS_LOCATION_FK");

                    b.HasIndex("SvStockItem")
                        .HasName("STOCK_LEVELS_STOCKITEM_FK");

                    b.ToTable("STOCK_LEVELS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockLocationPos", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LpLocation")
                        .HasColumnName("LP_LOCATION");

                    b.Property<long>("LpPos")
                        .HasColumnName("LP_POS");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("LpLocation")
                        .HasName("STOCK_LP_LOCATION_FK");

                    b.HasIndex("LpPos")
                        .HasName("STOCK_LP_POS_FK");

                    b.HasIndex("ObjGuid")
                        .HasName("STOCK_LOCATION_POS_I_OBJ_GUID");

                    b.ToTable("STOCK_LOCATION_POS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockLot", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SlBatch")
                        .HasColumnName("SL_BATCH")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SlExpiry")
                        .HasColumnName("SL_EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<long>("SlLocation")
                        .HasColumnName("SL_LOCATION");

                    b.Property<string>("SlNote")
                        .HasColumnName("SL_NOTE")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("SlOrderNum")
                        .HasColumnName("SL_ORDER_NUM")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("SlQuantity")
                        .HasColumnName("SL_QUANTITY");

                    b.Property<long>("SlStockItem")
                        .HasColumnName("SL_STOCK_ITEM");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("STOCK_LOT_I_OBJ_GUID");

                    b.HasIndex("SlLocation")
                        .HasName("STOCK_LOT_LOCATION_FK");

                    b.HasIndex("SlStockItem")
                        .HasName("STOCK_LOT_STOCKITEM_FK");

                    b.ToTable("STOCK_LOT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockLotSoh", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtModified")
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .HasColumnName("OBJ_GUID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .HasColumnName("PARTITION_ID");

                    b.Property<string>("SlBatch")
                        .HasColumnName("SL_BATCH")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SlExpiry")
                        .HasColumnName("SL_EXPIRY")
                        .HasColumnType("datetime");

                    b.Property<long>("SlLocation")
                        .HasColumnName("SL_LOCATION");

                    b.Property<long>("SlStockItem")
                        .HasColumnName("SL_STOCK_ITEM");

                    b.Property<long?>("SlStockLot")
                        .HasColumnName("SL_STOCK_LOT");

                    b.Property<long>("Soh")
                        .HasColumnName("SOH");

                    b.HasKey("Oid");

                    b.ToTable("STOCK_LOT_SOH");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Submission", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SbmsDataCentre")
                        .IsRequired()
                        .HasColumnName("SBMS_DATA_CENTRE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime>("SbmsDate")
                        .HasColumnName("SBMS_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("SbmsSeqNumber")
                        .HasColumnName("SBMS_SEQ_NUMBER");

                    b.Property<long>("SbmsState")
                        .HasColumnName("SBMS_STATE");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SUBMISSION");

                    b.HasIndex("SbmsState")
                        .HasName("SBMS_I_SBMS_STATE");

                    b.ToTable("SUBMISSION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Suppliertest", b =>
                {
                    b.Property<long>("SptsId")
                        .HasColumnName("SPTS_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("ExprId")
                        .HasColumnName("EXPR_ID");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SptsCode")
                        .IsRequired()
                        .HasColumnName("SPTS_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("SptsComment")
                        .HasColumnName("SPTS_COMMENT")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<decimal>("SptsCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SPTS_COST")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long>("SptsDeletedid")
                        .HasColumnName("SPTS_DELETEDID");

                    b.Property<string>("SptsDescription")
                        .IsRequired()
                        .HasColumnName("SPTS_DESCRIPTION")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("SptsInstruction")
                        .HasColumnName("SPTS_INSTRUCTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("SptsIsappt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SPTS_ISAPPT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SptsIsavailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SPTS_ISAVAILABLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SptsIspreferred")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SPTS_ISPREFERRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("SptsIsspecial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SPTS_ISSPECIAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("SptsSourcetype")
                        .HasColumnName("SPTS_SOURCETYPE");

                    b.Property<long>("TestId")
                        .HasColumnName("TEST_ID");

                    b.HasKey("SptsId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SUPPLIERTEST");

                    b.ToTable("SUPPLIERTEST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SynchronizationGroup", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("SgrName")
                        .HasColumnName("SGR_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.ToTable("SYNCHRONIZATION_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SynchronizationGroupLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("SgrlGroup")
                        .HasColumnName("SGRL_GROUP");

                    b.Property<long>("SgrlPartition")
                        .HasColumnName("SGRL_PARTITION");

                    b.HasKey("Oid");

                    b.HasIndex("SgrlGroup")
                        .HasName("FK_SYN_GROUP_LINK_GROUP");

                    b.HasIndex("SgrlPartition")
                        .HasName("FK_SYN_GROUP_LINK_PARTITION");

                    b.HasIndex("SgrlPartition", "SgrlGroup")
                        .IsUnique()
                        .HasName("I_SYNCH_GROUP_LINK");

                    b.ToTable("SYNCHRONIZATION_GROUP_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SynchronizationLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("SlogChanges")
                        .HasColumnName("SLOG_CHANGES")
                        .HasColumnType("image");

                    b.Property<DateTime>("SlogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SLOG_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("SlogIcon")
                        .HasColumnName("SLOG_ICON");

                    b.Property<string>("SlogObject")
                        .HasColumnName("SLOG_OBJECT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("SlogObjectCid")
                        .HasColumnName("SLOG_OBJECT_CID");

                    b.Property<long?>("SlogObjectOid")
                        .HasColumnName("SLOG_OBJECT_OID");

                    b.Property<long>("SlogPatient")
                        .HasColumnName("SLOG_PATIENT");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SYNCHRONIZATION_LOG");

                    b.HasIndex("SlogPatient")
                        .HasName("FK_SYN_LOG_PATIENT");

                    b.ToTable("SYNCHRONIZATION_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SynchronizationMacro", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("SmacroAction")
                        .HasColumnName("SMACRO_ACTION");

                    b.Property<long?>("SmacroCollecting")
                        .HasColumnName("SMACRO_COLLECTING");

                    b.Property<long>("SmacroObject")
                        .HasColumnName("SMACRO_OBJECT");

                    b.Property<long?>("SmacroSynchronizing")
                        .HasColumnName("SMACRO_SYNCHRONIZING");

                    b.HasKey("Oid");

                    b.HasIndex("SmacroCollecting")
                        .HasName("FK_SYN_MACRO_COLLECT");

                    b.HasIndex("SmacroSynchronizing")
                        .HasName("FK_SYN_MACRO_SYNCH");

                    b.HasIndex("SmacroObject", "SmacroAction")
                        .IsUnique()
                        .HasName("I_SYNCH_MACRO");

                    b.ToTable("SYNCHRONIZATION_MACRO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SyncImport", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Filename")
                        .HasColumnName("FILENAME")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartedOn")
                        .HasColumnName("STARTED_ON")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SYNC_IMPORT");

                    b.ToTable("SYNC_IMPORT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SyncImportError", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long?>("Code")
                        .HasColumnName("CODE");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("Import")
                        .HasColumnName("IMPORT");

                    b.Property<string>("MsgText")
                        .HasColumnName("MSG_TEXT")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ObjRef")
                        .HasColumnName("OBJ_REF")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("Import")
                        .HasName("SI_ERROR_FK_IMPORT");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_SYNC_IMPORT_ERROR");

                    b.ToTable("SYNC_IMPORT_ERROR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TaskAuditLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("LogType")
                        .HasColumnName("LOG_TYPE");

                    b.Property<DateTime>("LoggedOn")
                        .HasColumnName("LOGGED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrevHolderId")
                        .HasColumnName("PREV_HOLDER_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("TameId")
                        .HasColumnName("TAME_ID");

                    b.Property<long>("TaskId")
                        .HasColumnName("TASK_ID");

                    b.Property<long>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TASK_AUDIT_LOG");

                    b.HasIndex("PrevHolderId")
                        .HasName("FK_TASK_A_LOG_PREV_HOLDER");

                    b.HasIndex("TameId")
                        .HasName("TASK_AUDIT_LOG_FK_TAME_ID");

                    b.HasIndex("TaskId")
                        .HasName("TASK_AUDIT_LOG_FK_TASK_ID");

                    b.HasIndex("UserId")
                        .HasName("TASK_AUDIT_LOG_FK_USER_ID");

                    b.ToTable("TASK_AUDIT_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Taskmessage", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("TameAckCode")
                        .HasColumnName("TAME_ACK_CODE")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<DateTime?>("TameAckDatetime")
                        .HasColumnName("TAME_ACK_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<long>("TameCreatedby")
                        .HasColumnName("TAME_CREATEDBY");

                    b.Property<DateTime>("TameCreatedon")
                        .HasColumnName("TAME_CREATEDON")
                        .HasColumnType("datetime");

                    b.Property<long?>("TameDirection")
                        .HasColumnName("TAME_DIRECTION");

                    b.Property<byte[]>("TameMessage")
                        .HasColumnName("TAME_MESSAGE")
                        .HasColumnType("image");

                    b.Property<string>("TameMessageId")
                        .HasColumnName("TAME_MESSAGE_ID")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TameMsgtype")
                        .HasColumnName("TAME_MSGTYPE")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TameSender")
                        .HasColumnName("TAME_SENDER")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TASKMESSAGE");

                    b.ToTable("TASKMESSAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TaskTemplates", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("TsktAdviseActivityBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_ADVISE_ACTIVITY_BY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TsktAdviseby")
                        .HasColumnName("TSKT_ADVISEBY");

                    b.Property<long?>("TsktBgcolor")
                        .HasColumnName("TSKT_BGCOLOR");

                    b.Property<long?>("TsktCaseId")
                        .HasColumnName("TSKT_CASE_ID");

                    b.Property<string>("TsktCode")
                        .IsRequired()
                        .HasColumnName("TSKT_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TsktDescription")
                        .HasColumnName("TSKT_DESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("TsktDonotopenwindow")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_DONOTOPENWINDOW")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TsktHolderGroup")
                        .HasColumnName("TSKT_HOLDER_GROUP");

                    b.Property<long?>("TsktHolderId")
                        .HasColumnName("TSKT_HOLDER_ID");

                    b.Property<short>("TsktInsertContextobject")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_INSERT_CONTEXTOBJECT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TsktInsertNotify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_INSERT_NOTIFY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TsktInsertPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_INSERT_PATIENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TsktInsertmode")
                        .HasColumnName("TSKT_INSERTMODE");

                    b.Property<string>("TsktMacro")
                        .HasColumnName("TSKT_MACRO")
                        .HasMaxLength(4096)
                        .IsUnicode(false);

                    b.Property<long?>("TsktOffset")
                        .HasColumnName("TSKT_OFFSET");

                    b.Property<long?>("TsktOffsetunit")
                        .HasColumnName("TSKT_OFFSETUNIT");

                    b.Property<long?>("TsktPriority")
                        .HasColumnName("TSKT_PRIORITY");

                    b.Property<long?>("TsktPrivacyId")
                        .HasColumnName("TSKT_PRIVACY_ID");

                    b.Property<long?>("TsktRoleId")
                        .HasColumnName("TSKT_ROLE_ID");

                    b.Property<short>("TsktSoundonsave")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_SOUNDONSAVE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TsktStatus")
                        .HasColumnName("TSKT_STATUS");

                    b.Property<string>("TsktSubject")
                        .HasColumnName("TSKT_SUBJECT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("TsktTaskComments")
                        .HasColumnName("TSKT_TASK_COMMENTS")
                        .HasColumnType("image");

                    b.Property<byte[]>("TsktTaskNote")
                        .HasColumnName("TSKT_TASK_NOTE")
                        .HasColumnType("image");

                    b.Property<long?>("TsktTextcolor")
                        .HasColumnName("TSKT_TEXTCOLOR");

                    b.Property<long?>("TsktTypeId")
                        .HasColumnName("TSKT_TYPE_ID");

                    b.Property<short>("TsktUseAvailableto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_USE_AVAILABLETO")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TsktUseBgcolor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_USE_BGCOLOR")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TsktUseInsertmode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_USE_INSERTMODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TsktUseTextcolor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSKT_USE_TEXTCOLOR")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TASK_TEMPLATES");

                    b.HasIndex("TsktCaseId")
                        .HasName("FK_TASK_TEMPLATE_CASE");

                    b.HasIndex("TsktHolderGroup")
                        .HasName("FK_TASK_TEMPLATE_HOLDERGROUP");

                    b.HasIndex("TsktHolderId")
                        .HasName("FK_TASK_TEMPLATE_HOLDER");

                    b.HasIndex("TsktPrivacyId")
                        .HasName("FK_TASK_TEMPLATE_PRIVACY");

                    b.HasIndex("TsktCode", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("TASK_TEMPLATES_I_TSKT_CODE");

                    b.ToTable("TASK_TEMPLATES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TechDictEntries", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("AbbrPlural1")
                        .HasColumnName("ABBR_PLURAL1")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("AbbrPlural2")
                        .HasColumnName("ABBR_PLURAL2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("AbbrSingle1")
                        .HasColumnName("ABBR_SINGLE1")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("AbbrSingle2")
                        .HasColumnName("ABBR_SINGLE2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("DictName")
                        .IsRequired()
                        .HasColumnName("DICT_NAME")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("OrderInDict")
                        .HasColumnName("ORDER_IN_DICT");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Plural1")
                        .HasColumnName("PLURAL1")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Plural2")
                        .HasColumnName("PLURAL2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Single1")
                        .HasColumnName("SINGLE1")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Single2")
                        .HasColumnName("SINGLE2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TECH_DICT_ENTRIES");

                    b.ToTable("TECH_DICT_ENTRIES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TeleplanFiles", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FileType")
                        .HasColumnName("FILE_TYPE");

                    b.Property<long>("ImportVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IMPORT_VERSION")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LastImportedDate")
                        .HasColumnName("LAST_IMPORTED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("RealImportedDate")
                        .HasColumnName("REAL_IMPORTED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TELEPLAN_FILES");

                    b.ToTable("TELEPLAN_FILES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TeleplanMessages", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<string>("DataCentre")
                        .HasColumnName("DATA_CENTRE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateModify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DATE_MODIFY")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("InvoicelineId")
                        .HasColumnName("INVOICELINE_ID");

                    b.Property<byte[]>("MesBody")
                        .HasColumnName("MES_BODY")
                        .HasColumnType("image");

                    b.Property<string>("MesType")
                        .IsRequired()
                        .HasColumnName("MES_TYPE")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<long>("MsgDirection")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MSG_DIRECTION")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ObjReference")
                        .HasColumnName("OBJ_REFERENCE");

                    b.Property<long?>("ParentMessage")
                        .HasColumnName("PARENT_MESSAGE");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PAYMENT_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("PaymentId")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<long?>("ProcessedType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROCESSED_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SeqNumber")
                        .HasColumnName("SEQ_NUMBER");

                    b.Property<decimal>("TmBilledAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TM_BILLED_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<short>("TmIsHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TM_IS_HOLD")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("TmPaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TM_PAID_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("TmPayeeNumber")
                        .HasColumnName("TM_PAYEE_NUMBER")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<long?>("WcbKind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WCB_KIND")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WcbNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WCB_NUMBER")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("WrongMsg")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WRONG_MSG")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("DateModify")
                        .HasName("I_TELEPLAN_MES_DATE_MODIFY");

                    b.HasIndex("InvoicelineId")
                        .HasName("FK_TELEPLAN_MESS_INVOICE_ID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TELEPLAN_MESSAGES");

                    b.HasIndex("ObjReference")
                        .HasName("FK_TELEPLAN_MESS_CLAIM_ID");

                    b.HasIndex("ParentMessage")
                        .HasName("FK_TELEPLAN_MESSAGES_PARENT");

                    b.HasIndex("PaymentDate")
                        .HasName("I_TELEPLAN_MES_PAYMENT_DATE");

                    b.HasIndex("PaymentId")
                        .HasName("FK_TELEPLAN_MESS_PAYMENT_ID");

                    b.HasIndex("ProcessedType")
                        .HasName("TELEPLAN_MESSAGES_I_PROCESSED_");

                    b.HasIndex("SeqNumber")
                        .HasName("I_TELEPLAN_MES_SEQ_NUMBER");

                    b.HasIndex("TmPayeeNumber")
                        .HasName("TM_I_TM_PAYEE_NUMBER");

                    b.ToTable("TELEPLAN_MESSAGES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TeleplanOidAllocator", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("AllocatedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOCATED_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("CommittedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COMMITTED_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TELEPLAN_OID_ALLOCA");

                    b.ToTable("TELEPLAN_OID_ALLOCATOR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TeleplanRegistration", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnName("ACTION_DATE")
                        .HasColumnType("datetime");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Direction")
                        .HasColumnName("DIRECTION");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EnrolmentMethod")
                        .HasColumnName("ENROLMENT_METHOD");

                    b.Property<long?>("IncomingMessage")
                        .HasColumnName("INCOMING_MESSAGE");

                    b.Property<long>("IncomingMessageType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INCOMING_MESSAGE_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Note")
                        .HasColumnName("NOTE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OutgoingMessage")
                        .HasColumnName("OUTGOING_MESSAGE");

                    b.Property<long>("OutgoingMessageType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OUTGOING_MESSAGE_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("OutomeReason")
                        .HasColumnName("OUTOME_REASON")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("OwnerReg")
                        .HasColumnName("OWNER_REG");

                    b.Property<long?>("ParentReg")
                        .HasColumnName("PARENT_REG");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PatientDob")
                        .HasColumnName("PATIENT_DOB")
                        .HasColumnType("datetime");

                    b.Property<long?>("PatientId")
                        .HasColumnName("PATIENT_ID");

                    b.Property<string>("PatientPhn")
                        .HasColumnName("PATIENT_PHN")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("PrevPatientStatus")
                        .HasColumnName("PREV_PATIENT_STATUS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("PrevProvider")
                        .HasColumnName("PREV_PROVIDER");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("PROVIDER_ID");

                    b.Property<long?>("Reason")
                        .HasColumnName("REASON");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnName("RECEIVED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("RecommendedFirstname")
                        .HasColumnName("RECOMMENDED_FIRSTNAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RecommendedPayeeCode")
                        .HasColumnName("RECOMMENDED_PAYEE_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("RecommendedProviderCode")
                        .HasColumnName("RECOMMENDED_PROVIDER_CODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("RecommendedSecondname")
                        .HasColumnName("RECOMMENDED_SECONDNAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RecommendedSexcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RECOMMENDED_SEXCODE")
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('U')");

                    b.Property<string>("RecommendedSurname")
                        .HasColumnName("RECOMMENDED_SURNAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RegLocation")
                        .HasColumnName("REG_LOCATION");

                    b.Property<long>("RegistrationAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REGISTRATION_ACTION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("RegistrationDecision")
                        .HasColumnName("REGISTRATION_DECISION");

                    b.HasKey("Oid");

                    b.HasIndex("IncomingMessage")
                        .HasName("FK_TEL_REG_MESSAGE_IN");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TELEPLAN_REGISTRATI");

                    b.HasIndex("OutgoingMessage")
                        .HasName("FK_TEL_REG_MESSAGE_OUT");

                    b.HasIndex("OwnerReg")
                        .HasName("FK_TELEPLAN_REG_OWNER");

                    b.HasIndex("ParentReg")
                        .HasName("FK_TELEPLAN_REG_PARENT");

                    b.HasIndex("PatientId")
                        .HasName("FK_TEL_REG_PATIENT");

                    b.HasIndex("PrevProvider")
                        .HasName("FK_TELEPLAN_REG_PREV_PPPU");

                    b.HasIndex("ProviderId")
                        .HasName("FK_TELEPLAN_REG_PROVIDER_ID");

                    b.HasIndex("RegLocation")
                        .HasName("TELEPLAN_REG_LOCATION_FK");

                    b.ToTable("TELEPLAN_REGISTRATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TermsetTranslation", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("SourceConcept")
                        .HasColumnName("SOURCE_CONCEPT");

                    b.Property<long>("TranslConcept")
                        .HasColumnName("TRANSL_CONCEPT");

                    b.Property<long>("UseCase")
                        .HasColumnName("USE_CASE");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TERMSET_TRANSLATION");

                    b.HasIndex("SourceConcept")
                        .HasName("FK_SOURCE_CONCEPT");

                    b.HasIndex("TranslConcept")
                        .HasName("FK_TRANSL_CONCEPT");

                    b.HasIndex("SourceConcept", "UseCase", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("IND_UNQ_SRCCONCEPT");

                    b.ToTable("TERMSET_TRANSLATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Test", b =>
                {
                    b.Property<long>("TestId")
                        .HasColumnName("TEST_ID");

                    b.Property<long?>("Cid")
                        .HasColumnName("CID");

                    b.Property<long?>("ConceptId")
                        .HasColumnName("CONCEPT_ID");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnName("DELETED_ON")
                        .HasColumnType("datetime");

                    b.Property<long?>("DepCid")
                        .HasColumnName("DEP_CID");

                    b.Property<long?>("DepOid")
                        .HasColumnName("DEP_OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FolderOid")
                        .HasColumnName("FOLDER_OID");

                    b.Property<byte[]>("InformationRtf")
                        .HasColumnName("INFORMATION_RTF")
                        .HasColumnType("image");

                    b.Property<byte[]>("InstructionsRtf")
                        .HasColumnName("INSTRUCTIONS_RTF")
                        .HasColumnType("image");

                    b.Property<short>("IsAppRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_APP_REQUIRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_AVAILABLE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("IsPreferred")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_PREFERRED")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("MacroOrder")
                        .HasColumnName("MACRO_ORDER")
                        .HasColumnType("image");

                    b.Property<byte[]>("MacroProcess")
                        .HasColumnName("MACRO_PROCESS")
                        .HasColumnType("image");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnName("ORDER_CODE")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("PatientPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PATIENT_PRICE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("TermId")
                        .HasColumnName("TERM_ID");

                    b.Property<long?>("TestCategory")
                        .HasColumnName("TEST_CATEGORY");

                    b.Property<string>("TestClinicaldetail")
                        .HasColumnName("TEST_CLINICALDETAIL")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("TestDescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEST_DESCRIPTION")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long?>("TestGroup")
                        .HasColumnName("TEST_GROUP");

                    b.Property<short>("TestIsgroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEST_ISGROUP")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TestOutputcode")
                        .HasColumnName("TEST_OUTPUTCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TestShortname")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEST_SHORTNAME")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TOTAL_PRICE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.HasKey("TestId");

                    b.HasIndex("ConceptId")
                        .HasName("TEST_FK_CONCEPT_ID");

                    b.HasIndex("DepOid")
                        .HasName("TEST_FK_DEP_OID");

                    b.HasIndex("FolderOid")
                        .HasName("TEST_FK_FOLDER_OID");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TEST");

                    b.HasIndex("TermId")
                        .HasName("TEST_FK_TERM_ID");

                    b.HasIndex("TestCategory")
                        .HasName("FK_TEST_CATEGORY");

                    b.HasIndex("TestGroup")
                        .HasName("FK_TEST_GROUP");

                    b.HasIndex("OrderCode", "DeletedOn", "PartitionId")
                        .IsUnique()
                        .HasName("I_TEST_ORDERCODE");

                    b.ToTable("TEST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TestCounter", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("TcntTestOid")
                        .HasColumnName("TCNT_TEST_OID");

                    b.Property<long>("TcntUseCount")
                        .HasColumnName("TCNT_USE_COUNT");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TEST_COUNTER");

                    b.HasIndex("TcntTestOid")
                        .HasName("FK_TEST_COUNTER_TCNT_TEST_OID");

                    b.HasIndex("TcntTestOid", "PartitionId")
                        .IsUnique()
                        .HasName("I_TCNT_TEST_PART");

                    b.ToTable("TEST_COUNTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TestGroup", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("SHORT_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TEST_GROUP");

                    b.ToTable("TEST_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TestGrpLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("ChildId")
                        .HasColumnName("CHILD_ID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("ParentId")
                        .HasColumnName("PARENT_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ChildId")
                        .HasName("TEST_GRP_LINK_FK_CH");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TEST_GRP_LINK");

                    b.HasIndex("ParentId")
                        .HasName("FK_TESTGRPLINK_GROUP");

                    b.ToTable("TEST_GRP_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Textitem", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("TxitAdded")
                        .HasColumnName("TXIT_ADDED")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TxitChanged")
                        .HasColumnName("TXIT_CHANGED")
                        .HasColumnType("datetime");

                    b.Property<string>("TxitText")
                        .HasColumnName("TXIT_TEXT")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long>("TxitType")
                        .HasColumnName("TXIT_TYPE");

                    b.Property<short>("TxitUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TXIT_USED")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TEXTITEM");

                    b.HasIndex("TxitType", "PartitionId")
                        .IsUnique()
                        .HasName("TEXTITEM_I_TYPE");

                    b.ToTable("TEXTITEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TextLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FinishPos")
                        .HasColumnName("FINISH_POS");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("Owner")
                        .HasColumnName("OWNER");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RefTo")
                        .HasColumnName("REF_TO");

                    b.Property<long?>("StartPos")
                        .HasColumnName("START_POS");

                    b.Property<long>("StoryType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STORY_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasMaxLength(4096)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TEXT_LINK");

                    b.HasIndex("Owner")
                        .HasName("TEXTLINK_OWNER_FK");

                    b.HasIndex("RefTo")
                        .HasName("TEXTLINK_REFTO_FK");

                    b.ToTable("TEXT_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Timesheet", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("TsEntered")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TS_ENTERED")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TsPeriod")
                        .HasColumnName("TS_PERIOD");

                    b.Property<long?>("TsPppu")
                        .HasColumnName("TS_PPPU");

                    b.Property<short>("TsProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TS_PROCESSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("TsProcessedDate")
                        .HasColumnName("TS_PROCESSED_DATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("TsProcessedPppu")
                        .HasColumnName("TS_PROCESSED_PPPU");

                    b.Property<short>("TsReady")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TS_READY")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TIMESHEET");

                    b.HasIndex("TsPeriod")
                        .HasName("TIMESHEET_FK_TS_PERIOD");

                    b.HasIndex("TsPppu")
                        .HasName("TIMESHEET_FK_PPPU");

                    b.HasIndex("TsProcessedPppu")
                        .HasName("TIMESHEET_PROCESSED_FK_PPPU");

                    b.ToTable("TIMESHEET");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TimesheetExpenses", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<decimal>("TseAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSE_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("TseAppointment")
                        .HasColumnName("TSE_APPOINTMENT");

                    b.Property<long?>("TseCategory")
                        .HasColumnName("TSE_CATEGORY");

                    b.Property<string>("TseComment")
                        .HasColumnName("TSE_COMMENT")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<short>("TseReceipt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSE_RECEIPT")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TIMESHEET_EXPENSES");

                    b.HasIndex("TseAppointment")
                        .HasName("TIMESHEET_EXPENSES_FK_APPOIN");

                    b.HasIndex("TseCategory")
                        .HasName("TIMESHEET_EXPENSES_FK_SHORTC");

                    b.ToTable("TIMESHEET_EXPENSES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TimesheetPeriod", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("TspDateFrom")
                        .HasColumnName("TSP_DATE_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TspDateTo")
                        .HasColumnName("TSP_DATE_TO")
                        .HasColumnType("datetime");

                    b.Property<short>("TspDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TSP_DELETED")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("TspNote")
                        .HasColumnName("TSP_NOTE")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TIMESHEET_PERIOD");

                    b.ToTable("TIMESHEET_PERIOD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Timezones", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("TzCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TZ_CODE")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<long>("TzDeletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TZ_DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("TzInfo")
                        .HasColumnName("TZ_INFO")
                        .HasColumnType("image");

                    b.Property<string>("TzName")
                        .HasColumnName("TZ_NAME")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TIMEZONES");

                    b.HasIndex("Oid", "TzDeletedid")
                        .IsUnique()
                        .HasName("UIND_TIMEZONES_DEL");

                    b.HasIndex("TzCode", "TzDeletedid", "PartitionId")
                        .IsUnique()
                        .HasName("TIMEZONES_CODE_DELID_PARID_I");

                    b.ToTable("TIMEZONES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Transactionaudit", b =>
                {
                    b.Property<long>("TradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRAD_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("BatchId")
                        .HasColumnName("BATCH_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuId")
                        .HasColumnName("PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("TradDatetime")
                        .HasColumnName("TRAD_DATETIME")
                        .HasColumnType("datetime");

                    b.Property<string>("TradReason")
                        .HasColumnName("TRAD_REASON")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<long>("TradType")
                        .HasColumnName("TRAD_TYPE");

                    b.Property<long?>("TrnsId")
                        .HasColumnName("TRNS_ID");

                    b.HasKey("TradId");

                    b.HasIndex("BatchId")
                        .HasName("TRAD_FK_BATCH");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TRANSACTIONAUDIT");

                    b.HasIndex("TrnsId")
                        .HasName("TRAD_FK_TRNS");

                    b.ToTable("TRANSACTIONAUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Transactiondetail", b =>
                {
                    b.Property<long>("TrnsId")
                        .HasColumnName("TRNS_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrapId")
                        .HasColumnName("PRAP_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SchdIdDescription")
                        .HasColumnName("SCHD_ID_DESCRIPTION");

                    b.Property<long?>("SchdIdDiscount")
                        .HasColumnName("SCHD_ID_DISCOUNT");

                    b.Property<long?>("SchdIdRate")
                        .HasColumnName("SCHD_ID_RATE");

                    b.Property<long?>("ShcdIdPlan")
                        .HasColumnName("SHCD_ID_PLAN");

                    b.Property<long?>("SrvcIdGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SRVC_ID_GROUP")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TrdtAnnotation")
                        .HasColumnName("TRDT_ANNOTATION")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("TrdtBpayReference")
                        .HasColumnName("TRDT_BPAY_REFERENCE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("TrdtCoinsurancepercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRDT_COINSURANCEPERCENTAGE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("TrdtDescription")
                        .HasColumnName("TRDT_DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("TrdtDescriptioncode")
                        .HasColumnName("TRDT_DESCRIPTIONCODE");

                    b.Property<string>("TrdtDisabilityText")
                        .HasColumnName("TRDT_DISABILITY_TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short>("TrdtIspassto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRDT_ISPASSTO")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("TrdtLinetype")
                        .HasColumnName("TRDT_LINETYPE");

                    b.Property<string>("TrdtMemberid")
                        .HasColumnName("TRDT_MEMBERID")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TrdtMessage")
                        .HasColumnName("TRDT_MESSAGE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("TrdtPaymentdetail1")
                        .HasColumnName("TRDT_PAYMENTDETAIL1")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("TrdtPaymentdetail2")
                        .HasColumnName("TRDT_PAYMENTDETAIL2")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("TrdtPaymentdetail3")
                        .HasColumnName("TRDT_PAYMENTDETAIL3")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long>("TrdtPaymentmethod")
                        .HasColumnName("TRDT_PAYMENTMETHOD");

                    b.Property<string>("TrdtUserreference")
                        .HasColumnName("TRDT_USERREFERENCE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.Property<long?>("TrdtVisit")
                        .HasColumnName("TRDT_VISIT");

                    b.HasKey("TrnsId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TRANSACTIONDETAIL");

                    b.HasIndex("PrapId")
                        .HasName("TRDT_FOREIGN_PRAP_ID");

                    b.HasIndex("TrdtDescriptioncode")
                        .HasName("TRDT_DESCCODE_FK_SHOTCODE");

                    b.HasIndex("TrnsId")
                        .IsUnique()
                        .HasName("TRDT_TRNS_ID");

                    b.ToTable("TRANSACTIONDETAIL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Transactionline", b =>
                {
                    b.Property<long>("TrlnId")
                        .HasColumnName("TRLN_ID");

                    b.Property<string>("BatchPos")
                        .HasColumnName("BATCH_POS")
                        .HasColumnType("char(4)");

                    b.Property<long?>("CntcId")
                        .HasColumnName("CNTC_ID");

                    b.Property<long?>("ContactOid")
                        .HasColumnName("CONTACT_OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FormId")
                        .HasColumnName("FORM_ID");

                    b.Property<decimal>("LineGstTaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LINE_GST_TAX_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("LinePstTaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LINE_PST_TAX_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("LineTaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LINE_TAX_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("LklsIdAgency")
                        .HasColumnName("LKLS_ID_AGENCY");

                    b.Property<long?>("LnOrder")
                        .HasColumnName("LN_ORDER");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("ParentLnId")
                        .HasColumnName("PARENT_LN_ID");

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PppuIdServiceprovider")
                        .HasColumnName("PPPU_ID_SERVICEPROVIDER");

                    b.Property<long?>("PppuIdValidatedby")
                        .HasColumnName("PPPU_ID_VALIDATEDBY");

                    b.Property<long?>("PrapId")
                        .HasColumnName("PRAP_ID");

                    b.Property<long?>("PtntIdService")
                        .HasColumnName("PTNT_ID_SERVICE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("RefType")
                        .HasColumnName("REF_TYPE");

                    b.Property<long?>("ShcdIdLedger")
                        .HasColumnName("SHCD_ID_LEDGER");

                    b.Property<long?>("SrvcId")
                        .HasColumnName("SRVC_ID");

                    b.Property<DateTime?>("TrlnAccessionDate")
                        .HasColumnName("TRLN_ACCESSION_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("TrlnAccntRefNum")
                        .HasColumnName("TRLN_ACCNT_REF_NUM")
                        .HasMaxLength(31)
                        .IsUnicode(false);

                    b.Property<string>("TrlnAgencycode")
                        .HasColumnName("TRLN_AGENCYCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal>("TrlnAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrlnAmountpaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_AMOUNTPAID")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("TrlnAttendance")
                        .HasColumnName("TRLN_ATTENDANCE");

                    b.Property<string>("TrlnBatch")
                        .HasColumnName("TRLN_BATCH")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<decimal>("TrlnBonusamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_BONUSAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TrlnBonuscode")
                        .HasColumnName("TRLN_BONUSCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TrlnBonusdescription")
                        .HasColumnName("TRLN_BONUSDESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("TrlnCalled")
                        .HasColumnName("TRLN_CALLED")
                        .HasColumnType("datetime");

                    b.Property<long?>("TrlnCaseId")
                        .HasColumnName("TRLN_CASE_ID");

                    b.Property<long?>("TrlnChargerate")
                        .HasColumnName("TRLN_CHARGERATE");

                    b.Property<DateTime?>("TrlnCollectionDate")
                        .HasColumnName("TRLN_COLLECTION_DATE")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TrlnCopayamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_COPAYAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrlnCopayamountpaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_COPAYAMOUNTPAID")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrlnCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_COST")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("TrlnDescription")
                        .HasColumnName("TRLN_DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long>("TrlnDiagnoses")
                        .HasColumnName("TRLN_DIAGNOSES");

                    b.Property<decimal>("TrlnDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_DISCOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrlnDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_DISTANCE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<short>("TrlnDontPrint")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_DONT_PRINT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TrlnDscdId1")
                        .HasColumnName("TRLN_DSCD_ID_1");

                    b.Property<long?>("TrlnDscdId2")
                        .HasColumnName("TRLN_DSCD_ID_2");

                    b.Property<long?>("TrlnDscdId3")
                        .HasColumnName("TRLN_DSCD_ID_3");

                    b.Property<long?>("TrlnFacility")
                        .HasColumnName("TRLN_FACILITY");

                    b.Property<decimal>("TrlnFpayeramount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_FPAYERAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrlnFpayeramountpaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_FPAYERAMOUNTPAID")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime?>("TrlnFromdate")
                        .HasColumnName("TRLN_FROMDATE")
                        .HasColumnType("datetime");

                    b.Property<long?>("TrlnGstTaxrate")
                        .HasColumnName("TRLN_GST_TAXRATE");

                    b.Property<long?>("TrlnIdDebitline")
                        .HasColumnName("TRLN_ID_DEBITLINE");

                    b.Property<long?>("TrlnIdService")
                        .HasColumnName("TRLN_ID_SERVICE");

                    b.Property<long?>("TrlnInpatientposid")
                        .HasColumnName("TRLN_INPATIENTPOSID");

                    b.Property<long?>("TrlnLocation")
                        .HasColumnName("TRLN_LOCATION");

                    b.Property<decimal>("TrlnMileagebonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_MILEAGEBONUS")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrlnMileagerate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_MILEAGERATE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("TrlnModifier")
                        .HasColumnName("TRLN_MODIFIER")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TrlnNote")
                        .HasColumnName("TRLN_NOTE")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<long?>("TrlnPatientgroup")
                        .HasColumnName("TRLN_PATIENTGROUP");

                    b.Property<long?>("TrlnPstTaxrate")
                        .HasColumnName("TRLN_PST_TAXRATE");

                    b.Property<decimal>("TrlnQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_QUANTITY")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime?>("TrlnReconciledDate")
                        .HasColumnName("TRLN_RECONCILED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("TrlnReference")
                        .HasColumnName("TRLN_REFERENCE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("TrlnReferral")
                        .HasColumnName("TRLN_REFERRAL");

                    b.Property<long?>("TrlnReflOverride")
                        .HasColumnName("TRLN_REFL_OVERRIDE");

                    b.Property<short>("TrlnRule3Exempt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_RULE3_EXEMPT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TrlnS4b3Exempt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_S4B3_EXEMPT")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("TrlnSchedulebonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_SCHEDULEBONUS")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("TrlnSchedulecode")
                        .HasColumnName("TRLN_SCHEDULECODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TrlnScpId")
                        .HasColumnName("TRLN_SCP_ID")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<long?>("TrlnServicepos")
                        .HasColumnName("TRLN_SERVICEPOS");

                    b.Property<long?>("TrlnSite")
                        .HasColumnName("TRLN_SITE");

                    b.Property<long?>("TrlnStatus")
                        .HasColumnName("TRLN_STATUS");

                    b.Property<long?>("TrlnStockLocationId")
                        .HasColumnName("TRLN_STOCK_LOCATION_ID");

                    b.Property<long?>("TrlnStockLotId")
                        .HasColumnName("TRLN_STOCK_LOT_ID");

                    b.Property<long?>("TrlnSubmissioncode")
                        .HasColumnName("TRLN_SUBMISSIONCODE");

                    b.Property<decimal>("TrlnSubsidyamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_SUBSIDYAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("TrlnTaxrate")
                        .HasColumnName("TRLN_TAXRATE");

                    b.Property<DateTime?>("TrlnTodate")
                        .HasColumnName("TRLN_TODATE")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TrlnTravelamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_TRAVELAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TrlnTravelcode")
                        .HasColumnName("TRLN_TRAVELCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TrlnTraveldescription")
                        .HasColumnName("TRLN_TRAVELDESCRIPTION")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("TrlnTreatmentLocation")
                        .HasColumnName("TRLN_TREATMENT_LOCATION");

                    b.Property<float>("TrlnUnitPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRLN_UNIT_PERCENT")
                        .HasDefaultValueSql("((100))");

                    b.Property<long>("TrnsId")
                        .HasColumnName("TRNS_ID");

                    b.Property<long?>("TrnsIdBulkinvoice")
                        .HasColumnName("TRNS_ID_BULKINVOICE");

                    b.Property<long?>("TrnsIdService")
                        .HasColumnName("TRNS_ID_SERVICE");

                    b.HasKey("TrlnId");

                    b.HasIndex("FormId")
                        .HasName("TRANSLINE_FK_FORM_ID");

                    b.HasIndex("LklsIdAgency")
                        .HasName("TRLN_FK_PATIENT_AGENCY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TRANSACTIONLINE");

                    b.HasIndex("ParentLnId")
                        .HasName("TRANSACTIONLN_FK_PARENT_LN_I");

                    b.HasIndex("PppuIdServiceprovider")
                        .HasName("CNTC_FOREIGN_SRVCPROVIDER");

                    b.HasIndex("PppuIdValidatedby")
                        .HasName("TRNSLN_FK_VALIDATEDBY");

                    b.HasIndex("PrapId")
                        .HasName("TRLN_FOREIGN_PRAP_ID");

                    b.HasIndex("ShcdIdLedger")
                        .HasName("CNTC_FOREIGN_LEDGER");

                    b.HasIndex("SrvcId")
                        .HasName("FK_TRLINE_SRVC_ID");

                    b.HasIndex("TrlnAttendance")
                        .HasName("TRANSACTIONLINE_FK_ATTENDANC");

                    b.HasIndex("TrlnCaseId")
                        .HasName("TRLN_FK_BCASE_CASE_ID");

                    b.HasIndex("TrlnChargerate")
                        .HasName("TRANSACTIONLINE_FK_CHARGERAT");

                    b.HasIndex("TrlnDscdId1")
                        .HasName("TRANSLINE_FK_DSCD_ID_1");

                    b.HasIndex("TrlnDscdId2")
                        .HasName("TRANSLINE_FK_DSCD_ID_2");

                    b.HasIndex("TrlnDscdId3")
                        .HasName("TRANSLINE_FK_DSCD_ID_3");

                    b.HasIndex("TrlnFacility")
                        .HasName("TRANSLINE_FACILITY_FK");

                    b.HasIndex("TrlnGstTaxrate")
                        .HasName("FK_TRLN_SHCD_GST_TAXRATE");

                    b.HasIndex("TrlnIdDebitline")
                        .HasName("TRLN_ID_DEBITLINE");

                    b.HasIndex("TrlnInpatientposid")
                        .HasName("TRANSLINE_FK_INPATIENTPOSID");

                    b.HasIndex("TrlnLocation")
                        .HasName("TRANSLINE_LOCATION_FK");

                    b.HasIndex("TrlnPstTaxrate")
                        .HasName("FK_TRLN_SHCD_PST_TAXRATE");

                    b.HasIndex("TrlnReferral")
                        .HasName("TRANSACTIONLINE_FK_REFERRAL");

                    b.HasIndex("TrlnServicepos")
                        .HasName("TRANSACTIONLINE_FK_SERVICEPO");

                    b.HasIndex("TrlnStockLocationId")
                        .HasName("FK_TRLN_STOCK_LOCATION_ID");

                    b.HasIndex("TrlnStockLotId")
                        .HasName("FK_TRLN_STOCK_LOT_ID");

                    b.HasIndex("TrlnSubmissioncode")
                        .HasName("TRANSLINE_SUBMISSIONCODE_FK");

                    b.HasIndex("TrlnTaxrate")
                        .HasName("TRANSACTIONLINE_FK_TAXRATE");

                    b.HasIndex("TrnsId")
                        .HasName("TRLN_TRNS_ID");

                    b.HasIndex("TrnsIdBulkinvoice")
                        .HasName("TRNSLN_FK_TRNS_ID_BULKINVC");

                    b.ToTable("TRANSACTIONLINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Transactionreference", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("TrrfNumber")
                        .HasColumnName("TRRF_NUMBER");

                    b.Property<long>("TrrfType")
                        .HasColumnName("TRRF_TYPE");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TRANSACTIONREFERENC");

                    b.HasIndex("TrrfType", "PartitionId")
                        .IsUnique()
                        .HasName("I_TRRF_TYPE_UN");

                    b.ToTable("TRANSACTIONREFERENCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Transactions", b =>
                {
                    b.Property<long>("TrnsId")
                        .HasColumnName("TRNS_ID");

                    b.Property<long?>("ArchId")
                        .HasColumnName("ARCH_ID");

                    b.Property<long?>("BatchId")
                        .HasColumnName("BATCH_ID");

                    b.Property<long?>("DepositId")
                        .HasColumnName("DEPOSIT_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("EobId")
                        .HasColumnName("EOB_ID");

                    b.Property<long>("FinRefNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FIN_REF_NUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FinRefType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FIN_REF_TYPE")
                        .HasColumnType("char(2)")
                        .HasDefaultValueSql("('')");

                    b.Property<short>("FromEob")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FROM_EOB")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("InvoiceValidatedBy")
                        .HasColumnName("INVOICE_VALIDATED_BY");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuIdIncome")
                        .HasColumnName("PPPU_ID_INCOME");

                    b.Property<long?>("PppuIdPaymentpos")
                        .HasColumnName("PPPU_ID_PAYMENTPOS");

                    b.Property<long?>("PppuIdPaymentprovider")
                        .HasColumnName("PPPU_ID_PAYMENTPROVIDER");

                    b.Property<long>("PppuIdPos")
                        .HasColumnName("PPPU_ID_POS");

                    b.Property<long?>("PppuIdService")
                        .HasColumnName("PPPU_ID_SERVICE");

                    b.Property<long?>("PrapId")
                        .HasColumnName("PRAP_ID");

                    b.Property<long>("PtntIdGuarantor")
                        .HasColumnName("PTNT_ID_GUARANTOR");

                    b.Property<long?>("PtntIdInsurer")
                        .HasColumnName("PTNT_ID_INSURER");

                    b.Property<long?>("PtntIdService")
                        .HasColumnName("PTNT_ID_SERVICE");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("SchdIdDiscount")
                        .HasColumnName("SCHD_ID_DISCOUNT");

                    b.Property<long?>("SchdIdRate")
                        .HasColumnName("SCHD_ID_RATE");

                    b.Property<long?>("ShcdIdPlan")
                        .HasColumnName("SHCD_ID_PLAN");

                    b.Property<string>("TrnsAgencycode")
                        .HasColumnName("TRNS_AGENCYCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal>("TrnsAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_AMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrnsAmountreconciled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_AMOUNTRECONCILED")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("TrnsAnnotation")
                        .HasColumnName("TRNS_ANNOTATION")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long?>("TrnsAttendance")
                        .HasColumnName("TRNS_ATTENDANCE");

                    b.Property<long?>("TrnsAutocreated")
                        .HasColumnName("TRNS_AUTOCREATED");

                    b.Property<string>("TrnsBpayReference")
                        .HasColumnName("TRNS_BPAY_REFERENCE")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("TrnsCaseId")
                        .HasColumnName("TRNS_CASE_ID");

                    b.Property<decimal>("TrnsCoinsurancepercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_COINSURANCEPERCENTAGE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrnsCopayamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_COPAYAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrnsCopayamountreconciled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_COPAYAMOUNTRECONCILED")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("TrnsCoverid")
                        .HasColumnName("TRNS_COVERID");

                    b.Property<DateTime?>("TrnsCreated")
                        .HasColumnName("TRNS_CREATED")
                        .HasColumnType("datetime");

                    b.Property<string>("TrnsDataCentre")
                        .HasColumnName("TRNS_DATA_CENTRE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime>("TrnsDate")
                        .HasColumnName("TRNS_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("TrnsDescription")
                        .HasColumnName("TRNS_DESCRIPTION")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("TrnsDescriptioncode")
                        .HasColumnName("TRNS_DESCRIPTIONCODE");

                    b.Property<string>("TrnsDisabilityText")
                        .HasColumnName("TRNS_DISABILITY_TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short>("TrnsEmergencyreferral")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_EMERGENCYREFERRAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("TrnsEpayfee")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_EPAYFEE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrnsEpayfeeRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_EPAYFEE_RATE")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("TrnsEpayfeeRefnum")
                        .HasColumnName("TRNS_EPAYFEE_REFNUM")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("TrnsFpayer")
                        .HasColumnName("TRNS_FPAYER");

                    b.Property<decimal>("TrnsFpayeramount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_FPAYERAMOUNT")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<decimal>("TrnsFpayeramountreconciled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_FPAYERAMOUNTRECONCILED")
                        .HasColumnType("currency")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("TrnsIdAnnulled")
                        .HasColumnName("TRNS_ID_ANNULLED");

                    b.Property<long?>("TrnsIdGroup")
                        .HasColumnName("TRNS_ID_GROUP");

                    b.Property<short>("TrnsIsadmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_ISADMIN")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TrnsIsannulled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_ISANNULLED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TrnsIspassto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_ISPASSTO")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TrnsIsreversed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_ISREVERSED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TrnsIsunmatched")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_ISUNMATCHED")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("TrnsLostreferral")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_LOSTREFERRAL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("TrnsMedicareType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_MEDICARE_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TrnsMemberid")
                        .HasColumnName("TRNS_MEMBERID")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TrnsMessage")
                        .HasColumnName("TRNS_MESSAGE")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<long?>("TrnsPayer")
                        .HasColumnName("TRNS_PAYER");

                    b.Property<long?>("TrnsPayerplan")
                        .HasColumnName("TRNS_PAYERPLAN");

                    b.Property<long?>("TrnsPayerplanrate")
                        .HasColumnName("TRNS_PAYERPLANRATE");

                    b.Property<string>("TrnsPaymentdetail1")
                        .HasColumnName("TRNS_PAYMENTDETAIL1")
                        .HasMaxLength(127)
                        .IsUnicode(false);

                    b.Property<string>("TrnsPaymentdetail2")
                        .HasColumnName("TRNS_PAYMENTDETAIL2")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("TrnsPaymentdetail3")
                        .HasColumnName("TRNS_PAYMENTDETAIL3")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<long>("TrnsPaymentmethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_PAYMENTMETHOD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TrnsQuoteId")
                        .HasColumnName("TRNS_QUOTE_ID");

                    b.Property<DateTime?>("TrnsReconciledDate")
                        .HasColumnName("TRNS_RECONCILED_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("TrnsReference")
                        .HasColumnName("TRNS_REFERENCE")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<long?>("TrnsReferral")
                        .HasColumnName("TRNS_REFERRAL");

                    b.Property<short>("TrnsRequiresvalidation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_REQUIRESVALIDATION")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("TrnsSecondpayer")
                        .HasColumnName("TRNS_SECONDPAYER");

                    b.Property<long?>("TrnsSeqNumber")
                        .HasColumnName("TRNS_SEQ_NUMBER");

                    b.Property<double?>("TrnsSplitprecent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_SPLITPRECENT")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<long?>("TrnsSplitprov")
                        .HasColumnName("TRNS_SPLITPROV");

                    b.Property<long?>("TrnsState")
                        .HasColumnName("TRNS_STATE");

                    b.Property<long?>("TrnsSubmissionId")
                        .HasColumnName("TRNS_SUBMISSION_ID");

                    b.Property<long?>("TrnsTemplateQuoteId")
                        .HasColumnName("TRNS_TEMPLATE_QUOTE_ID");

                    b.Property<long>("TrnsTemplateQuoteType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRNS_TEMPLATE_QUOTE_TYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("TrnsType")
                        .HasColumnName("TRNS_TYPE");

                    b.Property<string>("TrnsUserReference")
                        .HasColumnName("TRNS_USER_REFERENCE")
                        .HasMaxLength(21)
                        .IsUnicode(false);

                    b.HasKey("TrnsId");

                    b.HasIndex("BatchId")
                        .HasName("TRANSACTIONS_FK_BATCH_ID");

                    b.HasIndex("DepositId")
                        .HasName("TRANSACTIONS_FK_DEPOSIT_ID");

                    b.HasIndex("EobId")
                        .HasName("TRANSACTIONS_FK_EOB_ID");

                    b.HasIndex("InvoiceValidatedBy")
                        .HasName("FK_INVOICE_VALIDATED_BY");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TRANSACTIONS");

                    b.HasIndex("PppuIdIncome")
                        .HasName("PPPU_ID_INCOME");

                    b.HasIndex("PppuIdPaymentpos")
                        .HasName("TRNS_FK_PPPU_ID_PAYMENTPOS");

                    b.HasIndex("PppuIdPaymentprovider")
                        .HasName("TRNS_FK_PPPU_ID_PAYMNTPROV");

                    b.HasIndex("PppuIdPos")
                        .HasName("INDEX_PPPUIDPOS");

                    b.HasIndex("PppuIdService")
                        .HasName("TRNS_FK_PPPU_ID_SERVICE");

                    b.HasIndex("PrapId")
                        .HasName("FK_TRANS_PRAP_ID");

                    b.HasIndex("PtntIdGuarantor")
                        .HasName("FK_TRANSACTIONS_GUARANTOR");

                    b.HasIndex("PtntIdInsurer")
                        .HasName("TRNS_FOREIGN_INSURER");

                    b.HasIndex("PtntIdService")
                        .HasName("FK_TRANSACTIONS_PTNT_SERVICE");

                    b.HasIndex("SchdIdDiscount")
                        .HasName("FK_TRANS_DISCOUNT");

                    b.HasIndex("SchdIdRate")
                        .HasName("FK_TRANS_RATE");

                    b.HasIndex("ShcdIdPlan")
                        .HasName("FK_TRANS_PLAN");

                    b.HasIndex("TrnsAttendance")
                        .HasName("TRANSACTIONS_FK_ATTENDANCE");

                    b.HasIndex("TrnsAutocreated")
                        .HasName("FK_TRNS_AUTOCREATED");

                    b.HasIndex("TrnsCaseId")
                        .HasName("TRANS_FK_BCASE_CASE_ID");

                    b.HasIndex("TrnsCoverid")
                        .HasName("FK_TRANSCOVER");

                    b.HasIndex("TrnsDate")
                        .HasName("TRNS_DATE");

                    b.HasIndex("TrnsDescriptioncode")
                        .HasName("FK_TRANS_DESCRIPTIONCODE");

                    b.HasIndex("TrnsFpayer")
                        .HasName("FK_TRANS_PATIENT_FPAYER");

                    b.HasIndex("TrnsIdGroup")
                        .HasName("TRNS_GROUP");

                    b.HasIndex("TrnsPayerplanrate")
                        .HasName("TRANSACTIONS_FK_PAYERPLANRAT");

                    b.HasIndex("TrnsQuoteId")
                        .HasName("TRNS_FK_TRNS_QUOTE_ID");

                    b.HasIndex("TrnsReconciledDate")
                        .HasName("TRNS_I_RECONCILED_DATE");

                    b.HasIndex("TrnsReference")
                        .HasName("I_TRNS_REFERENCE");

                    b.HasIndex("TrnsReferral")
                        .HasName("TRANSACTIONS_FK_REFERRAL");

                    b.HasIndex("TrnsRequiresvalidation")
                        .HasName("INDEX_REQUIRESVALIDATION");

                    b.HasIndex("TrnsSecondpayer")
                        .HasName("TRNS_SECONDPAYER_FK");

                    b.HasIndex("TrnsSeqNumber")
                        .HasName("I_TRNS_SEQ_NUMBER");

                    b.HasIndex("TrnsSplitprov")
                        .HasName("FC_SPLITPROVIDER");

                    b.HasIndex("TrnsSubmissionId")
                        .HasName("TRNS_FK_TRNS_SUBMISSION_ID");

                    b.HasIndex("TrnsTemplateQuoteId")
                        .HasName("FK_TRNS_TEMPLATE_QUOTE_ID");

                    b.HasIndex("FinRefType", "FinRefNum")
                        .HasName("TRANS_REF_TYPE_NUM");

                    b.HasIndex("TrnsType", "TrnsIsreversed", "TrnsEpayfeeRefnum")
                        .HasName("I_TRNS_EPAYFEE_REFNUM");

                    b.HasIndex("TrnsType", "TrnsIsreversed", "PppuIdIncome", "PtntIdGuarantor", "InvoiceValidatedBy")
                        .HasName("TRANSACTIONS_IDX_001");

                    b.ToTable("TRANSACTIONS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TransdataDetails", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("ExternalEntityId")
                        .HasColumnName("EXTERNAL_ENTITY_ID");

                    b.Property<long?>("Folder")
                        .HasColumnName("FOLDER");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnName("SOURCE_ID")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<long?>("SrcProviderid")
                        .HasColumnName("SRC_PROVIDERID");

                    b.HasKey("Oid");

                    b.HasIndex("ExternalEntityId")
                        .HasName("FK_TDD_EXTERNAL_ENTITY_ID");

                    b.HasIndex("Folder")
                        .HasName("TRANSDATA_DET_FK_FOLDER");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TRANSDATA_DETAILS");

                    b.HasIndex("Oid")
                        .IsUnique()
                        .HasName("TRANSDATA_DETAILS_FK_OID");

                    b.HasIndex("SrcProviderid")
                        .HasName("FK_PPPU_TDD_SRC_PROVIDERID");

                    b.HasIndex("SourceId", "PartitionId")
                        .IsUnique()
                        .HasName("UI_TDDETAILS_SOURCE_ID");

                    b.ToTable("TRANSDATA_DETAILS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TravelCountry", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("TrcnCountryId")
                        .HasColumnName("TRCN_COUNTRY_ID");

                    b.Property<byte[]>("TrcnDescription")
                        .IsRequired()
                        .HasColumnName("TRCN_DESCRIPTION")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TRAVEL_COUNTRY");

                    b.HasIndex("TrcnCountryId", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("TRCN_U_COUNTRY_ID_DELETEDID");

                    b.ToTable("TRAVEL_COUNTRY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TravelDisease", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("TrdsDescription")
                        .HasColumnName("TRDS_DESCRIPTION")
                        .HasColumnType("image");

                    b.Property<long>("TrdsDisease")
                        .HasColumnName("TRDS_DISEASE");

                    b.Property<byte[]>("TrdsTreatment")
                        .HasColumnName("TRDS_TREATMENT")
                        .HasColumnType("image");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TRAVEL_DISEASE");

                    b.HasIndex("TrdsDisease")
                        .HasName("TRDS_DISEASE_CONCEPT_FK");

                    b.HasIndex("TrdsDisease", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("TRDS_U_DISEASE_DELETEDID");

                    b.ToTable("TRAVEL_DISEASE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TravelRisk", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Deletedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELETEDID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("TrskCountryId")
                        .HasColumnName("TRSK_COUNTRY_ID");

                    b.Property<byte[]>("TrskDescription")
                        .HasColumnName("TRSK_DESCRIPTION")
                        .HasColumnType("image");

                    b.Property<long>("TrskDisease")
                        .HasColumnName("TRSK_DISEASE");

                    b.Property<string>("TrskDuration")
                        .IsRequired()
                        .HasColumnName("TRSK_DURATION")
                        .HasColumnType("char(1)");

                    b.Property<string>("TrskRecommendation")
                        .IsRequired()
                        .HasColumnName("TRSK_RECOMMENDATION")
                        .HasColumnType("char(1)");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_TRAVEL_RISK");

                    b.HasIndex("TrskDisease")
                        .HasName("TRSK_DISEASE_CONCEPT_FK");

                    b.HasIndex("TrskCountryId", "TrskDisease", "TrskDuration", "Deletedid", "PartitionId")
                        .IsUnique()
                        .HasName("TRSK_U_CDD_DELETEDID");

                    b.ToTable("TRAVEL_RISK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.UserNotifications", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("UnActivateAt")
                        .HasColumnName("UN_ACTIVATE_AT")
                        .HasColumnType("datetime");

                    b.Property<long>("UnType")
                        .HasColumnName("UN_TYPE");

                    b.Property<long>("UnUserId")
                        .HasColumnName("UN_USER_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_USER_NOTIFICATIONS");

                    b.HasIndex("UnUserId")
                        .HasName("USER_NOTIFICATIONS_FK_PPPU");

                    b.ToTable("USER_NOTIFICATIONS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.UserRoleLink", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<long>("Cid")
                        .HasColumnName("CID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("RoleOid")
                        .HasColumnName("ROLE_OID");

                    b.Property<long>("UrlOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("URL_ORDER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("UserId")
                        .HasColumnName("USER_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_USER_ROLE_LINK");

                    b.HasIndex("RoleOid")
                        .HasName("USER_ROLE_LINK_FK_ROLE_OID");

                    b.HasIndex("UserId")
                        .HasName("USER_ROLE_FK_USER_ID");

                    b.HasIndex("UserId", "RoleOid")
                        .IsUnique()
                        .HasName("URL_UI_USER_ROLE");

                    b.ToTable("USER_ROLE_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.UserSecurityLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("UslCategoryid")
                        .HasColumnName("USL_CATEGORYID");

                    b.Property<long?>("UslChangedUser")
                        .HasColumnName("USL_CHANGED_USER");

                    b.Property<string>("UslComputername")
                        .HasColumnName("USL_COMPUTERNAME")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<DateTime>("UslCreated")
                        .HasColumnName("USL_CREATED")
                        .HasColumnType("datetime");

                    b.Property<string>("UslDetails")
                        .HasColumnName("USL_DETAILS")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<byte[]>("UslDetailsExt")
                        .HasColumnName("USL_DETAILS_EXT")
                        .HasColumnType("image");

                    b.Property<long>("UslEntryid")
                        .HasColumnName("USL_ENTRYID");

                    b.Property<string>("UslIp")
                        .HasColumnName("USL_IP")
                        .HasMaxLength(252)
                        .IsUnicode(false);

                    b.Property<long?>("UslPatientid")
                        .HasColumnName("USL_PATIENTID");

                    b.Property<long>("UslUserid")
                        .HasColumnName("USL_USERID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_USER_SECURITY_LOG");

                    b.HasIndex("UslCategoryid")
                        .HasName("USL_CATEGORYID_FK");

                    b.HasIndex("UslChangedUser")
                        .HasName("FK_USL_CHANGED_USER_CH_USER");

                    b.HasIndex("UslEntryid")
                        .HasName("USL_ENTRYID_FK");

                    b.HasIndex("UslPatientid")
                        .HasName("USL_PATIENTID_FK");

                    b.HasIndex("UslUserid")
                        .HasName("USL_USERID_FK");

                    b.ToTable("USER_SECURITY_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Version", b =>
                {
                    b.Property<long>("VrsnVersion")
                        .HasColumnName("VRSN_VERSION");

                    b.Property<DateTime>("VrsnUpdatedon")
                        .HasColumnName("VRSN_UPDATEDON")
                        .HasColumnType("datetime");

                    b.HasKey("VrsnVersion");

                    b.ToTable("VERSION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.VersionMiniDb", b =>
                {
                    b.Property<long>("MinVersion")
                        .HasColumnName("MIN_VERSION");

                    b.Property<DateTime>("MinUpdatedon")
                        .HasColumnName("MIN_UPDATEDON")
                        .HasColumnType("datetime");

                    b.HasKey("MinVersion");

                    b.ToTable("VERSION_MINI_DB");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ViewAudit", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("VaudEntryTime")
                        .HasColumnName("VAUD_ENTRY_TIME")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VaudExitTime")
                        .HasColumnName("VAUD_EXIT_TIME")
                        .HasColumnType("datetime");

                    b.Property<string>("VaudFilterName")
                        .HasColumnName("VAUD_FILTER_NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("VaudKind")
                        .HasColumnName("VAUD_KIND");

                    b.Property<long?>("VaudObjectCid")
                        .HasColumnName("VAUD_OBJECT_CID");

                    b.Property<long?>("VaudObjectOid")
                        .HasColumnName("VAUD_OBJECT_OID");

                    b.Property<long?>("VaudParent")
                        .HasColumnName("VAUD_PARENT");

                    b.Property<long>("VaudRootParentCid")
                        .HasColumnName("VAUD_ROOT_PARENT_CID");

                    b.Property<long>("VaudRootParentOid")
                        .HasColumnName("VAUD_ROOT_PARENT_OID");

                    b.Property<long?>("VaudViewIndex")
                        .HasColumnName("VAUD_VIEW_INDEX");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_VIEW_AUDIT");

                    b.HasIndex("VaudParent")
                        .HasName("FK_VIEW_AUDIT_PARENT");

                    b.ToTable("VIEW_AUDIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.WebServiceInterface", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Itidata")
                        .HasColumnName("ITIDATA")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_WEB_SERVICE_INTERFA");

                    b.HasIndex("Code", "PartitionId")
                        .IsUnique()
                        .HasName("WEB_SERVICE_INTF_CODE");

                    b.ToTable("WEB_SERVICE_INTERFACE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.WebServiceSupport", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<short>("AllowBypassSecurity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ALLOW_BYPASS_SECURITY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("AutoStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUTO_START")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Configuration")
                        .HasColumnName("CONFIGURATION")
                        .HasColumnType("image");

                    b.Property<string>("DependsOnProjects")
                        .HasColumnName("DEPENDS_ON_PROJECTS")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("LocalOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOCAL_ONLY")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("MethodHandlers")
                        .HasColumnName("METHOD_HANDLERS")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Port")
                        .HasColumnName("PORT");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("UseSsl")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_SSL")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WsiId")
                        .HasColumnName("WSI_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_WEB_SERVICE_SUPPORT");

                    b.HasIndex("WsiId")
                        .HasName("FK_WEBSERVSUPP_WEBSERVINTF");

                    b.ToTable("WEB_SERVICE_SUPPORT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Whiteboard", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("WhbiAcuity")
                        .HasColumnName("WHBI_ACUITY");

                    b.Property<DateTime?>("WhbiAddeddt")
                        .HasColumnName("WHBI_ADDEDDT")
                        .HasColumnType("datetime");

                    b.Property<long>("WhbiBoardtype")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WHBI_BOARDTYPE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WhbiCaseid")
                        .HasColumnName("WHBI_CASEID");

                    b.Property<DateTime?>("WhbiCreateddatetime")
                        .HasColumnName("WHBI_CREATEDDATETIME")
                        .HasColumnType("datetime");

                    b.Property<long?>("WhbiCreatedpppuid")
                        .HasColumnName("WHBI_CREATEDPPPUID");

                    b.Property<long?>("WhbiFrompppugroupid")
                        .HasColumnName("WHBI_FROMPPPUGROUPID");

                    b.Property<long?>("WhbiFrompppuid")
                        .HasColumnName("WHBI_FROMPPPUID");

                    b.Property<long?>("WhbiFromproviderid")
                        .HasColumnName("WHBI_FROMPROVIDERID");

                    b.Property<string>("WhbiInstruction")
                        .HasColumnName("WHBI_INSTRUCTION")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("WhbiModifieddt")
                        .HasColumnName("WHBI_MODIFIEDDT")
                        .HasColumnType("datetime");

                    b.Property<long?>("WhbiModifiedpppuid")
                        .HasColumnName("WHBI_MODIFIEDPPPUID");

                    b.Property<long?>("WhbiPatientid")
                        .HasColumnName("WHBI_PATIENTID");

                    b.Property<long?>("WhbiPrivacyid")
                        .HasColumnName("WHBI_PRIVACYID");

                    b.Property<long?>("WhbiReason")
                        .HasColumnName("WHBI_REASON");

                    b.Property<DateTime?>("WhbiRemoveddt")
                        .HasColumnName("WHBI_REMOVEDDT")
                        .HasColumnType("datetime");

                    b.Property<long?>("WhbiTopppugroupid")
                        .HasColumnName("WHBI_TOPPPUGROUPID");

                    b.Property<long?>("WhbiTopppuid")
                        .HasColumnName("WHBI_TOPPPUID");

                    b.Property<long?>("WhbiToproviderid")
                        .HasColumnName("WHBI_TOPROVIDERID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_WHITEBOARD");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("WHITEBOARD_FK_PPPU");

                    b.HasIndex("WhbiAcuity")
                        .HasName("FK_WHBI_ACUITY");

                    b.HasIndex("WhbiCaseid")
                        .HasName("FK_WHBI_CASEID");

                    b.HasIndex("WhbiCreatedpppuid")
                        .HasName("FK_WHBI_CREATEDPPPUID");

                    b.HasIndex("WhbiFrompppugroupid")
                        .HasName("FK_WHBI_FROMPPPUGROUPID");

                    b.HasIndex("WhbiFrompppuid")
                        .HasName("FK_WHBI_FROMPPPUID");

                    b.HasIndex("WhbiFromproviderid")
                        .HasName("FK_WHBI_FROMPROVIDERID");

                    b.HasIndex("WhbiModifiedpppuid")
                        .HasName("FK_WHBI_MODIFIEDPPPUID");

                    b.HasIndex("WhbiPatientid")
                        .HasName("FK_WHBI_PATIENTID");

                    b.HasIndex("WhbiPrivacyid")
                        .HasName("FK_WHBI_PRIVACYID");

                    b.HasIndex("WhbiReason")
                        .HasName("FK_WHBI_REASON");

                    b.HasIndex("WhbiTopppugroupid")
                        .HasName("FK_WHBI_TOPPPUGROUPID");

                    b.HasIndex("WhbiTopppuid")
                        .HasName("FK_WHBI_TOPPPUID");

                    b.HasIndex("WhbiToproviderid")
                        .HasName("FK_WHBI_TOPROVIDERID");

                    b.ToTable("WHITEBOARD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.WhiteboardAuditLog", b =>
                {
                    b.Property<long>("Oid")
                        .HasColumnName("OID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("PrivacyOrg")
                        .HasColumnName("PRIVACY_ORG");

                    b.Property<long?>("PrivacyPppuId")
                        .HasColumnName("PRIVACY_PPPU_ID");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long?>("WbalAcuity")
                        .HasColumnName("WBAL_ACUITY");

                    b.Property<long?>("WbalBoardtype")
                        .HasColumnName("WBAL_BOARDTYPE");

                    b.Property<DateTime?>("WbalChangeTime")
                        .HasColumnName("WBAL_CHANGE_TIME")
                        .HasColumnType("datetime");

                    b.Property<long>("WbalChangeType")
                        .HasColumnName("WBAL_CHANGE_TYPE");

                    b.Property<long>("WbalChangedBy")
                        .HasColumnName("WBAL_CHANGED_BY");

                    b.Property<long?>("WbalPrivacyid")
                        .HasColumnName("WBAL_PRIVACYID");

                    b.Property<byte[]>("WbalProps")
                        .HasColumnName("WBAL_PROPS")
                        .HasColumnType("image");

                    b.Property<long?>("WbalReason")
                        .HasColumnName("WBAL_REASON");

                    b.Property<long>("WbalWhiteboardId")
                        .HasColumnName("WBAL_WHITEBOARD_ID");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_WHITEBOARD_AUDIT_LO");

                    b.HasIndex("PrivacyPppuId")
                        .HasName("FK_WBAL_PRIVACY_PPPU");

                    b.HasIndex("WbalAcuity")
                        .HasName("FK_WBAL_ACUITY");

                    b.HasIndex("WbalChangedBy")
                        .HasName("FK_CHANGED_BY");

                    b.HasIndex("WbalPrivacyid")
                        .HasName("FK_WBAL_PRIVACYID");

                    b.HasIndex("WbalReason")
                        .HasName("FK_WBAL_REASON");

                    b.HasIndex("WbalWhiteboardId")
                        .HasName("FK_WHITEBOARD_ID");

                    b.ToTable("WHITEBOARD_AUDIT_LOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Workstation", b =>
                {
                    b.Property<long>("WrksId")
                        .HasColumnName("WRKS_ID");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("PppuIdPos")
                        .HasColumnName("PPPU_ID_POS");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("WrksIpaddress")
                        .HasColumnName("WRKS_IPADDRESS")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("WrksName")
                        .IsRequired()
                        .HasColumnName("WRKS_NAME")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("WrksId");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_WORKSTATION");

                    b.HasIndex("PppuIdPos")
                        .HasName("WRKS_PPPU_FOREIGN");

                    b.HasIndex("WrksName", "PartitionId")
                        .IsUnique()
                        .HasName("WRKS_NAME");

                    b.ToTable("WORKSTATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Workstationprintfont", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("WrksId")
                        .HasColumnName("WRKS_ID");

                    b.Property<string>("WspfAlternname")
                        .HasColumnName("WSPF_ALTERNNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("WspfAlternsize")
                        .HasColumnName("WSPF_ALTERNSIZE");

                    b.Property<string>("WspfPreferedname")
                        .HasColumnName("WSPF_PREFEREDNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("WspfPreferedsize")
                        .HasColumnName("WSPF_PREFEREDSIZE");

                    b.Property<long>("WspfUsedas")
                        .HasColumnName("WSPF_USEDAS");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_WORKSTATIONPRINTFON");

                    b.HasIndex("WrksId")
                        .HasName("WORKSTATIONPRINTFONT_FK_WORK");

                    b.HasIndex("WrksId", "WspfUsedas")
                        .IsUnique()
                        .HasName("WORKSTPRINTFONT_I_WORK_USE");

                    b.ToTable("WORKSTATIONPRINTFONT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Workstationprintreport1", b =>
                {
                    b.Property<long>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DtModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_MODIFIED")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObjGuid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_GUID")
                        .HasDefaultValueSql("('*')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARTITION_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RefId")
                        .HasColumnName("REF_ID")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("RefSys")
                        .HasColumnName("REF_SYS")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<long>("WrksId")
                        .HasColumnName("WRKS_ID");

                    b.Property<long?>("WsprMarginbottom")
                        .HasColumnName("WSPR_MARGINBOTTOM");

                    b.Property<long?>("WsprMarginleft")
                        .HasColumnName("WSPR_MARGINLEFT");

                    b.Property<long?>("WsprMarginright")
                        .HasColumnName("WSPR_MARGINRIGHT");

                    b.Property<long?>("WsprMargintop")
                        .HasColumnName("WSPR_MARGINTOP");

                    b.Property<long>("WsprPaperformat")
                        .HasColumnName("WSPR_PAPERFORMAT");

                    b.Property<long>("WsprPaperorient")
                        .HasColumnName("WSPR_PAPERORIENT");

                    b.Property<long>("WsprPapersource")
                        .HasColumnName("WSPR_PAPERSOURCE");

                    b.Property<short>("WsprPrintPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINT_PATIENT")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("WsprPrintPatientNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINT_PATIENT_NUM")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("WsprPrintdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINTDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WsprPrintdateJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINTDATE_JUSTIFY")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("WsprPrintedtext")
                        .HasColumnName("WSPR_PRINTEDTEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("WsprPrintername")
                        .HasColumnName("WSPR_PRINTERNAME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("WsprPrintfooter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINTFOOTER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WsprPrintpatientJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINTPATIENT_JUSTIFY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WsprPrintpatientNumJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINTPATIENT_NUM_JUSTIFY")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("WsprPrinttext")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINTTEXT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WsprPrinttextJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINTTEXT_JUSTIFY")
                        .HasDefaultValueSql("((2))");

                    b.Property<short>("WsprPrintuser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINTUSER")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("WsprPrintuserJustify")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_PRINTUSER_JUSTIFY")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("WsprReportid")
                        .HasColumnName("WSPR_REPORTID");

                    b.Property<short>("WsprScaletofitpage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_SCALETOFITPAGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("WsprUsemargins")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WSPR_USEMARGINS")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Oid");

                    b.HasIndex("ObjGuid")
                        .HasName("OBJ_GUID_I_WORKSTATIONPRINTREP");

                    b.HasIndex("WrksId")
                        .HasName("WORKSTPRINTREPORT_FK_WORK");

                    b.HasIndex("WrksId", "WsprReportid")
                        .IsUnique()
                        .HasName("WORKSTPRINTREPORT_I_WORK_REP");

                    b.ToTable("WORKSTATIONPRINTREPORT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionAlertFolders", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccessionAlertFolders", "ParentNodeNavigation")
                        .WithMany("InverseParentNodeNavigation")
                        .HasForeignKey("ParentNode")
                        .HasConstraintName("ACC_ALERT_FOLDERS_SELF_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionAlerts", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", "AclFirstgroupNavigation")
                        .WithMany("AccessionAlertsAclFirstgroupNavigation")
                        .HasForeignKey("AclFirstgroup")
                        .HasConstraintName("FK_ACCESSION_ALERTS_FIRST");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", "AclSecondgroupNavigation")
                        .WithMany("AccessionAlertsAclSecondgroupNavigation")
                        .HasForeignKey("AclSecondgroup")
                        .HasConstraintName("FK_ACCESSION_ALERTS_SECOND");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccessionAlertFolders", "FolderNodeNavigation")
                        .WithMany("AccessionAlerts")
                        .HasForeignKey("FolderNode")
                        .HasConstraintName("FK_ACCESSION_ALERTS_FOLDER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionSignOn", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "EndedbyNavigation")
                        .WithMany("AccessionSignOnEndedbyNavigation")
                        .HasForeignKey("Endedby")
                        .HasConstraintName("FK_ACC_SIGNON_ENDEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("AccessionSignOn")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_ACC_SIGNON_PAT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "StartedbyNavigation")
                        .WithMany("AccessionSignOnStartedbyNavigation")
                        .HasForeignKey("Startedby")
                        .HasConstraintName("FK_ACC_SIGNON_STARTEDBY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionText", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "AtxtTextNavigation")
                        .WithMany("AccessionText")
                        .HasForeignKey("AtxtText")
                        .HasConstraintName("ACCESSION_TEXT_FK_TEXT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionTextPatient", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "AtpPtnt")
                        .WithMany("AccessionTextPatient")
                        .HasForeignKey("AtpPtntId")
                        .HasConstraintName("ACCESSION_TEXT_P_FK_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccessionText", "AtpTemplateNavigation")
                        .WithMany("AccessionTextPatient")
                        .HasForeignKey("AtpTemplate")
                        .HasConstraintName("ACCESSION_TEXT_P_FK_TEMPLATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "AtpTextNavigation")
                        .WithMany("AccessionTextPatient")
                        .HasForeignKey("AtpText")
                        .HasConstraintName("ACCESSION_TEXT_P_FK_BLOB");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("AccessionTextPatientCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("ACC_TEXT_PTNT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("AccessionTextPatientDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("ACC_TEXT_PTNT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccessionTextPatient", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("ACC_TEXT_PTNT_FK_MASTER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccessionTextPppu", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AtppPppu")
                        .WithMany("AccessionTextPppu")
                        .HasForeignKey("AtppPppuId")
                        .HasConstraintName("ACSN_TEXT_PPPU_FK_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccessionText", "AtppTemplateNavigation")
                        .WithMany("AccessionTextPppu")
                        .HasForeignKey("AtppTemplate")
                        .HasConstraintName("ACSN_TEXT_PPPU_FK_TEMPLATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "AtppTextNavigation")
                        .WithMany("AccessionTextPppu")
                        .HasForeignKey("AtppText")
                        .HasConstraintName("ACSN_TEXT_PPPU_FK_BLOB");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("AccessionTextPppuCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("ACC_TEXT_PPPU_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("AccessionTextPppuDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("ACC_TEXT_PPPU_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccessionTextPppu", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("ACC_TEXT_PPPU_FK_MASTER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccFormFilter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "Form")
                        .WithMany("AccFormFilter")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_ACC_FORM_FILTER_FORM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", "PatientGroup")
                        .WithMany("AccFormFilter")
                        .HasForeignKey("PatientGroupId")
                        .HasConstraintName("FK_ACC_FORM_FILTER_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccFormProfile", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccFormFilter", "FormFilter")
                        .WithMany("AccFormProfile")
                        .HasForeignKey("FormFilterId")
                        .HasConstraintName("FK_ACC_FORM_PROFILE_FILTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccProfile", "Profile")
                        .WithMany("AccFormProfile")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ACC_FORM_PROFILE_PROFILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccProfile", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", "PatientGroupNavigation")
                        .WithMany("AccProfile")
                        .HasForeignKey("PatientGroup")
                        .HasConstraintName("FK_ACC_PROFILE_PATIENT_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccProfileForApptRule", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccProfile", "AprAccProfileO")
                        .WithMany("AccProfileForApptRule")
                        .HasForeignKey("AprAccProfileOid")
                        .HasConstraintName("FK_ACC_FOR_APPT_RULE_2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppointmentRules", "AprApptRuleO")
                        .WithMany("AccProfileForApptRule")
                        .HasForeignKey("AprApptRuleOid")
                        .HasConstraintName("FK_ACC_FOR_APPT_RULE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AccProfileRoles", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccProfile", "Profile")
                        .WithMany("AccProfileRoles")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ACC_PROFILE_ROLES_PROFILE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Role")
                        .WithMany("AccProfileRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_ACC_PROFILE_ROLES_ROLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Activities", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "ActAppt")
                        .WithMany("Activities")
                        .HasForeignKey("ActApptId")
                        .HasConstraintName("ACT_APPOINTMENT_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "ActPatientNavigation")
                        .WithMany("Activities")
                        .HasForeignKey("ActPatient")
                        .HasConstraintName("FK_ACT_PATIENT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Address", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "AddressTypeNavigation")
                        .WithMany("Address")
                        .HasForeignKey("AddressType")
                        .HasConstraintName("ADDRESS_TYPE_FK_SHORTCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ModifiedByNavigation")
                        .WithMany("Address")
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "NokRelationshipNavigation")
                        .WithMany("AddressNokRelationshipNavigation")
                        .HasForeignKey("NokRelationship")
                        .HasConstraintName("ADDRESS_FK_RELATIONSHIP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PostalstateNavigation")
                        .WithMany("AddressPostalstateNavigation")
                        .HasForeignKey("Postalstate")
                        .HasConstraintName("ADDRESS_FK_POSTALSTATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("Address")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("ADDRESS_PTNT_FK_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AddressPartition", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PostalstateNavigation")
                        .WithMany("AddressPartition")
                        .HasForeignKey("Postalstate")
                        .HasConstraintName("ADDR_PART_FK_POSTALSTATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Ads", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "AdsImage")
                        .WithMany("AdsAdsImage")
                        .HasForeignKey("AdsImageId")
                        .HasConstraintName("IMAGE_FK_BLOBS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "AdsPdf")
                        .WithMany("AdsAdsPdf")
                        .HasForeignKey("AdsPdfId")
                        .HasConstraintName("PDF_FK_BLOBS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppExtSearchCriterion", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppointmentRules", "AppRuleNavigation")
                        .WithMany("AppExtSearchCriterion")
                        .HasForeignKey("AppRule")
                        .HasConstraintName("FK_APP_EXT_RULE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FindObjects", "FindObjectNavigation")
                        .WithMany("AppExtSearchCriterion")
                        .HasForeignKey("FindObject")
                        .HasConstraintName("FK_APP_EXT_FIND_OBJECT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PrimaryConditionsNavigation")
                        .WithMany("AppExtSearchCriterion")
                        .HasForeignKey("PrimaryConditions")
                        .HasConstraintName("FK_APP_EXT_SEARCH_PRM_CNDNS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PrimarySpecialtyNavigation")
                        .WithMany("AppExtSearchCriterionPrimarySpecialtyNavigation")
                        .HasForeignKey("PrimarySpecialty")
                        .HasConstraintName("FK_APP_EXT_SEARCH_PRM_SPLTY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PrimaryTypeNavigation")
                        .WithMany("AppExtSearchCriterionPrimaryTypeNavigation")
                        .HasForeignKey("PrimaryType")
                        .HasConstraintName("FK_APP_EXT_SEARCH_PRM_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "SecondaryGroupNavigation")
                        .WithMany("AppExtSearchCriterion")
                        .HasForeignKey("SecondaryGroup")
                        .HasConstraintName("FK_APP_EXT_SEARCH_SEC_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SecondaryResourceNavigation")
                        .WithMany("AppExtSearchCriterion")
                        .HasForeignKey("SecondaryResource")
                        .HasConstraintName("FK_APP_EXT_SECONDARY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppExtSearchTemplate", "TemplateNavigation")
                        .WithMany("AppExtSearchCriterion")
                        .HasForeignKey("Template")
                        .HasConstraintName("FK_APP_EXT_TEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppExtSearchTemplate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "OverrideTypeNavigation")
                        .WithMany("AppExtSearchTemplate")
                        .HasForeignKey("OverrideType")
                        .HasConstraintName("FK_APP_EXT_OVERRIDE_TYPE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppliedCareplan", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "Careplan")
                        .WithMany("AppliedCareplan")
                        .HasForeignKey("CareplanId")
                        .HasConstraintName("FK_APPLIED_CPLAN_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("AppliedCareplan")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_APPLIED_CPLAN_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("AppliedCareplan")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_APPLIED_CPLAN_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("AppliedCareplan")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_APPLIED_CPLAN_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Reason")
                        .WithMany("AppliedCareplan")
                        .HasForeignKey("ReasonId")
                        .HasConstraintName("FK_APPLIED_CPLAN_REASON_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppLocHistory", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "AppointmentNavigation")
                        .WithMany("AppLocHistory")
                        .HasForeignKey("Appointment")
                        .HasConstraintName("APP_LOC_HISTORY_FK_APPOINTME");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LocationNavigation")
                        .WithMany("AppLocHistory")
                        .HasForeignKey("Location")
                        .HasConstraintName("APP_LOC_HISTORY_FK_LOCATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuNavigation")
                        .WithMany("AppLocHistory")
                        .HasForeignKey("Pppu")
                        .HasConstraintName("APP_LOC_HISTORY_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppOccurences", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "OccurenceApptNavigation")
                        .WithMany("AppOccurences")
                        .HasForeignKey("OccurenceAppt")
                        .HasConstraintName("APP_OCCURENCES_FK_APNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRecurrency", "RecurrenceO")
                        .WithMany("AppOccurences")
                        .HasForeignKey("RecurrenceOid")
                        .HasConstraintName("APP_OCCURENCES_FK_RECURR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Appointment", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ApntCancellationReasonNavigation")
                        .WithMany("AppointmentApntCancellationReasonNavigation")
                        .HasForeignKey("ApntCancellationReason")
                        .HasConstraintName("APNT_FK_CANCELLATION_REASON");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "ApntCase")
                        .WithMany("Appointment")
                        .HasForeignKey("ApntCaseId")
                        .HasConstraintName("APPOINTMENT_FK_APNT_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppFrontDeskNote", "ApntFrontDeskNote")
                        .WithMany("Appointment")
                        .HasForeignKey("ApntFrontDeskNoteId")
                        .HasConstraintName("FK_APPOINTMENT_FDNOTE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "ApntGroupNavigation")
                        .WithMany("InverseApntGroupNavigation")
                        .HasForeignKey("ApntGroup")
                        .HasConstraintName("APPOINTMENT_FK_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Address", "ApntLocationAddress")
                        .WithMany("Appointment")
                        .HasForeignKey("ApntLocationAddressId")
                        .HasConstraintName("FK_APNT_LOCATION_ADDRESS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "ApntMainAppt")
                        .WithMany("InverseApntMainAppt")
                        .HasForeignKey("ApntMainApptId")
                        .HasConstraintName("FK_APNT_MAIN_APPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Priorapproval", "ApntPrappov")
                        .WithMany("Appointment")
                        .HasForeignKey("ApntPrappovId")
                        .HasConstraintName("APPOINTMENT_FK_APNT_PRAPPOV_");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallvisit", "ApntPrvs")
                        .WithMany("Appointment")
                        .HasForeignKey("ApntPrvsId")
                        .HasConstraintName("APNT_PRVS_FK_PRVS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRecurrency", "ApntRecurrencyNavigation")
                        .WithMany("Appointment")
                        .HasForeignKey("ApntRecurrency")
                        .HasConstraintName("APPOINTMENT_FK_APNT_RECURREN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "ApntReferral")
                        .WithMany("Appointment")
                        .HasForeignKey("ApntReferralId")
                        .HasConstraintName("APPOINTMENT_FK_APNT_REFERRAL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppointmentTemplateApplied", "ApntSession")
                        .WithMany("Appointment")
                        .HasForeignKey("ApntSessionId")
                        .HasConstraintName("APPOINTMENT_FK_SESSION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedbyNavigation")
                        .WithMany("AppointmentCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_APPT_CREATEDBY_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ModifiedbyNavigation")
                        .WithMany("AppointmentModifiedbyNavigation")
                        .HasForeignKey("Modifiedby")
                        .HasConstraintName("FK_APPT_MODIFIEDBY_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPosNavigation")
                        .WithMany("AppointmentPppuIdPosNavigation")
                        .HasForeignKey("PppuIdPos")
                        .HasConstraintName("APPOINTMENT_FK_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdProviderNavigation")
                        .WithMany("AppointmentPppuIdProviderNavigation")
                        .HasForeignKey("PppuIdProvider")
                        .HasConstraintName("APPOINTMENT_FK_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdSeenbyNavigation")
                        .WithMany("AppointmentPppuIdSeenbyNavigation")
                        .HasForeignKey("PppuIdSeenby")
                        .HasConstraintName("APNT_FK_PPPU_SEENBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("AppointmentPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("APPOINTMENT_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("Appointment")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("APPOINTMENT_FK_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Role")
                        .WithMany("Appointment")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_APPOINTMENT_ROLE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdLocationNavigation")
                        .WithMany("AppointmentShcdIdLocationNavigation")
                        .HasForeignKey("ShcdIdLocation")
                        .HasConstraintName("APNT_FK_PPPU_LOCATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdPaycodeNavigation")
                        .WithMany("AppointmentShcdIdPaycodeNavigation")
                        .HasForeignKey("ShcdIdPaycode")
                        .HasConstraintName("APPOINTMENT_FK_SHCD_ID_PAYCO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdPriorityNavigation")
                        .WithMany("AppointmentShcdIdPriorityNavigation")
                        .HasForeignKey("ShcdIdPriority")
                        .HasConstraintName("APNT_FK_PPPU_PRIORITY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdTypeNavigation")
                        .WithMany("AppointmentShcdIdTypeNavigation")
                        .HasForeignKey("ShcdIdType")
                        .HasConstraintName("APNT_FOREIGN_SHORTCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "SrvcIdReasonNavigation")
                        .WithMany("Appointment")
                        .HasForeignKey("SrvcIdReason")
                        .HasConstraintName("APPOINTMENT_FK_REASON");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Appointmentaudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "Apnt")
                        .WithMany("Appointmentaudit")
                        .HasForeignKey("ApntId")
                        .HasConstraintName("APPOINTMENTAUDIT_FK_APNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdUserNavigation")
                        .WithMany("Appointmentaudit")
                        .HasForeignKey("PppuIdUser")
                        .HasConstraintName("APAD_USER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("Appointmentaudit")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("APPOINTMENTAUDIT_FK_PTNT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppointmentRules", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "DefReason")
                        .WithMany("AppointmentRules")
                        .HasForeignKey("DefReasonId")
                        .HasConstraintName("FK_APRL_SRVC");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DefTypeNavigation")
                        .WithMany("AppointmentRulesDefTypeNavigation")
                        .HasForeignKey("DefType")
                        .HasConstraintName("FK_APRL_SHCD");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.HelpInfo", "PatientHelpInfoNavigation")
                        .WithMany("AppointmentRulesPatientHelpInfoNavigation")
                        .HasForeignKey("PatientHelpInfo")
                        .HasConstraintName("FK_APPTRL_PTNT_HELP_INFO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PosNavigation")
                        .WithMany("AppointmentRulesPosNavigation")
                        .HasForeignKey("Pos")
                        .HasConstraintName("FK_APRL_POS_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ProviderNavigation")
                        .WithMany("AppointmentRulesProviderNavigation")
                        .HasForeignKey("Provider")
                        .HasConstraintName("FK_APRL_PROV_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.HelpInfo", "ProviderHelpInfoNavigation")
                        .WithMany("AppointmentRulesProviderHelpInfoNavigation")
                        .HasForeignKey("ProviderHelpInfo")
                        .HasConstraintName("FK_APPTRL_PROV_HELP_INFO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TempCommonTypeNavigation")
                        .WithMany("AppointmentRulesTempCommonTypeNavigation")
                        .HasForeignKey("TempCommonType")
                        .HasConstraintName("APNT_RULES_FK_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "TempGroup")
                        .WithMany("AppointmentRules")
                        .HasForeignKey("TempGroupid")
                        .HasConstraintName("FK_APNT_RULES_PROV_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppointmentSlotsFo", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("AppointmentSlotsFoPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_APP_SLOTS_FO_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("AppointmentSlotsFoPppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_APP_SLOTS_FO_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppointmentState", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "Apnt")
                        .WithMany("AppointmentState")
                        .HasForeignKey("ApntId")
                        .HasConstraintName("APPOINTMENT_STATE_FK_APNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("AppointmentState")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("APPOINTMENT_STATE_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppointmentTemplateApplied", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "AtaGroup")
                        .WithMany("AppointmentTemplateApplied")
                        .HasForeignKey("AtaGroupId")
                        .HasConstraintName("APPT_TPL_APPLIED_FK_GROUP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AtaPppu")
                        .WithMany("AppointmentTemplateApplied")
                        .HasForeignKey("AtaPppuId")
                        .HasConstraintName("APPT_TPL_APPLIED_FK_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppointmentRules", "AtaTemplateO")
                        .WithMany("AppointmentTemplateApplied")
                        .HasForeignKey("AtaTemplateOid")
                        .HasConstraintName("APPT_TPL_APPLIED_FK_TPL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppRecurrency", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPosNavigation")
                        .WithMany("AppRecurrencyPppuIdPosNavigation")
                        .HasForeignKey("PppuIdPos")
                        .HasConstraintName("APP_RECURRENCY_FK_PPPU_ID_PO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdProviderNavigation")
                        .WithMany("AppRecurrencyPppuIdProviderNavigation")
                        .HasForeignKey("PppuIdProvider")
                        .HasConstraintName("APP_RECURRENCY_FK_PPPU_ID_PR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("AppRecurrency")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("APP_RECURRENCY_FK_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppRole", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedbyNavigation")
                        .WithMany("AppRole")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("ROLE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "DefCefform")
                        .WithMany("AppRole")
                        .HasForeignKey("DefCefformId")
                        .HasConstraintName("I_APPROLE_DEFCEFFORM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "ParentRoleNavigation")
                        .WithMany("InverseParentRoleNavigation")
                        .HasForeignKey("ParentRole")
                        .HasConstraintName("ROLE_FK_PARENT_ROLE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PrivacyEntry", "PrivacyEntry")
                        .WithMany("AppRole")
                        .HasForeignKey("PrivacyEntryId")
                        .HasConstraintName("FK_APPROLE_PRIVACY_ENTRY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AppRoleCef", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "ArfForm")
                        .WithMany("AppRoleCef")
                        .HasForeignKey("ArfFormId")
                        .HasConstraintName("ARF_FORM_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "ArfRole")
                        .WithMany("AppRoleCef")
                        .HasForeignKey("ArfRoleId")
                        .HasConstraintName("ARF_ROLE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ArfShortcode")
                        .WithMany("AppRoleCef")
                        .HasForeignKey("ArfShortcodeId")
                        .HasConstraintName("ARF_SHORTCODE_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ApptRegistry", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "AprgAppt")
                        .WithMany("ApptRegistry")
                        .HasForeignKey("AprgApptid")
                        .HasConstraintName("APRG_FK_APNT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ApptRuleServices", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppointmentRules", "Rule")
                        .WithMany("ApptRuleServices")
                        .HasForeignKey("RuleId")
                        .HasConstraintName("FK_APPT_RULE_SERVICES_RULE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("ApptRuleServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_APPT_RULE_SERVICES_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ArchiveLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AlogUser")
                        .WithMany("ArchiveLog")
                        .HasForeignKey("AlogUserId")
                        .HasConstraintName("ALOG_USER_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Associates", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Activity")
                        .WithMany("AssociatesActivity")
                        .HasForeignKey("Activityid")
                        .HasConstraintName("FK_ASSN_ACTIVITYID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Association", "Association")
                        .WithMany("Associates")
                        .HasForeignKey("Associationid")
                        .HasConstraintName("FK_ASSN_ASSOCIATIONID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("Associates")
                        .HasForeignKey("Caseid")
                        .HasConstraintName("FK_ASSN_CASEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Intensity")
                        .WithMany("AssociatesIntensity")
                        .HasForeignKey("Intensityid")
                        .HasConstraintName("FK_ASSN_INTENSITYID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Outcome")
                        .WithMany("AssociatesOutcome")
                        .HasForeignKey("Outcomeid")
                        .HasConstraintName("FK_ASSN_OUTCOMEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("Associates")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_ASSN_PATIENTID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Association", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "AssoctypeNavigation")
                        .WithMany("Association")
                        .HasForeignKey("Assoctype")
                        .HasConstraintName("FK_ASSOC_TYPE_SHORTCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("Association")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_ASSOC_CASEID_BCASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("Association")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_ASSOCIATION_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("Association")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("ASSOCIATION_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacyrole")
                        .WithMany("Association")
                        .HasForeignKey("Privacyroleid")
                        .HasConstraintName("FK_ASSOCIATION_ROLE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "PrivatetoorgNavigation")
                        .WithMany("Association")
                        .HasForeignKey("Privatetoorg")
                        .HasConstraintName("FK_ASSOC_ORGSTRUC_PRIV");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Audit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AudtPppu")
                        .WithMany("Audit")
                        .HasForeignKey("AudtPppuId")
                        .HasConstraintName("AUDT_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AuditIhnMpi", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AudIhnPppu")
                        .WithMany("AuditIhnMpi")
                        .HasForeignKey("AudIhnPppuId")
                        .HasConstraintName("FK_AUD_IHN_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AuditWeb", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("AuditWeb")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_AUDIT_WEB_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "User")
                        .WithMany("AuditWeb")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AUDIT_WEB_USER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AuditWebActivity", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AuditWeb", "AuditWeb")
                        .WithMany("AuditWebActivity")
                        .HasForeignKey("AuditWebId")
                        .HasConstraintName("FK_AUDIT_WEB_ACTIVITY_AUDIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "SelectedPtnt")
                        .WithMany("AuditWebActivity")
                        .HasForeignKey("SelectedPtntId")
                        .HasConstraintName("FK_AUDIT_WEB_ACT_SEL_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AutoExecuteJfaRecord", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "AejfCommandTextBlob")
                        .WithMany("AutoExecuteJfaRecord")
                        .HasForeignKey("AejfCommandTextBlobId")
                        .HasConstraintName("AEJF_FK_COMMAND_TEXT_BLOB_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AejfCreator")
                        .WithMany("AutoExecuteJfaRecord")
                        .HasForeignKey("AejfCreatorId")
                        .HasConstraintName("AEJF_FK_CREATOR_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.AutoExecuteJfaRecordLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "AelgErrorTextBlob")
                        .WithMany("AutoExecuteJfaRecordLog")
                        .HasForeignKey("AelgErrorTextBlobId")
                        .HasConstraintName("AELG_FK_ERROR_TEXT_BLOB_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AutoExecuteJfaRecord", "AelgParentJfaRecord")
                        .WithMany("AutoExecuteJfaRecordLog")
                        .HasForeignKey("AelgParentJfaRecordId")
                        .HasConstraintName("AELG_FK_PARENT_JFA_RECORD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AelgRunBy")
                        .WithMany("AutoExecuteJfaRecordLog")
                        .HasForeignKey("AelgRunById")
                        .HasConstraintName("AELG_FK_RUN_BY_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.BatchInvoices", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("BatchInvoicesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("BATCH_INVOICES_FK_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DeletedByNavigation")
                        .WithMany("BatchInvoicesDeletedByNavigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("BATCH_INVOICES_FK_DELETED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PayeeProv")
                        .WithMany("BatchInvoicesPayeeProv")
                        .HasForeignKey("PayeeProvId")
                        .HasConstraintName("BI_FK_PAYEE_PROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Payer")
                        .WithMany("BatchInvoices")
                        .HasForeignKey("PayerId")
                        .HasConstraintName("BATCH_INVOICES_FK_PAYER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("BatchInvoicesPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("BATCH_INVOICES_FK_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("BatchInvoicesPppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("BATCH_INVOICES_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.BatchPayment", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.BatchInvoices", "BatchClaim")
                        .WithMany("BatchPayment")
                        .HasForeignKey("BatchClaimId")
                        .HasConstraintName("BATCH_PAYMENT_FK_BATCH");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.BatchStatement", "StatementO")
                        .WithMany("BatchPayment")
                        .HasForeignKey("StatementOid")
                        .HasConstraintName("BATCH_PAYMENT_FK_STATEMENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.BatchStatement", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Deposits", "Deposit")
                        .WithMany("BatchStatement")
                        .HasForeignKey("DepositId")
                        .HasConstraintName("BATCH_STATEMENT_FK_DEPOSITS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PayeeProvider")
                        .WithMany("BatchStatementPayeeProvider")
                        .HasForeignKey("PayeeProviderId")
                        .HasConstraintName("BATCH_STATEMENT_FK_PAYEE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("BatchStatementPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("BATCH_STATEMENT_FK_POS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Bcase", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AlteredBy")
                        .WithMany("BcaseAlteredBy")
                        .HasForeignKey("AlteredById")
                        .HasConstraintName("BCASE_FK_ALTERED_BY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "CaseInitDiag")
                        .WithMany("BcaseCaseInitDiag")
                        .HasForeignKey("CaseInitDiagId")
                        .HasConstraintName("BCASE_FK_CASE_INIT_DIAG_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CaseMngr")
                        .WithMany("BcaseCaseMngr")
                        .HasForeignKey("CaseMngrId")
                        .HasConstraintName("BCASE_FK_CASE_MNGR_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "CaseRole")
                        .WithMany("BcaseCaseRole")
                        .HasForeignKey("CaseRoleId")
                        .HasConstraintName("FK_CASE_ROLE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "CaseSettingsNavigation")
                        .WithMany("BcaseCaseSettingsNavigation")
                        .HasForeignKey("CaseSettings")
                        .HasConstraintName("FK_BCASE_SETTINGS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseTemplates", "CaseTemplateNavigation")
                        .WithMany("Bcase")
                        .HasForeignKey("CaseTemplate")
                        .HasConstraintName("FK_BCASE_CASE_TEMPLATE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ConditionNavigation")
                        .WithMany("BcaseConditionNavigation")
                        .HasForeignKey("Condition")
                        .HasConstraintName("BCASE_FK_CONDITION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Creator")
                        .WithMany("BcaseCreator")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("BCASE_FK_CREATOR_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseFinancial", "FinancialNavigation")
                        .WithMany("Bcase")
                        .HasForeignKey("Financial")
                        .HasConstraintName("FK_CASE_CASE_FINANCIAL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "ForceCaseNavigation")
                        .WithMany("BcaseForceCaseNavigation")
                        .HasForeignKey("ForceCase")
                        .HasConstraintName("FK_BCASE_FORCECASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LeadProv")
                        .WithMany("BcaseLeadProv")
                        .HasForeignKey("LeadProvId")
                        .HasConstraintName("BCASE_FK_LEAD_PROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OrgStructure")
                        .WithMany("BcaseOrgStructure")
                        .HasForeignKey("OrgStructureId")
                        .HasConstraintName("FK_BCASE_ORGSTRUCTURE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "OriginationNavigation")
                        .WithMany("BcaseOriginationNavigation")
                        .HasForeignKey("Origination")
                        .HasConstraintName("BCASE_FK_ORIGINATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("Bcase")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("BCASE_FK_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "PresentationNavigation")
                        .WithMany("BcasePresentationNavigation")
                        .HasForeignKey("Presentation")
                        .HasConstraintName("BCASE_FK_PRESENTATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("BcasePrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("BCASE_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "RefO")
                        .WithMany("Bcase")
                        .HasForeignKey("RefOid")
                        .HasConstraintName("BCASE_FK_REF_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "RoleO")
                        .WithMany("BcaseRoleO")
                        .HasForeignKey("RoleOid")
                        .HasConstraintName("BCASE_FK_ROLE_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "RoleOidAdminNavigation")
                        .WithMany("BcaseRoleOidAdminNavigation")
                        .HasForeignKey("RoleOidAdmin")
                        .HasConstraintName("FK_CASEROLEADMIN_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "SepDiag")
                        .WithMany("BcaseSepDiag")
                        .HasForeignKey("SepDiagId")
                        .HasConstraintName("BCASE_FK_SEP_DIAG_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SepOutcome")
                        .WithMany("BcaseSepOutcome")
                        .HasForeignKey("SepOutcomeId")
                        .HasConstraintName("BCASE_FK_SEP_OUTCOME_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "SepService")
                        .WithMany("Bcase")
                        .HasForeignKey("SepServiceId")
                        .HasConstraintName("BCASE_FK_SEP_SERVICE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ServicePos")
                        .WithMany("BcaseServicePos")
                        .HasForeignKey("ServicePosId")
                        .HasConstraintName("BCASE_FK_SERVICE_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdCaseriskNavigation")
                        .WithMany("BcaseShcdCaseriskNavigation")
                        .HasForeignKey("ShcdCaserisk")
                        .HasConstraintName("FK_BCASE_CASERISK_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdDischargedto")
                        .WithMany("BcaseShcdDischargedto")
                        .HasForeignKey("ShcdDischargedtoid")
                        .HasConstraintName("FK_CASEDISCHARGEDTO_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdPriority")
                        .WithMany("BcaseShcdPriority")
                        .HasForeignKey("ShcdPriorityid")
                        .HasConstraintName("FK_CASEPRIORITY_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdSource1Navigation")
                        .WithMany("BcaseShcdSource1Navigation")
                        .HasForeignKey("ShcdSource1")
                        .HasConstraintName("BCASE_SRC1_FK_SHORTCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdSource2Navigation")
                        .WithMany("BcaseShcdSource2Navigation")
                        .HasForeignKey("ShcdSource2")
                        .HasConstraintName("BCASE_SRC2_FK_SHORTCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "SourceNavigation")
                        .WithMany("BcaseSourceNavigation")
                        .HasForeignKey("Source")
                        .HasConstraintName("BCASE_FK_SOURCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Bulkinvoiceset", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPasstoNavigation")
                        .WithMany("BulkinvoicesetPppuIdPasstoNavigation")
                        .HasForeignKey("PppuIdPassto")
                        .HasConstraintName("BULKINVOICESET_FK_PASSTO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPosNavigation")
                        .WithMany("BulkinvoicesetPppuIdPosNavigation")
                        .HasForeignKey("PppuIdPos")
                        .HasConstraintName("BULKINVOICESET_FK_POS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Bulkinvoicesetline", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bulkinvoiceset", "ParentO")
                        .WithMany("Bulkinvoicesetline")
                        .HasForeignKey("ParentOid")
                        .HasConstraintName("BULKINVCSETLINE_FK_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdProviderNavigation")
                        .WithMany("Bulkinvoicesetline")
                        .HasForeignKey("PppuIdProvider")
                        .HasConstraintName("BULKINVCSETLINE_FK_PROVIDER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Calculator", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "ClcForm")
                        .WithMany("Calculator")
                        .HasForeignKey("ClcFormId")
                        .HasConstraintName("CALCULATOR_FK_FORM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Clcuser")
                        .WithMany("Calculator")
                        .HasForeignKey("Clcuserid")
                        .HasConstraintName("CALCULATOR_FK_CLCUSERID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CapitationInfo", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExportAck", "CpiCbfExportAck")
                        .WithMany("CapitationInfo")
                        .HasForeignKey("CpiCbfExportAckId")
                        .HasConstraintName("FK_CAPINFO_EXPORTACKID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientcard", "CpiCbfPayerCard")
                        .WithMany("CapitationInfo")
                        .HasForeignKey("CpiCbfPayerCardId")
                        .HasConstraintName("FK_CAPINFO_PAYERCARDID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CpiPatient")
                        .WithMany("CapitationInfo")
                        .HasForeignKey("CpiPatientid")
                        .HasConstraintName("FK_CAPINFO_PATIENTID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareActionAlternativeLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanaction", "AlternativeCareaction")
                        .WithMany("CareActionAlternativeLinkAlternativeCareaction")
                        .HasForeignKey("AlternativeCareactionId")
                        .HasConstraintName("FK_CAAL_ALT_CAREACTION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanaction", "BaseCareaction")
                        .WithMany("CareActionAlternativeLinkBaseCareaction")
                        .HasForeignKey("BaseCareactionId")
                        .HasConstraintName("FK_CAAL_BASE_CAREACTION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallaction", "BaseRecallaction")
                        .WithMany("CareActionAlternativeLink")
                        .HasForeignKey("BaseRecallactionId")
                        .HasConstraintName("FK_CAAL_BASE_RACTION_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareActionReasonLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanaction", "BaseCareaction")
                        .WithMany("CareActionReasonLink")
                        .HasForeignKey("BaseCareactionId")
                        .HasConstraintName("FK_CARL_BASE_CAREACTION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallaction", "BaseRecallaction")
                        .WithMany("CareActionReasonLink")
                        .HasForeignKey("BaseRecallactionId")
                        .HasConstraintName("FK_CARL_BASE_RACTION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept")
                        .WithMany("CareActionReasonLink")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("FK_CARL_CONCEPT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Careobjective", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "Careplan")
                        .WithMany("Careobjective")
                        .HasForeignKey("Careplanid")
                        .HasConstraintName("FK_CAREOBJECTIVE_CP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CareobjectiveCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CAREOBJECTIVE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CareobjectiveDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CAREOBJECTIVE_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Careobjective", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("CAREOBJECTIVE_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacyrole")
                        .WithMany("Careobjective")
                        .HasForeignKey("Privacyroleid")
                        .HasConstraintName("FK_CAREOBJECTIVE_PR_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("Careobjective")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_CAREOBJECTIVE_SERVICE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdObjectivetype")
                        .WithMany("Careobjective")
                        .HasForeignKey("ShcdObjectivetypeid")
                        .HasConstraintName("FK_CAREOBJECTIVE_OT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareplanGroup", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("CareplanGroup")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_CPG_SERVICE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareplanGroupLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CareplanGroup", "CareplanGroup")
                        .WithMany("CareplanGroupLink")
                        .HasForeignKey("CareplanGroupId")
                        .HasConstraintName("FK_CPGL_CAREPLAN_GROUP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "Careplan")
                        .WithMany("CareplanGroupLink")
                        .HasForeignKey("CareplanId")
                        .HasConstraintName("FK_CPGL_CAREPLAN_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Carerecurrence", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CarerecurrenceCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CARERECURRENCE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CarerecurrenceDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CARERECURRENCE_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Carerecurrence", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("CARERECURRENCE_FK_MASTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CareTeam", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CareTeamCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CARE_TEAM_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "CtCase")
                        .WithMany("CareTeam")
                        .HasForeignKey("CtCaseId")
                        .HasConstraintName("CARETEAM_FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CtClosedByNavigation")
                        .WithMany("CareTeamCtClosedByNavigation")
                        .HasForeignKey("CtClosedBy")
                        .HasConstraintName("CT_FK_CLOSED_BY_CDO_PERSON");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Partition", "CtOriginPartition")
                        .WithMany("CareTeam")
                        .HasForeignKey("CtOriginPartitionId")
                        .HasConstraintName("FK_CT_ORGN_PARTITION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CtPatientNavigation")
                        .WithMany("CareTeamCtPatientNavigation")
                        .HasForeignKey("CtPatient")
                        .HasConstraintName("CARETEAM_FK_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CtPayer")
                        .WithMany("CareTeamCtPayer")
                        .HasForeignKey("CtPayerId")
                        .HasConstraintName("CARE_TEAM_FK_PAYER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CtPerson")
                        .WithMany("CareTeamCtPerson")
                        .HasForeignKey("CtPersonId")
                        .HasConstraintName("CARETEAM_FK_PERSON_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "CtPppuRoleNavigation")
                        .WithMany("CareTeamCtPppuRoleNavigation")
                        .HasForeignKey("CtPppuRole")
                        .HasConstraintName("CARE_TEAM_FK_PPPU_ROLE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "CtPrivacy")
                        .WithMany("CareTeamCtPrivacy")
                        .HasForeignKey("CtPrivacyid")
                        .HasConstraintName("CT_FK_PRIVACYID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "CtRoleNavigation")
                        .WithMany("CareTeam")
                        .HasForeignKey("CtRole")
                        .HasConstraintName("CARETEAM_FK_ROLE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CareTeamDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CARE_TEAM_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CareTeam", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("CARE_TEAM_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("CareTeamPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("CARE_TEAM_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseAudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("CaseAudit")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("CASE_AUDIT_FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "ObserverPtnt")
                        .WithMany("CaseAudit")
                        .HasForeignKey("ObserverPtntId")
                        .HasConstraintName("FK_CAUDIT_OBSPTNTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("CaseAudit")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("CASE_AUDIT_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseAuditDetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseAudit", "CadAudit")
                        .WithMany("CaseAuditDetails")
                        .HasForeignKey("CadAuditId")
                        .HasConstraintName("CAD_AUDIT_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseBudgetRequest", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "CbrCase")
                        .WithMany("CaseBudgetRequest")
                        .HasForeignKey("CbrCaseId")
                        .HasConstraintName("FK_CBR_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CbrPayer")
                        .WithMany("CaseBudgetRequest")
                        .HasForeignKey("CbrPayerId")
                        .HasConstraintName("FK_CBR_PATIENT_PAYER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "CbrPhase")
                        .WithMany("CaseBudgetRequest")
                        .HasForeignKey("CbrPhaseId")
                        .HasConstraintName("FK_CBR_SHORTCODE_PHASE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseBudgetRequestJrnl", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseBudgetRequest", "BrjBudgetRequest")
                        .WithMany("CaseBudgetRequestJrnl")
                        .HasForeignKey("BrjBudgetRequestId")
                        .HasConstraintName("BRJ_BUDGET_REQUEST_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "BrjUser")
                        .WithMany("CaseBudgetRequestJrnl")
                        .HasForeignKey("BrjUserId")
                        .HasConstraintName("FK_BRJ_PPPU_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseBudgetRequestLine", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseBudgetRequest", "BrlBudgetRequest")
                        .WithMany("CaseBudgetRequestLine")
                        .HasForeignKey("BrlBudgetRequestId")
                        .HasConstraintName("FK_BRL_BUDGET_REQUEST_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "BrlService")
                        .WithMany("CaseBudgetRequestLine")
                        .HasForeignKey("BrlServiceId")
                        .HasConstraintName("FK_BRL_SERVICE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseFinancial", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CfnEmployerNavigation")
                        .WithMany("CaseFinancialCfnEmployerNavigation")
                        .HasForeignKey("CfnEmployer")
                        .HasConstraintName("FK_CASE_FIN_EMPLOYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CfnGuarantorNavigation")
                        .WithMany("CaseFinancialCfnGuarantorNavigation")
                        .HasForeignKey("CfnGuarantor")
                        .HasConstraintName("FK_CASE_FIN_GUARANTOR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "CfnOccupationNavigation")
                        .WithMany("CaseFinancialCfnOccupationNavigation")
                        .HasForeignKey("CfnOccupation")
                        .HasConstraintName("FK_CASE_FIN_OCCUPATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CfnPayerNavigation")
                        .WithMany("CaseFinancialCfnPayerNavigation")
                        .HasForeignKey("CfnPayer")
                        .HasConstraintName("FK_CASE_FIN_PAYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "CfnServiceDiscountNavigation")
                        .WithMany("CaseFinancialCfnServiceDiscountNavigation")
                        .HasForeignKey("CfnServiceDiscount")
                        .HasConstraintName("FK_CASE_FIN_SERV_DISCOUNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "CfnServiceRateNavigation")
                        .WithMany("CaseFinancialCfnServiceRateNavigation")
                        .HasForeignKey("CfnServiceRate")
                        .HasConstraintName("FK_CASE_FIN_SERVICE_RATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "CfnWorkStateNavigation")
                        .WithMany("CaseFinancialCfnWorkStateNavigation")
                        .HasForeignKey("CfnWorkState")
                        .HasConstraintName("FK_CASE_FIN_WORK_STATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseLoan", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("CaseLoan")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_CASE_LOAN_CASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseService", "CaseService")
                        .WithMany("CaseLoan")
                        .HasForeignKey("CaseServiceId")
                        .HasConstraintName("FK_CASE_LOAN_CS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Item")
                        .WithMany("CaseLoan")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_CASE_LOAN_ITEM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LoanedFromPosNavigation")
                        .WithMany("CaseLoanLoanedFromPosNavigation")
                        .HasForeignKey("LoanedFromPos")
                        .HasConstraintName("FK_CASE_LOAN_LOANED_FROM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("CaseLoan")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_CASE_LOAN_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("CaseLoanPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_CASE_LOAN_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("CaseLoanPppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_CASE_LOAN_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("CaseLoan")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_CASE_LOAN_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("CaseLoanPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("CASE_LOAN_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Servicerate", "Rate")
                        .WithMany("CaseLoan")
                        .HasForeignKey("RateId")
                        .HasConstraintName("FK_CASE_LOAN_RATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseMergeLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("CaseMergeLog")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("CASE_MERGE_LOG_FK_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Master")
                        .WithMany("CaseMergeLogMaster")
                        .HasForeignKey("Masterid")
                        .HasConstraintName("CASE_MERGE_LOG_FK_MASTERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Sub")
                        .WithMany("CaseMergeLogSub")
                        .HasForeignKey("Subid")
                        .HasConstraintName("CASE_MERGE_LOG_FK_SUBID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseNotes", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("CaseNotes")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_CASE_NOTES_BCASE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseOrg", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("CaseOrg")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("CASE_ORG_FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Org")
                        .WithMany("CaseOrg")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("CASE_ORG_FK_ORG_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("CaseOrg")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_CASE_ORG_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("CaseOrg")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("CASE_ORG_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CasePatientCard", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("CasePatientCard")
                        .HasForeignKey("Caseid")
                        .HasConstraintName("FK_CASEPC_CASEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientcard", "Patientcard")
                        .WithMany("CasePatientCard")
                        .HasForeignKey("Patientcardid")
                        .HasConstraintName("FK_CASEPC_PATIENT_CARD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseService", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("CaseService")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_CASE_SERVICE_CASE_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuFromposNavigation")
                        .WithMany("CaseServicePppuFromposNavigation")
                        .HasForeignKey("PppuFrompos")
                        .HasConstraintName("FK_CS_PPPU_FROMPOS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuFromproviderNavigation")
                        .WithMany("CaseServicePppuFromproviderNavigation")
                        .HasForeignKey("PppuFromprovider")
                        .HasConstraintName("FK_CS_PPPU_FROMPROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuPosNavigation")
                        .WithMany("CaseServicePppuPosNavigation")
                        .HasForeignKey("PppuPos")
                        .HasConstraintName("FK_CASE_SERVICE_PPPU_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuProviderNavigation")
                        .WithMany("CaseServicePppuProviderNavigation")
                        .HasForeignKey("PppuProvider")
                        .HasConstraintName("FK_CASE_SERVICE_PPPU_PROVIDE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("CaseService")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_CASE_SERVICE_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("CaseServicePrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("CASE_SERVICE_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdAcuityNavigation")
                        .WithMany("CaseServiceShcdAcuityNavigation")
                        .HasForeignKey("ShcdAcuity")
                        .HasConstraintName("FK_CASE_SERVICE_ACUITY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdDischargedToNavigation")
                        .WithMany("CaseServiceShcdDischargedToNavigation")
                        .HasForeignKey("ShcdDischargedTo")
                        .HasConstraintName("FK_CASE_SERVICE_DISCHARGED_T");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdHealthStatusNavigation")
                        .WithMany("CaseServiceShcdHealthStatusNavigation")
                        .HasForeignKey("ShcdHealthStatus")
                        .HasConstraintName("FK_CASE_SERVICE_HEALTH_STATU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdOutcomeNavigation")
                        .WithMany("CaseServiceShcdOutcomeNavigation")
                        .HasForeignKey("ShcdOutcome")
                        .HasConstraintName("FK_CASE_SERVICE_OUTCOME");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdPlaceNavigation")
                        .WithMany("CaseServiceShcdPlaceNavigation")
                        .HasForeignKey("ShcdPlace")
                        .HasConstraintName("FK_CASE_SERVICE_PLACE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdPriorityNavigation")
                        .WithMany("CaseServiceShcdPriorityNavigation")
                        .HasForeignKey("ShcdPriority")
                        .HasConstraintName("FK_CASE_SERVICE_PRIORITY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdRefstatusNavigation")
                        .WithMany("CaseServiceShcdRefstatusNavigation")
                        .HasForeignKey("ShcdRefstatus")
                        .HasConstraintName("CASE_SERVICE_REFSTATUS_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseTemplates", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "AdminPrivacyNavigation")
                        .WithMany("CaseTemplatesAdminPrivacyNavigation")
                        .HasForeignKey("AdminPrivacy")
                        .HasConstraintName("FK_CT_ADMIN_PRIVACY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "CareplanNavigation")
                        .WithMany("CaseTemplates")
                        .HasForeignKey("Careplan")
                        .HasConstraintName("FK_CASE_TEMPL_CAREPLAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "CasePrivacyNavigation")
                        .WithMany("CaseTemplatesCasePrivacyNavigation")
                        .HasForeignKey("CasePrivacy")
                        .HasConstraintName("FK_CT_CASE_PRIVACY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "CaseSettingNavigation")
                        .WithMany("CaseTemplates")
                        .HasForeignKey("CaseSetting")
                        .HasConstraintName("FK_CT_CASE_SETTING");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "ClinicalPrivacyNavigation")
                        .WithMany("CaseTemplatesClinicalPrivacyNavigation")
                        .HasForeignKey("ClinicalPrivacy")
                        .HasConstraintName("FK_CT_CLINICAL_PRIVACY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "EventTemplateNavigation")
                        .WithMany("CaseTemplates")
                        .HasForeignKey("EventTemplate")
                        .HasConstraintName("FK_CASE_TEMPL_EVENT_TEMPL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "MacroNavigation")
                        .WithMany("CaseTemplates")
                        .HasForeignKey("Macro")
                        .HasConstraintName("FK_CASE_TEMPL_MACRO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CaseWaitlist", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "Appt")
                        .WithMany("CaseWaitlist")
                        .HasForeignKey("ApptId")
                        .HasConstraintName("CASE_WAITLIST_FK_APPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("CaseWaitlist")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("CASE_WAITLIST_FK_CASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "OutcomeNavigation")
                        .WithMany("CaseWaitlistOutcomeNavigation")
                        .HasForeignKey("Outcome")
                        .HasConstraintName("FK_CASEWAITLIST_OUTCOME");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("CaseWaitlist")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_CASE_WAITLIST_PATIENTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PosNavigation")
                        .WithMany("CaseWaitlistPosNavigation")
                        .HasForeignKey("Pos")
                        .HasConstraintName("FK_CASEWAITLIST_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PriorityNavigation")
                        .WithMany("CaseWaitlistPriorityNavigation")
                        .HasForeignKey("Priority")
                        .HasConstraintName("FK_CASEWAITLIST_PRIORITY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("CaseWaitlist")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_CASE_WAITLIST_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("CaseWaitlistPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("CASE_WAITLIST_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("CaseWaitlistProvider")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_CASE_WAITLIST_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Type")
                        .WithMany("CaseWaitlistType")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_CASE_WAITLIST_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "WaitlistTypeNavigation")
                        .WithMany("CaseWaitlistWaitlistTypeNavigation")
                        .HasForeignKey("WaitlistType")
                        .HasConstraintName("FK_CWL_WAITLISTTYPE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoConceptMatch", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptO")
                        .WithMany("CdoConceptMatch")
                        .HasForeignKey("ConceptOid")
                        .HasConstraintName("CDO_CONCEPT_MATCH_FK_CONC_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoConceptMatchCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_CONCEPT_MATCH_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoConceptMatchDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_CONCEPT_MATCH_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoConceptMatch", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("CDO_CONCEPT_MATCH_FK_MASTER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoConst", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptNavigation")
                        .WithMany("CdoConst")
                        .HasForeignKey("Concept")
                        .HasConstraintName("CDO_CONST_FK_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoConstCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_CONST_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoConstDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_CONST_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoConst")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_CONST_FK_ORGANIZATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoCounter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "HcpNavigation")
                        .WithMany("CdoCounter")
                        .HasForeignKey("Hcp")
                        .HasConstraintName("CDO_COUNTER_FK_HCP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoCounter")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_COUNTER_FK_ORG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoDataE", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoUri", "RefDataNavigation")
                        .WithMany("CdoDataERefDataNavigation")
                        .HasForeignKey("RefData")
                        .HasConstraintName("CDO_DATA_E_FK_DATA");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoUri", "RefMethodNavigation")
                        .WithMany("CdoDataERefMethodNavigation")
                        .HasForeignKey("RefMethod")
                        .HasConstraintName("CDO_DATA_E_FK_METHOD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoDataEDetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoDataE", "Data")
                        .WithMany("CdoDataEDetails")
                        .HasForeignKey("DataId")
                        .HasConstraintName("FK_DATA_E_DETAILS_DATA_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoDataEUsage", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoDataE", "DataO")
                        .WithMany("CdoDataEUsage")
                        .HasForeignKey("DataOid")
                        .HasConstraintName("CDO_DATA_E_USAGE_FK_DATA_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("CdoDataEUsage")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("CDO_DATA_E_USAGE_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoEhcr", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "HcpcreatedbyNavigation")
                        .WithMany("CdoEhcrHcpcreatedbyNavigation")
                        .HasForeignKey("Hcpcreatedby")
                        .HasConstraintName("CDO_EHCR_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "PatientNavigation")
                        .WithMany("CdoEhcrPatientNavigation")
                        .HasForeignKey("Patient")
                        .HasConstraintName("CDO_EHCR_FK_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoEhcrsource", "SourceNavigation")
                        .WithMany("CdoEhcr")
                        .HasForeignKey("Source")
                        .HasConstraintName("FK_CDOEHCR_SOURCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoEhcrsource", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "HcfNavigation")
                        .WithMany("CdoEhcrsource")
                        .HasForeignKey("Hcf")
                        .HasConstraintName("CDO_EHCRSOURCE_FK_HCF");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoGrant", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoGrantCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_GRANT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoGrantDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_GRANT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "GranteeNavigation")
                        .WithMany("CdoGrantGranteeNavigation")
                        .HasForeignKey("Grantee")
                        .HasConstraintName("CDO_GRANT_FK_GRANTEE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoGrant")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_GRANT_FK_ORGANIZATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "OwnerNavigation")
                        .WithMany("CdoGrantOwnerNavigation")
                        .HasForeignKey("Owner")
                        .HasConstraintName("CDO_GRANT_FK_OWNER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoLink")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_LINK_FK_ORGANIZATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkPhysunit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "PhysunitNavigation")
                        .WithMany("CdoLinkPhysunit")
                        .HasForeignKey("Physunit")
                        .HasConstraintName("CDO_LINK_PHYSUNIT_FK_PHYSUNIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkTvcontact", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "Contact")
                        .WithMany("CdoLinkTvcontact")
                        .HasForeignKey("Contactid")
                        .HasConstraintName("CDO_LINK_TVCONTACT_FK_CONTACT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("CdoLinkTvcontact")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("CDO_LINK_TVCONTACT_FK_PTNT_I");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUri", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoLinkUriCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_LINK_URI_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoLinkUriDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_LINK_URI_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoLinkUri")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_LINK_URI_FK_ORGANIZATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoUri", "UriNavigation")
                        .WithMany("CdoLinkUri")
                        .HasForeignKey("Uri")
                        .HasConstraintName("CDO_LINK_URI_FK_URI");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUriConcept", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ObjNavigation")
                        .WithMany("CdoLinkUriConcept")
                        .HasForeignKey("Obj")
                        .HasConstraintName("CDO_LINK_URI_CONCEPT_FK_OBJ");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUriOrg", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "ObjNavigation")
                        .WithMany("CdoLinkUriOrg")
                        .HasForeignKey("Obj")
                        .HasConstraintName("CDO_LINK_URI_ORG_FK_OBJ");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUriPhysunit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "ObjNavigation")
                        .WithMany("CdoLinkUriPhysunit")
                        .HasForeignKey("Obj")
                        .HasConstraintName("CDO_LINK_URI_PHYSUNIT_FK_OBJ");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoLinkUriRx", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "ObjNavigation")
                        .WithMany("CdoLinkUriRx")
                        .HasForeignKey("Obj")
                        .HasConstraintName("CDO_LINK_URI_RX_FK_OBJ");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoOrganization", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoOrganizationCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_ORGANIZATION_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoOrganizationDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_ORGANIZATION_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("InverseOrganizationNavigation")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_ORGANIZATION_FK_ORGAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoPersonImage", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "Person")
                        .WithMany("CdoPersonImage")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("CDO_PERSON_IMAGE_FK_PERSON_I");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoPhysquantity", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysquantity", "A0Navigation")
                        .WithMany("InverseA0Navigation")
                        .HasForeignKey("A0")
                        .HasConstraintName("CDO_PHYSQUANTITY_FK_A0");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysquantity", "A1Navigation")
                        .WithMany("InverseA1Navigation")
                        .HasForeignKey("A1")
                        .HasConstraintName("CDO_PHYSQUANTITY_FK_A1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysquantity", "A2Navigation")
                        .WithMany("InverseA2Navigation")
                        .HasForeignKey("A2")
                        .HasConstraintName("CDO_PHYSQUANTITY_FK_A2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysquantity", "A3Navigation")
                        .WithMany("InverseA3Navigation")
                        .HasForeignKey("A3")
                        .HasConstraintName("CDO_PHYSQUANTITY_FK_A3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysquantity", "A4Navigation")
                        .WithMany("InverseA4Navigation")
                        .HasForeignKey("A4")
                        .HasConstraintName("CDO_PHYSQUANTITY_FK_A4");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoPhysquantityCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_PHYSQUANTITY_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoPhysquantityDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_PHYSQUANTITY_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoPhysquantity")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_PHYSQUANTITY_FK_ORGAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoPhysunitCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_PHYSUNIT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoPhysunitDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_PHYSUNIT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoPhysunit")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_PHYSUNIT_FK_ORGAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysquantity", "PhysquantityNavigation")
                        .WithMany("CdoPhysunit")
                        .HasForeignKey("Physquantity")
                        .HasConstraintName("CDO_PHYSUNIT_FK_PHYSQUANTITY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "U0Navigation")
                        .WithMany("InverseU0Navigation")
                        .HasForeignKey("U0")
                        .HasConstraintName("CDO_PHYSUNIT_FK_U0");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "U1Navigation")
                        .WithMany("InverseU1Navigation")
                        .HasForeignKey("U1")
                        .HasConstraintName("CDO_PHYSUNIT_FK_U1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "U2Navigation")
                        .WithMany("InverseU2Navigation")
                        .HasForeignKey("U2")
                        .HasConstraintName("CDO_PHYSUNIT_FK_U2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "U3Navigation")
                        .WithMany("InverseU3Navigation")
                        .HasForeignKey("U3")
                        .HasConstraintName("CDO_PHYSUNIT_FK_U3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "U4Navigation")
                        .WithMany("InverseU4Navigation")
                        .HasForeignKey("U4")
                        .HasConstraintName("CDO_PHYSUNIT_FK_U4");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoPreference", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ComplexFilter", "ComplexfilterNavigation")
                        .WithMany("CdoPreference")
                        .HasForeignKey("Complexfilter")
                        .HasConstraintName("CDO_PREFERENCE_FK_COMPLEXFIL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptNavigation")
                        .WithMany("CdoPreference")
                        .HasForeignKey("Concept")
                        .HasConstraintName("CDO_PREFERENCE_FK_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "HcpNavigation")
                        .WithMany("CdoPreferenceHcpNavigation")
                        .HasForeignKey("Hcp")
                        .HasConstraintName("CDO_PREFERENCE_FK_HCP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "PatientNavigation")
                        .WithMany("CdoPreferencePatientNavigation")
                        .HasForeignKey("Patient")
                        .HasConstraintName("CDO_PREFERENCE_FK_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "PhysunitNavigation")
                        .WithMany("CdoPreference")
                        .HasForeignKey("Physunit")
                        .HasConstraintName("CDO_PREFERENCE_FK_PHYSUNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "PracticeNavigation")
                        .WithMany("CdoPreference")
                        .HasForeignKey("Practice")
                        .HasConstraintName("CDO_PREFERENCE_FK_PRACTICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "TermNavigation")
                        .WithMany("CdoPreference")
                        .HasForeignKey("Term")
                        .HasConstraintName("CDO_PREFERENCE_FK_TERM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRawdata", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoDataE", "DataENavigation")
                        .WithMany("CdoRawdata")
                        .HasForeignKey("DataE")
                        .HasConstraintName("FK_CDO_RAWDATA_DATA_E");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "TransNavigation")
                        .WithMany("CdoRawdata")
                        .HasForeignKey("Trans")
                        .HasConstraintName("FK_CDO_RAWDATA_TRANS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRolegrant", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "GranteeNavigation")
                        .WithMany("CdoRolegrant")
                        .HasForeignKey("Grantee")
                        .HasConstraintName("CDO_ROLEGRANT_FK_GRANTEE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "OwnerNavigation")
                        .WithMany("CdoRolegrant")
                        .HasForeignKey("Owner")
                        .HasConstraintName("CDO_ROLEGRANT_FK_OWNER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRx", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxcmi", "CmiO")
                        .WithMany("CdoRx")
                        .HasForeignKey("CmiOid")
                        .HasConstraintName("CDO_RX_FK_CMI_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptNavigation")
                        .WithMany("CdoRxConceptNavigation")
                        .HasForeignKey("Concept")
                        .HasConstraintName("CDO_RX_FK_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept2Navigation")
                        .WithMany("CdoRxConcept2Navigation")
                        .HasForeignKey("Concept2")
                        .HasConstraintName("CDO_RX_FK_CONCEPT2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept3Navigation")
                        .WithMany("CdoRxConcept3Navigation")
                        .HasForeignKey("Concept3")
                        .HasConstraintName("CDO_RX_FK_CONCEPT3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept4Navigation")
                        .WithMany("CdoRxConcept4Navigation")
                        .HasForeignKey("Concept4")
                        .HasConstraintName("CDO_RX_FK_CONCEPT4");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_RX_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_RX_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxfpi", "Fpio")
                        .WithMany("CdoRx")
                        .HasForeignKey("Fpioid")
                        .HasConstraintName("CDO_RX_FK_FPIOID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoRxOrganizationNavigation")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_RX_FK_ORGANIZATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrgrefNavigation")
                        .WithMany("CdoRxOrgrefNavigation")
                        .HasForeignKey("Orgref")
                        .HasConstraintName("CDO_RX_FK_ORGREF");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxsystem", "RxsystemNavigation")
                        .WithMany("CdoRx")
                        .HasForeignKey("Rxsystem")
                        .HasConstraintName("CDO_RX_FK_RXSYS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxAuthorityGroupLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxAuthorityGroupLinkCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDORXAUTHGRLINK_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxAuthorityGroupLinkDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDORXAUTHGRLINK_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "FormTemplate")
                        .WithMany("CdoRxAuthorityGroupLink")
                        .HasForeignKey("FormTemplateId")
                        .HasConstraintName("CDORXAUTHGRLINK_FK_FORM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "Group")
                        .WithMany("CdoRxAuthorityGroupLink")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("CDORXAUTHGRLINK_FK_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "LetterTemplate")
                        .WithMany("CdoRxAuthorityGroupLink")
                        .HasForeignKey("LetterTemplateId")
                        .HasConstraintName("CDORXAUTHGRLINK_FK_LETTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoRxAuthorityGroupLink")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDORXAUTHGRLINK_FK_ORG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxcalcindication", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RxciCreatedpppu")
                        .WithMany("CdoRxcalcindicationRxciCreatedpppu")
                        .HasForeignKey("RxciCreatedpppuid")
                        .HasConstraintName("FK_RXCALCINDICATION_CREATED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RxciModifiedpppu")
                        .WithMany("CdoRxcalcindicationRxciModifiedpppu")
                        .HasForeignKey("RxciModifiedpppuid")
                        .HasConstraintName("FK_RXCALCINDICATION_MODIFIED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxciPreparationNavigation")
                        .WithMany("CdoRxcalcindication")
                        .HasForeignKey("RxciPreparation")
                        .HasConstraintName("RXCALCINDICATION_FK_RX");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxcmidetail", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxcmi", "CmiO")
                        .WithMany("CdoRxcmidetail")
                        .HasForeignKey("CmiOid")
                        .HasConstraintName("CDO_RXCMIDETAIL_FK_CMI_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxConcept", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptO")
                        .WithMany("CdoRxConceptConceptO")
                        .HasForeignKey("ConceptOid")
                        .HasConstraintName("CDO_RX_CONCEPT_FK_CONCEPT_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxConceptCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_RX_CONCEPT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxConceptDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_RX_CONCEPT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxConcept", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("CDO_RX_CONCEPT_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrgRefNavigation")
                        .WithMany("CdoRxConceptOrgRefNavigation")
                        .HasForeignKey("OrgRef")
                        .HasConstraintName("CDO_RX_CONCEPT_FK_ORG_REF");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoRxConceptOrganizationNavigation")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_RX_CONCEPT_FK_ORG");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "QualifierO")
                        .WithMany("CdoRxConceptQualifierO")
                        .HasForeignKey("QualifierOid")
                        .HasConstraintName("CDO_RX_CONCEPT_FK_QUAL_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxConceptSet", "SetO")
                        .WithMany("CdoRxConcept")
                        .HasForeignKey("SetOid")
                        .HasConstraintName("CDO_RX_CONCEPT_FK_SET_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxConceptSetLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxConceptSet", "ConceptSetO")
                        .WithMany("CdoRxConceptSetLink")
                        .HasForeignKey("ConceptSetOid")
                        .HasConstraintName("CDO_RX_CONCSETLNK_FK_SETOID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxConceptSetLinkCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_RX_CONCSETLNK_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxConceptSetLinkDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_RX_CONCSETLNK_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxConceptSetLink", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("CDO_RX_CONCSETLNK_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxO")
                        .WithMany("CdoRxConceptSetLink")
                        .HasForeignKey("RxOid")
                        .HasConstraintName("CDO_RX_CONCSETLNK_FK_RX_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxfpiGroup", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxfpi", "O")
                        .WithOne("CdoRxfpiGroup")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.CdoRxfpiGroup", "Oid")
                        .HasConstraintName("CDO_RXFPI_GROUP_FK_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxfpiPreparation", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxfpi", "O")
                        .WithOne("CdoRxfpiPreparation")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.CdoRxfpiPreparation", "Oid")
                        .HasConstraintName("CDO_RXFPI_PREPARATION_FK_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxfpiProductident", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxfpiColor", "Coloro")
                        .WithMany("CdoRxfpiProductident")
                        .HasForeignKey("Coloroid")
                        .HasConstraintName("RXFPI_PRODUCTIDENT_FK_COLOR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxfpiPreparation", "Fpipreparationo")
                        .WithMany("CdoRxfpiProductident")
                        .HasForeignKey("Fpipreparationoid")
                        .HasConstraintName("CDO_RXFPI_PID_FK_PREPOID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxfpiImage", "Imageo")
                        .WithMany("CdoRxfpiProductident")
                        .HasForeignKey("Imageoid")
                        .HasConstraintName("RXFPI_PRODUCT_FK_IMAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxinstr", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "AgecategoryNavigation")
                        .WithMany("CdoRxinstrAgecategoryNavigation")
                        .HasForeignKey("Agecategory")
                        .HasConstraintName("CDO_RXINSTR_FK_AGE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxinstrCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_RXINSTR_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxinstrDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_RXINSTR_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "DoseunitNavigation")
                        .WithMany("CdoRxinstrDoseunitNavigation")
                        .HasForeignKey("Doseunit")
                        .HasConstraintName("CDO_RXINSTR_FK_DOSEUNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "FrequnitNavigation")
                        .WithMany("CdoRxinstrFrequnitNavigation")
                        .HasForeignKey("Frequnit")
                        .HasConstraintName("CDO_RXINSTR_FK_FREQUNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "MitteunitNavigation")
                        .WithMany("CdoRxinstrMitteunitNavigation")
                        .HasForeignKey("Mitteunit")
                        .HasConstraintName("CDO_RXINSTR_FK_MITTEUNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxinstrNote", "Note")
                        .WithMany("CdoRxinstr")
                        .HasForeignKey("NoteId")
                        .HasConstraintName("CDO_RXINSTR_FK_NOTE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoRxinstr")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_RXINSTR_FK_ORGANIZATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxinstr", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("CDO_RXINSTR_FK_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "QualifierNavigation")
                        .WithMany("CdoRxinstrQualifierNavigation")
                        .HasForeignKey("Qualifier")
                        .HasConstraintName("CDO_RXINSTR_FK_QUALIFIER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxpackageNavigation")
                        .WithMany("CdoRxinstrRxpackageNavigation")
                        .HasForeignKey("Rxpackage")
                        .HasConstraintName("CDO_RXINSTR_FK_RXPACK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxsourceNavigation")
                        .WithMany("CdoRxinstrRxsourceNavigation")
                        .HasForeignKey("Rxsource")
                        .HasConstraintName("CDO_RXINSTR_FK_RXSOURCE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxtotakeNavigation")
                        .WithMany("CdoRxinstrRxtotakeNavigation")
                        .HasForeignKey("Rxtotake")
                        .HasConstraintName("CDO_RXINSTR_FK_RXTOTAKE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxinstrNote", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxinstrNoteCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_RXINSTR_NOTE_FK_CREATEDB");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxinstrNoteDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_RXINSTR_NOTE_FK_DELETEDB");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxinstrPreferred", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuO")
                        .WithMany("CdoRxinstrPreferred")
                        .HasForeignKey("PppuOid")
                        .HasConstraintName("CDO_RXINSTR_PREFERRED_FK_PPP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxinstr", "RxinstrO")
                        .WithMany("CdoRxinstrPreferred")
                        .HasForeignKey("RxinstrOid")
                        .HasConstraintName("CDO_RXINSTR_PREFERRED_FK_RX");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxlink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptNavigation")
                        .WithMany("CdoRxlinkConceptNavigation")
                        .HasForeignKey("Concept")
                        .HasConstraintName("CDO_RXLINK_FK_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept2Navigation")
                        .WithMany("CdoRxlinkConcept2Navigation")
                        .HasForeignKey("Concept2")
                        .HasConstraintName("CDO_RXLINK_FK_CONCEPT2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxlinkCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_RXLINK_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxlinkDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_RXLINK_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoRxlinkOrganizationNavigation")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_RXLINK_FK_ORGANIZATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrgrefNavigation")
                        .WithMany("CdoRxlinkOrgrefNavigation")
                        .HasForeignKey("Orgref")
                        .HasConstraintName("CDO_RXLINK_FK_ORGREF");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxsourceNavigation")
                        .WithMany("CdoRxlinkRxsourceNavigation")
                        .HasForeignKey("Rxsource")
                        .HasConstraintName("CDO_RXLINK_FK_RXSOURCE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxtargetNavigation")
                        .WithMany("CdoRxlinkRxtargetNavigation")
                        .HasForeignKey("Rxtarget")
                        .HasConstraintName("CDO_RXLINK_FK_RXTARGET");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxlinkex", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoRxlinkex")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_RXLINKEX_FK_ORG");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxsourceNavigation")
                        .WithMany("CdoRxlinkex")
                        .HasForeignKey("Rxsource")
                        .HasConstraintName("CDO_RXLINKEX_FK_RXSOURCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxmidcoursecorrection", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "DailyDoseUnitNavigation")
                        .WithMany("CdoRxmidcoursecorrectionDailyDoseUnitNavigation")
                        .HasForeignKey("DailyDoseUnit")
                        .HasConstraintName("FK_MIDCOURSE_DAILY_DOSE_UNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "MccDosageunitO")
                        .WithMany("CdoRxmidcoursecorrectionMccDosageunitO")
                        .HasForeignKey("MccDosageunitOid")
                        .HasConstraintName("CDO_RXMIDCOURSECORR_FK_2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "MccFrequnitO")
                        .WithMany("CdoRxmidcoursecorrectionMccFrequnitO")
                        .HasForeignKey("MccFrequnitOid")
                        .HasConstraintName("CDO_RXMIDCOURSECORR_FK_3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxinstrNote", "MccNoteO")
                        .WithMany("CdoRxmidcoursecorrection")
                        .HasForeignKey("MccNoteOid")
                        .HasConstraintName("CDO_RXMIDCOURSECORR_FK_4");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "MccRxprescrO")
                        .WithMany("CdoRxmidcoursecorrection")
                        .HasForeignKey("MccRxprescrOid")
                        .HasConstraintName("CDO_RXMIDCOURSECORR_FK_1");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxPreferred", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuO")
                        .WithMany("CdoRxPreferred")
                        .HasForeignKey("PppuOid")
                        .HasConstraintName("CDO_RX_PREFERRED_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxO")
                        .WithMany("CdoRxPreferred")
                        .HasForeignKey("RxOid")
                        .HasConstraintName("CDO_RX_PREFERRED_FK_RX");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "AuthForm")
                        .WithMany("CdoRxprescrAuthForm")
                        .HasForeignKey("AuthFormId")
                        .HasConstraintName("FK_CDO_RXPRESCR_AUTH_FORM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "AuthLetter")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("AuthLetterId")
                        .HasConstraintName("FK_CDO_RXPRESCR_AUTH_LET");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "ContactDscd")
                        .WithMany("CdoRxprescrContactDscd")
                        .HasForeignKey("ContactDscdId")
                        .HasConstraintName("CDO_RXPRESCR_FK_CONT_DSCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxprescrCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_RXPRESCR_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "DailyDoseUnitNavigation")
                        .WithMany("CdoRxprescrDailyDoseUnitNavigation")
                        .HasForeignKey("DailyDoseUnit")
                        .HasConstraintName("FK_RXPRESCR_DAILY_DOSE_UNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxprescrDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_RXPRESCR_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "DoseunitNavigation")
                        .WithMany("CdoRxprescrDoseunitNavigation")
                        .HasForeignKey("Doseunit")
                        .HasConstraintName("CDO_RXPRESCR_FK_DOSEUNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Dscd")
                        .WithMany("CdoRxprescrDscd")
                        .HasForeignKey("DscdId")
                        .HasConstraintName("CDO_RXPRESCR_FK_DXCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoEhcr", "EhcrNavigation")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("Ehcr")
                        .HasConstraintName("CDO_RXPRESCR_FK_EHCR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.EprescriptionLog", "EprscrLog")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("EprscrLogId")
                        .HasConstraintName("FK_RXPRESCR_EPRSCR_LOG");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExternalEntity", "ExternalEntity")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("ExternalEntityId")
                        .HasConstraintName("FK_RXPRESCR_EXTL_ENTITY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "FirstcreatedbyNavigation")
                        .WithMany("CdoRxprescrFirstcreatedbyNavigation")
                        .HasForeignKey("Firstcreatedby")
                        .HasConstraintName("FK_FIRSTCREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "FrequnitNavigation")
                        .WithMany("CdoRxprescrFrequnitNavigation")
                        .HasForeignKey("Frequnit")
                        .HasConstraintName("CDO_RXPRESCR_FK_FREQUNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "HcpANavigation")
                        .WithMany("CdoRxprescrHcpANavigation")
                        .HasForeignKey("HcpA")
                        .HasConstraintName("CDO_PRESCR_FK_HCP_A");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "LastPrintedByNavigation")
                        .WithMany("CdoRxprescrLastPrintedByNavigation")
                        .HasForeignKey("LastPrintedBy")
                        .HasConstraintName("FK_RXPRESCR_LAST_PRINTED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "MitteunitNavigation")
                        .WithMany("CdoRxprescrMitteunitNavigation")
                        .HasForeignKey("Mitteunit")
                        .HasConstraintName("CDO_RXPRESCR_FK_MITTEUNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxinstrNote", "Note")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("NoteId")
                        .HasConstraintName("CDO_RXPRESCR_FK_NOTE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "ObsNavigation")
                        .WithMany("CdoRxprescrObsNavigation")
                        .HasForeignKey("Obs")
                        .HasConstraintName("CDO_RXPRESCR_FK_OBS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_RXPRESCR_FK_ORG");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientproblem", "Papr")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("PaprId")
                        .HasConstraintName("CDO_RXPRESCR_FK_PROBLEM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("CDO_RXPRESCR_FK_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("CDO_RXPRESCR_FK_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("CDO_RXPRESCR_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "Provider")
                        .WithMany("CdoRxprescrProvider")
                        .HasForeignKey("Providerid")
                        .HasConstraintName("FK_CDO_RXPRESCR_PROVIDERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RouteShortcode")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("RouteShortcodeId")
                        .HasConstraintName("FK_RXPRESCR_ROUTE_SHORTCODE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxpackageNavigation")
                        .WithMany("CdoRxprescrRxpackageNavigation")
                        .HasForeignKey("Rxpackage")
                        .HasConstraintName("CDO_RXPRESCR_FK_RXPACK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxsourceNavigation")
                        .WithMany("CdoRxprescrRxsourceNavigation")
                        .HasForeignKey("Rxsource")
                        .HasConstraintName("CDO_RXPRESCR_FK_RXSOURCE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "RxtotakeNavigation")
                        .WithMany("CdoRxprescrRxtotakeNavigation")
                        .HasForeignKey("Rxtotake")
                        .HasConstraintName("CDO_RXPRESCR_FK_RXTOTAKE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxSchedules", "SrcRxschedule")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("SrcRxscheduleId")
                        .HasConstraintName("FK_RXPRESCR_RXSCHEDULES");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "TransNavigation")
                        .WithMany("CdoRxprescr")
                        .HasForeignKey("Trans")
                        .HasConstraintName("CDO_RXPRESCR_FK_TRANS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxprescrDisconInfo", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Reason")
                        .WithMany("CdoRxprescrDisconInfo")
                        .HasForeignKey("ReasonId")
                        .HasConstraintName("RXPRESCR_DISC_INF_FK_SHORTCO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "Rxprescr")
                        .WithMany("CdoRxprescrDisconInfo")
                        .HasForeignKey("RxprescrId")
                        .HasConstraintName("RXPRESCR_DISC_INF_FK_RXPRESC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxprescrlink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxprescrlinkCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RXPRESCRLINK_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxprescrlinkDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RXPRESCRLINK_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "Source")
                        .WithMany("CdoRxprescrlinkSource")
                        .HasForeignKey("Sourceid")
                        .HasConstraintName("PK_CDO_RXPRESCRLINK_SOURCEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "Target")
                        .WithMany("CdoRxprescrlinkTarget")
                        .HasForeignKey("Targetid")
                        .HasConstraintName("PK_CDO_RXPRESCRLINK_TARGETID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoRxsystem", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoRxsystemCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_RXSYS_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoRxsystemDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_RXSYS_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoRxsystem")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_RXSYS_FK_ORGANIZATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTemplateLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "CtlForm")
                        .WithMany("CdoTemplateLinks")
                        .HasForeignKey("CtlFormId")
                        .HasConstraintName("CTL_FORM_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermset", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "CopyrightsNavigation")
                        .WithMany("CdoTermset")
                        .HasForeignKey("Copyrights")
                        .HasConstraintName("FK_TERMSET_COPYRIGHTS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoTermset")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_TERMSET_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoTermset")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_TERMSET_FK_ORGAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoTermsetConcept")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_TC_FK_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoTermsetConcept")
                        .HasForeignKey("Organization")
                        .HasConstraintName("TERMSET_CONCEPT_FK_ORGAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "PreftermNavigation")
                        .WithMany("CdoTermsetConcept")
                        .HasForeignKey("Prefterm")
                        .HasConstraintName("TERMSET_CONCEPT_FK_TERM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermset", "TermsetNavigation")
                        .WithMany("CdoTermsetConcept")
                        .HasForeignKey("Termset")
                        .HasConstraintName("CDO_CONCEPT_FK_TERMSET");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetCrossref", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept1")
                        .WithMany("CdoTermsetCrossrefConcept1")
                        .HasForeignKey("Concept1Id")
                        .HasConstraintName("CDO_TS_CROSS_FK_CONCEPT1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept2")
                        .WithMany("CdoTermsetCrossrefConcept2")
                        .HasForeignKey("Concept2Id")
                        .HasConstraintName("CDO_TS_CROSS_FK_CONCEPT2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoTermsetCrossref")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_TCR_FK_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoTermsetCrossref")
                        .HasForeignKey("Organization")
                        .HasConstraintName("TERMSET_CROSSREF_FK_ORGAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetLinkcc", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoTermsetLinkcc")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_TLCC_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoTermsetLinkcc")
                        .HasForeignKey("Organization")
                        .HasConstraintName("TERMSET_LINKCC_FK_ORGAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ParentNavigation")
                        .WithMany("CdoTermsetLinkccParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("CDO_TSLINKCC_FK_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "SourceNavigation")
                        .WithMany("CdoTermsetLinkccSourceNavigation")
                        .HasForeignKey("Source")
                        .HasConstraintName("CDO_TSLINKCC_FK_SOURCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetLinktc", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoTermsetLinktc")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_TLTC_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoTermsetLinktc")
                        .HasForeignKey("Organization")
                        .HasConstraintName("TERMSET_LINKTC_FK_ORGAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ParentNavigation")
                        .WithMany("CdoTermsetLinktc")
                        .HasForeignKey("Parent")
                        .HasConstraintName("CDO_TSLINKTC_FK_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "SourceNavigation")
                        .WithMany("CdoTermsetLinktc")
                        .HasForeignKey("Source")
                        .HasConstraintName("CDO_TSLINKTC_FK_SOURCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoTermsetTerm")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_TERMSET_TERM_FK_CREATEDB");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoTermsetTerm")
                        .HasForeignKey("Organization")
                        .HasConstraintName("TERMSET_TERM_FK_ORGAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermset", "TermsetNavigation")
                        .WithMany("CdoTermsetTerm")
                        .HasForeignKey("Termset")
                        .HasConstraintName("CDO_TERM_FK_TERMSET");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTrans", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "AqHcpAssignedNavigation")
                        .WithMany("CdoTransAqHcpAssignedNavigation")
                        .HasForeignKey("AqHcpAssigned")
                        .HasConstraintName("CDO_TRANS_FK_AQ_HCP_ASSIGNED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "AqHcpAuthorizedNavigation")
                        .WithMany("CdoTransAqHcpAuthorizedNavigation")
                        .HasForeignKey("AqHcpAuthorized")
                        .HasConstraintName("CDO_TRANS_FK_AQ_HCP_AUTHORIZ");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "AqSourceNavigation")
                        .WithMany("CdoTransAqSourceNavigation")
                        .HasForeignKey("AqSource")
                        .HasConstraintName("CDO_TRANS_FK_AQ_SOURCE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "Attendance")
                        .WithMany("CdoTrans")
                        .HasForeignKey("AttendanceId")
                        .HasConstraintName("CDO_TRANS_FK_APPOINTMENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "BcaseO")
                        .WithMany("CdoTrans")
                        .HasForeignKey("BcaseOid")
                        .HasConstraintName("CDO_TRANS_FK_BCASE_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseService", "CaseService")
                        .WithMany("CdoTrans")
                        .HasForeignKey("CaseServiceId")
                        .HasConstraintName("FK_CDO_TRANS_CS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ContactType")
                        .WithMany("CdoTransContactType")
                        .HasForeignKey("ContactTypeId")
                        .HasConstraintName("CDO_TRANS_FK_CONTACT_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoTransCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_TRANS_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoTransDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_TRANS_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DocCategory")
                        .WithMany("CdoTransDocCategory")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("CDO_TRANS_DOC_CATEGORY_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoEhcr", "EhcrNavigation")
                        .WithMany("CdoTrans")
                        .HasForeignKey("Ehcr")
                        .HasConstraintName("CDO_TRANS_FK_EHCR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "EncounterTypeNavigation")
                        .WithMany("CdoTransEncounterTypeNavigation")
                        .HasForeignKey("EncounterType")
                        .HasConstraintName("FK_CDOTRANS_ENCOUNTER_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "FirstcreatedbyNavigation")
                        .WithMany("CdoTransFirstcreatedbyNavigation")
                        .HasForeignKey("Firstcreatedby")
                        .HasConstraintName("FK_CDO_TRANS_FIRSTCREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.GroupSession", "GroupSession")
                        .WithMany("CdoTrans")
                        .HasForeignKey("GroupSessionId")
                        .HasConstraintName("FK_GROUP_SESSION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Location")
                        .WithMany("CdoTransLocation")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_CDOTRANS_LOCATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoTransOrganizationNavigation")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_TRANS_FK_ORGANIZATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("CdoTransPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("CDO_TRANS_FK_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("CdoTransPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("CDO_TRANS_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "Ref2O")
                        .WithMany("CdoTransRef2O")
                        .HasForeignKey("Ref2Oid")
                        .HasConstraintName("CDO_TRANS_FK_REF2_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "RoleO")
                        .WithMany("CdoTrans")
                        .HasForeignKey("RoleOid")
                        .HasConstraintName("CDO_TRANS_FK_ROLE_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("CdoTrans")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_CDOTRANS_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTransdata", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "CollectionNavigation")
                        .WithMany("InverseCollectionNavigation")
                        .HasForeignKey("Collection")
                        .HasConstraintName("CDO_TRANSDATA_FK_COLLECTION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptNavigation")
                        .WithMany("CdoTransdataConceptNavigation")
                        .HasForeignKey("Concept")
                        .HasConstraintName("CDO_TRANSDATA_FK_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptvalueNavigation")
                        .WithMany("CdoTransdataConceptvalueNavigation")
                        .HasForeignKey("Conceptvalue")
                        .HasConstraintName("CDO_TRANSDATA_FK_CONCEPTVALU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoDataE", "DataENavigation")
                        .WithMany("CdoTransdata")
                        .HasForeignKey("DataE")
                        .HasConstraintName("CDO_TRANSDATA_FK_DATA_E");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "InfoproviderNavigation")
                        .WithMany("CdoTransdata")
                        .HasForeignKey("Infoprovider")
                        .HasConstraintName("CDO_TRANSDATA_FK_INFOPROVIDE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "ObsrefNavigation")
                        .WithMany("InverseObsrefNavigation")
                        .HasForeignKey("Obsref")
                        .HasConstraintName("CDO_TRANSDATA_FK_OBSREF");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("CdoTransdata")
                        .HasForeignKey("PosId")
                        .HasConstraintName("CDO_TRANSDATA_FK_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "QunitNavigation")
                        .WithMany("CdoTransdataQunitNavigation")
                        .HasForeignKey("Qunit")
                        .HasConstraintName("CDO_TRANSDATA_FK_QUNIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "Qunit2Navigation")
                        .WithMany("CdoTransdataQunit2Navigation")
                        .HasForeignKey("Qunit2")
                        .HasConstraintName("CDO_TRANSDATA_FK_QUNIT2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "TermNavigation")
                        .WithMany("CdoTransdata")
                        .HasForeignKey("Term")
                        .HasConstraintName("CDO_TRANSDATA_FK_TERM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "TransNavigation")
                        .WithMany("CdoTransdata")
                        .HasForeignKey("Trans")
                        .HasConstraintName("CDO_TRANSDATA_FK_TRANS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTransdatadetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "FormReprBody")
                        .WithMany("CdoTransdatadetails")
                        .HasForeignKey("FormReprBodyId")
                        .HasConstraintName("CDO_TDD_FK_FORM_REPR_BODY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "FormTypeNavigation")
                        .WithMany("CdoTransdatadetails")
                        .HasForeignKey("FormType")
                        .HasConstraintName("CDO_TRDATDET_FK_FORM_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "TransdataNavigation")
                        .WithMany("CdoTransdatadetails")
                        .HasForeignKey("Transdata")
                        .HasConstraintName("CDO_TRANSDATADETAILS_FK_TRAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTransPppu", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TrppPppuNavigation")
                        .WithMany("CdoTransPppu")
                        .HasForeignKey("TrppPppu")
                        .HasConstraintName("CDO_TRANS_PPPU_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "TrppTransNavigation")
                        .WithMany("CdoTransPppu")
                        .HasForeignKey("TrppTrans")
                        .HasConstraintName("CDO_TRANS_PPPU_FK_TRANS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoTransProvInterestLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CopiedtoNavigation")
                        .WithMany("CdoTransProvInterestLinkCopiedtoNavigation")
                        .HasForeignKey("Copiedto")
                        .HasConstraintName("CDOTRANSPIL_FK_COPIEDTO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoTransProvInterestLinkCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDOTRANSPRVINTLNK_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("CdoTransProvInterestLink")
                        .HasForeignKey("PosId")
                        .HasConstraintName("CDOTRANSPIL_FK_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "SignedbyNavigation")
                        .WithMany("CdoTransProvInterestLinkSignedbyNavigation")
                        .HasForeignKey("Signedby")
                        .HasConstraintName("CDOTRANSPIL_FK_SIGNEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Transo")
                        .WithMany("CdoTransProvInterestLink")
                        .HasForeignKey("Transoid")
                        .HasConstraintName("CDOTRANSPIL_FK_TRANS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CdoUri", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CdoUriCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CDO_URI_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CdoUriDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CDO_URI_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("CdoUri")
                        .HasForeignKey("Organization")
                        .HasConstraintName("CDO_URI_FK_ORGANIZATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ComplexFilter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "CmflService")
                        .WithMany("ComplexFilter")
                        .HasForeignKey("CmflServiceId")
                        .HasConstraintName("CMFL_SERVICE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept")
                        .WithMany("ComplexFilterConcept")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("FK_COMPLEX_FILTER_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Diagnose")
                        .WithMany("ComplexFilter")
                        .HasForeignKey("DiagnoseId")
                        .HasConstraintName("FK_COMFILTER_DIAGNOSE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "DxConcept")
                        .WithMany("ComplexFilterDxConcept")
                        .HasForeignKey("DxConceptId")
                        .HasConstraintName("FK_CF_DX_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FindObjects", "FindObjectO")
                        .WithMany("ComplexFilter")
                        .HasForeignKey("FindObjectOid")
                        .HasConstraintName("COMP_FILTER_FK_FIND_OBJECT_O");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermset", "Termset")
                        .WithMany("ComplexFilter")
                        .HasForeignKey("TermsetId")
                        .HasConstraintName("FK_COMPLEX_FILTER_TERMSET_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ConfirmedLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "MainPatient")
                        .WithMany("ConfirmedLogMainPatient")
                        .HasForeignKey("MainPatientId")
                        .HasConstraintName("CONFIRMED_LOG_FK_MAIN_PATIEN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Method")
                        .WithMany("ConfirmedLog")
                        .HasForeignKey("MethodId")
                        .HasConstraintName("CONFIRMED_LOG_FK_METHOD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("ConfirmedLogPatient")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("CONFIRMED_LOG_FK_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "User")
                        .WithMany("ConfirmedLogUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("CONFIRMED_LOG_FK_USER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Usualdr")
                        .WithMany("ConfirmedLogUsualdr")
                        .HasForeignKey("UsualdrId")
                        .HasConstraintName("CONFIRMED_LOG_FK_USUALDR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ContactActionLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "CoalCase")
                        .WithMany("ContactActionLink")
                        .HasForeignKey("CoalCaseid")
                        .HasConstraintName("FK_COAL_CASEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "CoalCntcO")
                        .WithMany("ContactActionLink")
                        .HasForeignKey("CoalCntcOid")
                        .HasConstraintName("CAL_FK_CNTC_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactionline", "CoalInvoiceO")
                        .WithMany("ContactActionLink")
                        .HasForeignKey("CoalInvoiceOid")
                        .HasConstraintName("COAL_FK_INVOICE_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "CoalParentServiceO")
                        .WithMany("ContactActionLinkCoalParentServiceO")
                        .HasForeignKey("CoalParentServiceOid")
                        .HasConstraintName("COAL_FK_PARENT_SERVICE_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CoalPatientNavigation")
                        .WithMany("ContactActionLink")
                        .HasForeignKey("CoalPatient")
                        .HasConstraintName("COAL_PATIENT_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CoalPosNavigation")
                        .WithMany("ContactActionLinkCoalPosNavigation")
                        .HasForeignKey("CoalPos")
                        .HasConstraintName("COAL_POS_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CoalProviderNavigation")
                        .WithMany("ContactActionLinkCoalProviderNavigation")
                        .HasForeignKey("CoalProvider")
                        .HasConstraintName("COAL_PROVIDER_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "CoalQuote")
                        .WithMany("ContactActionLink")
                        .HasForeignKey("CoalQuoteId")
                        .HasConstraintName("FK_CAL_QUOTEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "CoalRateNavigation")
                        .WithMany("ContactActionLink")
                        .HasForeignKey("CoalRate")
                        .HasConstraintName("CONTACT_ACTION_LINK_FK_RATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "CoalServiceO")
                        .WithMany("ContactActionLinkCoalServiceO")
                        .HasForeignKey("CoalServiceOid")
                        .HasConstraintName("COAL_FK_SERVICE_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("ContactActionLinkCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("ACTION_LINK_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("ContactActionLinkDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("ACTION_LINK_FK_DELETEDBY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ContactDetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("ContactDetails")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("CONTACT_DETAILS_FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseService", "CaseService")
                        .WithMany("ContactDetails")
                        .HasForeignKey("CaseServiceId")
                        .HasConstraintName("FK_CONTACT_DETAILS_CS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "ContactForm")
                        .WithMany("ContactDetailsContactForm")
                        .HasForeignKey("ContactFormId")
                        .HasConstraintName("CONTACT_DETAILS_FK_FORM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "Contact")
                        .WithMany("ContactDetailsContact")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("CONTACT_DETAILS_FK_CONTACT_I");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("ContactDetailsCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CONTACT_DETAILS_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("ContactDetailsDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CONTACT_DETAILS_FK_DELETEDBY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CrossMacroPartitionLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PartitionBusiness", "CmplPartition")
                        .WithMany("CrossMacroPartitionLink")
                        .HasForeignKey("CmplPartitionId")
                        .HasConstraintName("FK_CMPL_PARTITION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CrossMacroPartitionLinkCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CMPL__FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CrossMacroPartitionLinkDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CMPL__FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CrossMacroPartitionLink", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("CMPL__FK_MASTER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CrossPartitionMacro", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "CpmMacroBlob")
                        .WithMany("CrossPartitionMacro")
                        .HasForeignKey("CpmMacroBlobId")
                        .HasConstraintName("CPM_FK_MACRO_BLOB_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("CrossPartitionMacroCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("CPM__FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("CrossPartitionMacroDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("CPM__FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CrossPartitionMacro", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("CPM__FK_MASTER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.CrossPartitionMacroAudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CrossPartitionMacro", "CpmaMacro")
                        .WithMany("CrossPartitionMacroAudit")
                        .HasForeignKey("CpmaMacroId")
                        .HasConstraintName("FK_CMPA_MACRO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CpmaPatient")
                        .WithMany("CrossPartitionMacroAudit")
                        .HasForeignKey("CpmaPatientId")
                        .HasConstraintName("FK_CMPA_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CpmaProvider")
                        .WithMany("CrossPartitionMacroAudit")
                        .HasForeignKey("CpmaProviderId")
                        .HasConstraintName("FK_CMPA_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PartitionBusiness", "CpmaRunningPartition")
                        .WithMany("CrossPartitionMacroAudit")
                        .HasForeignKey("CpmaRunningPartitionId")
                        .HasConstraintName("FK_CMPA_PARTITION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DataImportLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScheduledTask", "ScheduledTask")
                        .WithMany("DataImportLog")
                        .HasForeignKey("ScheduledTaskId")
                        .HasConstraintName("FK_DILOG_SCHEDULED_TASK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DataImportLogFile", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DataImportLog", "DataImportLog")
                        .WithMany("DataImportLogFile")
                        .HasForeignKey("DataImportLogId")
                        .HasConstraintName("FK_DILOGFILE_LOGID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FtpFile", "FtpFile")
                        .WithMany("DataImportLogFile")
                        .HasForeignKey("FtpFileId")
                        .HasConstraintName("FK_DILOGFILE_FTPFILEID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DataOutputLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DolUser")
                        .WithMany("DataOutputLog")
                        .HasForeignKey("DolUserId")
                        .HasConstraintName("FK_DATA_OUTPUT_LOG_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DbReadOnlyLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "User")
                        .WithMany("DbReadOnlyLog")
                        .HasForeignKey("Userid")
                        .HasConstraintName("DB_READ_ONLY_LOG_FK_USER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DeployedOfflineMessage", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DeployedOfflineMessage", "DomAcknowledgeToNavigation")
                        .WithMany("InverseDomAcknowledgeToNavigation")
                        .HasForeignKey("DomAcknowledgeTo")
                        .HasConstraintName("FK_DOM_ACKNOWLEDGE_TO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DeployedOfflineSession", "DomSession")
                        .WithMany("DeployedOfflineMessage")
                        .HasForeignKey("DomSessionId")
                        .HasConstraintName("FK_DOM_SESSION_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DeployedOfflineMessagePtnt", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DeployedOfflineMessage", "DompMessage")
                        .WithMany("DeployedOfflineMessagePtnt")
                        .HasForeignKey("DompMessageId")
                        .HasConstraintName("FK_DOMP_MESSAGE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "DompPatient")
                        .WithMany("DeployedOfflineMessagePtnt")
                        .HasForeignKey("DompPatientId")
                        .HasConstraintName("FK_DOMP_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DeployedOfflineSession", "DompSession")
                        .WithMany("DeployedOfflineMessagePtnt")
                        .HasForeignKey("DompSessionId")
                        .HasConstraintName("FK_DOMP_SESSION_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DeployedOfflinePatient", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "DopPatient")
                        .WithMany("DeployedOfflinePatient")
                        .HasForeignKey("DopPatientId")
                        .HasConstraintName("FK_DOP_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DeployedOfflineSession", "DopSession")
                        .WithMany("DeployedOfflinePatient")
                        .HasForeignKey("DopSessionId")
                        .HasConstraintName("FK_DOP_SESSION_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Deposits", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("DepositsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("DEPOSITS_FK_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Depositer")
                        .WithMany("DepositsDepositer")
                        .HasForeignKey("DepositerId")
                        .HasConstraintName("DEPOSITS_FK_DEPOSITER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ModifiedByNavigation")
                        .WithMany("DepositsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("DEPOSITS_FK_MODIFIED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("DepositsPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("DEPOSITS_FK_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("DepositsProvider")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("DEPOSITS_FK_PROVIDER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DiagnosesForCase", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("DiagnosesForCase")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_DIAG_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Diagnose")
                        .WithMany("DiagnosesForCase")
                        .HasForeignKey("DiagnoseId")
                        .HasConstraintName("FK_DIAG_DIAGNOSE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("DiagnosesForCase")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_DIAG_PROVIDER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DictationHandler", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DichHandlerNavigation")
                        .WithMany("DictationHandlerDichHandlerNavigation")
                        .HasForeignKey("DichHandler")
                        .HasConstraintName("DICT_HAND_FK_HANDLER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DichProviderNavigation")
                        .WithMany("DictationHandlerDichProviderNavigation")
                        .HasForeignKey("DichProvider")
                        .HasConstraintName("DICT_HAND_FK_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DichTypeNavigation")
                        .WithMany("DictationHandler")
                        .HasForeignKey("DichType")
                        .HasConstraintName("DICT_HAND_FK_TYPE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Dictations", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "DicPatientNavigation")
                        .WithMany("Dictations")
                        .HasForeignKey("DicPatient")
                        .HasConstraintName("DICTATION_FK_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DicProviderNavigation")
                        .WithMany("Dictations")
                        .HasForeignKey("DicProvider")
                        .HasConstraintName("DICTATIONS_FK_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DicTypeNavigation")
                        .WithMany("Dictations")
                        .HasForeignKey("DicType")
                        .HasConstraintName("DICTATIONS_FK_TYPE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Diseasecode", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptNavigation")
                        .WithMany("DiseasecodeConceptNavigation")
                        .HasForeignKey("Concept")
                        .HasConstraintName("DISEASECODE_FK_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptoidMon1Navigation")
                        .WithMany("DiseasecodeConceptoidMon1Navigation")
                        .HasForeignKey("ConceptoidMon1")
                        .HasConstraintName("DISEASECODE_FK_CONCEPT_MON1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ConceptoidMon2Navigation")
                        .WithMany("DiseasecodeConceptoidMon2Navigation")
                        .HasForeignKey("ConceptoidMon2")
                        .HasConstraintName("DISEASECODE_FK_CONCEPT_MON2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DscdGroupNavigation")
                        .WithMany("Diseasecode")
                        .HasForeignKey("DscdGroup")
                        .HasConstraintName("DISEASECODE_FK_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "DscdTravelDiseaseNavigation")
                        .WithMany("DiseasecodeDscdTravelDiseaseNavigation")
                        .HasForeignKey("DscdTravelDisease")
                        .HasConstraintName("DSCD_TRAVEL_DISEASE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ModifiedbyNavigation")
                        .WithMany("Diseasecode")
                        .HasForeignKey("Modifiedby")
                        .HasConstraintName("FK_DISEASE_MODIFIEDBY_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "TermNavigation")
                        .WithMany("DiseasecodeTermNavigation")
                        .HasForeignKey("Term")
                        .HasConstraintName("DISEASECODE_FK_TERM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "TermoidMon1Navigation")
                        .WithMany("DiseasecodeTermoidMon1Navigation")
                        .HasForeignKey("TermoidMon1")
                        .HasConstraintName("DISEASECODE_FK_TERM_MON1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "TermoidMon2Navigation")
                        .WithMany("DiseasecodeTermoidMon2Navigation")
                        .HasForeignKey("TermoidMon2")
                        .HasConstraintName("DISEASECODE_FK_TERM_MON2");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DiseasecodeForPart", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "DcfpAdverseRxNavigation")
                        .WithMany("DiseasecodeForPart")
                        .HasForeignKey("DcfpAdverseRx")
                        .HasConstraintName("DCFP_FK_RX");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "DcfpDxNavigation")
                        .WithMany("DiseasecodeForPart")
                        .HasForeignKey("DcfpDx")
                        .HasConstraintName("DCFP_FK_DX");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DiseasecodePreferred", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Dscd")
                        .WithMany("DiseasecodePreferred")
                        .HasForeignKey("DscdId")
                        .HasConstraintName("DISEASECODE_PREFERRED_FK_DC");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("DiseasecodePreferred")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("DISEASECODE_PREFERRED_FK_PPP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DiseaseMonitors", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept")
                        .WithMany("DiseaseMonitorsConcept")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("DM_FK_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "InstrDefContentNavigation")
                        .WithMany("DiseaseMonitors")
                        .HasForeignKey("InstrDefContent")
                        .HasConstraintName("FK_INSTR_DEF_CONTENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "MonitorConcept")
                        .WithMany("DiseaseMonitorsMonitorConcept")
                        .HasForeignKey("MonitorConceptId")
                        .HasConstraintName("FK_DM_TC_MONITOR_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "MrMaxunit")
                        .WithMany("DiseaseMonitorsMrMaxunit")
                        .HasForeignKey("MrMaxunitId")
                        .HasConstraintName("FK_MR_MAXUNIT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "MrUnit")
                        .WithMany("DiseaseMonitorsMrUnit")
                        .HasForeignKey("MrUnitId")
                        .HasConstraintName("FK_MR_UNIT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DistGroups", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "OwnerNavigation")
                        .WithMany("DistGroups")
                        .HasForeignKey("Owner")
                        .HasConstraintName("DIST_GROUPS_FK_OWNER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "RoleO")
                        .WithMany("DistGroups")
                        .HasForeignKey("RoleOid")
                        .HasConstraintName("FK_ROLE_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DistNames", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DistGroups", "DistGroupO")
                        .WithMany("DistNames")
                        .HasForeignKey("DistGroupOid")
                        .HasConstraintName("DIST_NAMES_FK_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DocLibrary", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DocLibraryCategory", "Category")
                        .WithMany("DocLibrary")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("DOC_LIBRARY_FK_CATEGORY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DocLibraryData", "DocLibData")
                        .WithMany("DocLibrary")
                        .HasForeignKey("DocLibDataId")
                        .HasConstraintName("DOC_LIBRARY_FK_DATA");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivateToNavigation")
                        .WithMany("DocLibrary")
                        .HasForeignKey("PrivateTo")
                        .HasConstraintName("DOC_LIBRARY_FK_PRIVATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DocLibraryCategory", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DocLibraryCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("DOC_LIBRARY_CATEGORY_FK_PARE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.DynamicdateOutcomes", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("DynamicdateOutcomesCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("DYNAMICDATES_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("DynamicdateOutcomesDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("DYNAMICDATES_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DynamicdateOutcomes", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("DYNAMICDATE_OUTCOMES_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "OutcomeNavigation")
                        .WithMany("DynamicdateOutcomes")
                        .HasForeignKey("Outcome")
                        .HasConstraintName("FK_DYNAMICDATE_OUTCOME");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanvisit", "Visit")
                        .WithMany("DynamicdateOutcomes")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_DYNAMICDATE_VISIT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Emessage", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("Emessage")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_EMESSAGE_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "ViewRole")
                        .WithMany("Emessage")
                        .HasForeignKey("ViewRoleid")
                        .HasConstraintName("VIEW_ROLEID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EncounterDetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "EdeEncounter")
                        .WithMany("EncounterDetails")
                        .HasForeignKey("EdeEncounterId")
                        .HasConstraintName("FK_ENC_DETAILS_CDO_TRANS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "EdeProvForOtherixNavigation")
                        .WithMany("EncounterDetailsEdeProvForOtherixNavigation")
                        .HasForeignKey("EdeProvForOtherix")
                        .HasConstraintName("FK_ENC_DETAILS_PROV_IX");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "EdeProvForPathologyNavigation")
                        .WithMany("EncounterDetailsEdeProvForPathologyNavigation")
                        .HasForeignKey("EdeProvForPathology")
                        .HasConstraintName("FK_ENC_DETAILS_PROV_PATH");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "EdeProvForRadiologyNavigation")
                        .WithMany("EncounterDetailsEdeProvForRadiologyNavigation")
                        .HasForeignKey("EdeProvForRadiology")
                        .HasConstraintName("FK_ENC_DETAILS_PROV_RAD");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "EdeProvForScriptsNavigation")
                        .WithMany("EncounterDetailsEdeProvForScriptsNavigation")
                        .HasForeignKey("EdeProvForScripts")
                        .HasConstraintName("FK_ENC_DETAILS_PROV_SCRIPTS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Entityids", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("Entityids")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("ENTITYIDS_FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ExtProvider")
                        .WithMany("EntityidsExtProvider")
                        .HasForeignKey("ExtProviderId")
                        .HasConstraintName("ENTITYIDS_FK_EXT_PROVIDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OrgMember")
                        .WithMany("Entityids")
                        .HasForeignKey("OrgMemberId")
                        .HasConstraintName("ENTITYIDS_FK_ORG_MEMBER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("Entityids")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("ENTITYIDS_FK_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("EntityidsPppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("ENTITYIDS_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EobCodes", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Agency")
                        .WithMany("EobCodes")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("EOB_CODES_FK_AGENCY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EobLines", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.BatchInvoices", "EobBatchNavigation")
                        .WithMany("EobLines")
                        .HasForeignKey("EobBatch")
                        .HasConstraintName("EOB_LINES_FK_BATCH");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactionline", "InvoiceLine")
                        .WithMany("EobLines")
                        .HasForeignKey("InvoiceLineId")
                        .HasConstraintName("EOB_LINES_FK_INVOICE_LINE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EprescriptionLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "MessageBody")
                        .WithMany("EprescriptionLog")
                        .HasForeignKey("MessageBodyId")
                        .HasConstraintName("FK_EPRESCR_LOG_BLOB");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.EspecialAuthorityAudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Trans")
                        .WithMany("EspecialAuthorityAudit")
                        .HasForeignKey("TransId")
                        .HasConstraintName("FK_ESPECAUTHORAUDT_TRANSID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExportAck", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExportEvent", "ExevO")
                        .WithMany("ExportAck")
                        .HasForeignKey("ExevOid")
                        .HasConstraintName("EXPORT_ACK_FK_EXEV_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExportAckMsg", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExportAck", "EackO")
                        .WithMany("ExportAckMsg")
                        .HasForeignKey("EackOid")
                        .HasConstraintName("EXPORT_ACK_MSG_FK_EACK_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("ExportAckMsg")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("EXPORT_ACK_MSG_FK_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("ExportAckMsg")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("EXPORT_ACK_MSG_FK_PTNT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Exportfields", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Exportrecords", "FmtRec")
                        .WithMany("Exportfields")
                        .HasForeignKey("FmtRecid")
                        .HasConstraintName("EXPORTFIELDS_FK_REC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExtAsrMsg", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("ExtAsrMsg")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("EXT_ASR_MSG_FK_PTNT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExternalEntity", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "SourceTrans")
                        .WithMany("ExternalEntity")
                        .HasForeignKey("SourceTransId")
                        .HasConstraintName("FK_EXT_ENT_SOURCE_TRANS_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExternalproviderPreferred", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Expr")
                        .WithMany("ExternalproviderPreferredExpr")
                        .HasForeignKey("ExprId")
                        .HasConstraintName("FK_EXTERNALPROVIDER_PREFERE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("ExternalproviderPreferredPppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_EXTERNALPROVIDER_PREFERP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Externalprovidertext", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Expr")
                        .WithMany("Externalprovidertext")
                        .HasForeignKey("ExprId")
                        .HasConstraintName("EXT_PROV_TEXT_FK_EXPR_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExtProviderEformat", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("ExtProviderEformat")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_EFORMAT_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExtProviderEformatMacro", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExtProviderEformat", "Eformat")
                        .WithMany("ExtProviderEformatMacro")
                        .HasForeignKey("EformatId")
                        .HasConstraintName("FK_EFORMAT_MACRO_EFORMAT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ExtProviderScannedForm", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("ExtProviderScannedFormCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("EP_SCAN_FRM_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("ExtProviderScannedFormDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("EP_SCAN_FRM_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "EpsfDesignBlob")
                        .WithMany("ExtProviderScannedForm")
                        .HasForeignKey("EpsfDesignBlobId")
                        .HasConstraintName("FK_EPSF_DESIGN_BLOB_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "EpsfPppu")
                        .WithMany("ExtProviderScannedForm")
                        .HasForeignKey("EpsfPppuId")
                        .HasConstraintName("FK_EPSF_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExtProviderScannedForm", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("EP_SCAN_FRM_FK_MASTER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Extracts", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "FirstitemNavigation")
                        .WithMany("ExtractsFirstitemNavigation")
                        .HasForeignKey("Firstitem")
                        .HasConstraintName("EXTRACTS_FK_FIRSTITEM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ForposNavigation")
                        .WithMany("ExtractsForposNavigation")
                        .HasForeignKey("Forpos")
                        .HasConstraintName("EXTRACTS_FOREIGN_FORPOS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ForproviderNavigation")
                        .WithMany("ExtractsForproviderNavigation")
                        .HasForeignKey("Forprovider")
                        .HasConstraintName("EXTRACTS_FOREIGN_FORPROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ForuserNavigation")
                        .WithMany("ExtractsForuserNavigation")
                        .HasForeignKey("Foruser")
                        .HasConstraintName("EXTRACTS_FK_FORUSER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "LastitemNavigation")
                        .WithMany("ExtractsLastitemNavigation")
                        .HasForeignKey("Lastitem")
                        .HasConstraintName("EXTRACTS_FK_LASTITEM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuexecutedNavigation")
                        .WithMany("ExtractsPppuexecutedNavigation")
                        .HasForeignKey("Pppuexecuted")
                        .HasConstraintName("EXTRACTS_FOREIGN_PPPUEXECUTE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FavouriteFolders", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "FfUser")
                        .WithMany("FavouriteFolders")
                        .HasForeignKey("FfUserId")
                        .HasConstraintName("FR_FOLDERS_FK_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FavouriteUrl", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FavouriteData", "FuData")
                        .WithMany("FavouriteUrl")
                        .HasForeignKey("FuDataId")
                        .HasConstraintName("FAVOURITE_URL_FK_DATA");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FavouriteFolders", "FuFolders")
                        .WithMany("FavouriteUrl")
                        .HasForeignKey("FuFoldersId")
                        .HasConstraintName("FR_URL_FK_FOLDERS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "FuUser")
                        .WithMany("FavouriteUrl")
                        .HasForeignKey("FuUserId")
                        .HasConstraintName("FR_URL_FK_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FaxedLetters", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FaxJobs", "FaxlJob")
                        .WithMany("FaxedLetters")
                        .HasForeignKey("FaxlJobId")
                        .HasConstraintName("FK_FAX_LETTER_JOB");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "FaxlLetter")
                        .WithMany("FaxedLetters")
                        .HasForeignKey("FaxlLetterId")
                        .HasConstraintName("FK_FAXL_LETTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FaxJobs", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "FaxjDoc")
                        .WithMany("FaxJobs")
                        .HasForeignKey("FaxjDocId")
                        .HasConstraintName("FK_FAX_JOB_DOC");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "FaxjEservice")
                        .WithMany("FaxJobs")
                        .HasForeignKey("FaxjEserviceid")
                        .HasConstraintName("FK_FAXJ_EMESSAGE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "FaxjRecipientNavigation")
                        .WithMany("FaxJobs")
                        .HasForeignKey("FaxjRecipient")
                        .HasConstraintName("FK_FAXJ_RECIPIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "FaxjSenderNavigation")
                        .WithMany("FaxJobs")
                        .HasForeignKey("FaxjSender")
                        .HasConstraintName("FK_FAXJ_SENDER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Financialperiod", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "TrnsIdLastNavigation")
                        .WithMany("Financialperiod")
                        .HasForeignKey("TrnsIdLast")
                        .HasConstraintName("FINANCIALPERIOD_FK_LAST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FinancialReportsTemplates", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PayeeProviderNavigation")
                        .WithMany("FinancialReportsTemplatesPayeeProviderNavigation")
                        .HasForeignKey("PayeeProvider")
                        .HasConstraintName("FINRPTS_TEMPLATES_");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("FinancialReportsTemplatesPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FIN_REP_TEMPL_FK_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "User")
                        .WithMany("FinancialReportsTemplatesUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FR_TEMPLATES_FK_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Financialyear", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Financialperiod", "FnprIdMonthNavigation")
                        .WithMany("FinancialyearFnprIdMonthNavigation")
                        .HasForeignKey("FnprIdMonth")
                        .HasConstraintName("FNPR_MONTH");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Financialperiod", "FnprIdTaxNavigation")
                        .WithMany("FinancialyearFnprIdTaxNavigation")
                        .HasForeignKey("FnprIdTax")
                        .HasConstraintName("FNPR_TAX");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Financialperiod", "FnprIdUserNavigation")
                        .WithMany("FinancialyearFnprIdUserNavigation")
                        .HasForeignKey("FnprIdUser")
                        .HasConstraintName("FNPR_USER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FindObjects", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FindObjectsTree", "FoFolderNavigation")
                        .WithMany("FindObjects")
                        .HasForeignKey("FoFolder")
                        .HasConstraintName("FIND_OBJECTS_FK_FOLDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "FoPos")
                        .WithMany("FindObjects")
                        .HasForeignKey("FoPosId")
                        .HasConstraintName("FK_FIND_OBJECTS_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "FoRole")
                        .WithMany("FindObjects")
                        .HasForeignKey("FoRoleId")
                        .HasConstraintName("FK_FIND_OBJECTS_ROLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FindObjectsGroup", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FindObjectsTree", "FogFolderNavigation")
                        .WithMany("FindObjectsGroup")
                        .HasForeignKey("FogFolder")
                        .HasConstraintName("FIND_OBJECTS_GROUP_FK_FOLDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "FogPos")
                        .WithMany("FindObjectsGroup")
                        .HasForeignKey("FogPosId")
                        .HasConstraintName("FK_FIND_OBJECTS_GROUP_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "FogRole")
                        .WithMany("FindObjectsGroup")
                        .HasForeignKey("FogRoleId")
                        .HasConstraintName("FK_FIND_OBJECTS_GROUP_ROLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FindObjectsGroupLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FindObjectsGroup", "FindObjectGroupO")
                        .WithMany("FindObjectsGroupLink")
                        .HasForeignKey("FindObjectGroupOid")
                        .HasConstraintName("FOGL_FK_FIND_OBJECT_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FindObjects", "FindObjectO")
                        .WithMany("FindObjectsGroupLink")
                        .HasForeignKey("FindObjectOid")
                        .HasConstraintName("FOGL_FK_FIND_OBJECT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FindObjectsTree", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FindObjectsTree", "FotParentNavigation")
                        .WithMany("InverseFotParentNavigation")
                        .HasForeignKey("FotParent")
                        .HasConstraintName("FIND_OBJECTS_TREE_FK_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "FotPos")
                        .WithMany("FindObjectsTree")
                        .HasForeignKey("FotPosId")
                        .HasConstraintName("FK_FIND_OBJECTS_TREE_POS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Flowchartdef", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ComplexFilter", "FcComplexFilterO")
                        .WithMany("Flowchartdef")
                        .HasForeignKey("FcComplexFilterOid")
                        .HasConstraintName("FLOWCHARTDEF_FK2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Guideline", "FcLowerPanelGuidelineO")
                        .WithMany("Flowchartdef")
                        .HasForeignKey("FcLowerPanelGuidelineOid")
                        .HasConstraintName("FLOWCHARTDEF_FK1");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.FtpFileLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FtpFile", "FtpFile")
                        .WithMany("FtpFileLog")
                        .HasForeignKey("FtpFileId")
                        .HasConstraintName("FK_FTPFILELOG_FTPFILEID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Gp2gpLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LoggedUser")
                        .WithMany("Gp2gpLog")
                        .HasForeignKey("LoggedUserId")
                        .HasConstraintName("FK_GP2GPLOG_LOGGEDUSER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GroupSession", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "GsProvider")
                        .WithMany("GroupSession")
                        .HasForeignKey("GsProviderId")
                        .HasConstraintName("FK_GS_PROVIDER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GroupSessionProvider", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.GroupSession", "GspGroupSession")
                        .WithMany("GroupSessionProvider")
                        .HasForeignKey("GspGroupSessionId")
                        .HasConstraintName("FK_GSP_GROUP_SESSION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "GspProvider")
                        .WithMany("GroupSessionProvider")
                        .HasForeignKey("GspProviderId")
                        .HasConstraintName("FK_GSP_PROVIDER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Guideline", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "GlCareplan")
                        .WithMany("Guideline")
                        .HasForeignKey("GlCareplanId")
                        .HasConstraintName("GL_CAREPLAN_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ComplexFilter", "GlComplexFilter")
                        .WithMany("GuidelineGlComplexFilter")
                        .HasForeignKey("GlComplexFilterId")
                        .HasConstraintName("GL_COMPLEX_FILTER_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "GlConcept")
                        .WithMany("GuidelineGlConcept")
                        .HasForeignKey("GlConceptId")
                        .HasConstraintName("GL_CONCEPT_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "GlIndConcept")
                        .WithMany("GuidelineGlIndConcept")
                        .HasForeignKey("GlIndConceptId")
                        .HasConstraintName("GL_IND_CONCEPT_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "GlMainConcept")
                        .WithMany("GuidelineGlMainConcept")
                        .HasForeignKey("GlMainConceptId")
                        .HasConstraintName("GLMAINCONCEPT_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientFilter", "GlPatientFilter")
                        .WithMany("Guideline")
                        .HasForeignKey("GlPatientFilterId")
                        .HasConstraintName("GL_PATIENT_FILTER_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ComplexFilter", "GlPatientGroup")
                        .WithMany("GuidelineGlPatientGroup")
                        .HasForeignKey("GlPatientGroupId")
                        .HasConstraintName("GL_PATIENT_GROUP_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "GlPerson")
                        .WithMany("Guideline")
                        .HasForeignKey("GlPersonId")
                        .HasConstraintName("GL_PERSON_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScheduledTask", "GlScheduledTask")
                        .WithMany("Guideline")
                        .HasForeignKey("GlScheduledTaskId")
                        .HasConstraintName("GL_SCHEDULED_TASK_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineCdRecommendLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.GuidelineCycleData", "GcdrCycleData")
                        .WithMany("GuidelineCdRecommendLink")
                        .HasForeignKey("GcdrCycleDataId")
                        .HasConstraintName("GCDR_CYCLE_DATA_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recommendation", "GcdrRecommendation")
                        .WithMany("GuidelineCdRecommendLink")
                        .HasForeignKey("GcdrRecommendationId")
                        .HasConstraintName("GCDR_RECOMMENDATION_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineCycle", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Guideline", "GlcGuideline")
                        .WithMany("GuidelineCycle")
                        .HasForeignKey("GlcGuidelineId")
                        .HasConstraintName("GLC_GUIDELINE_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineCycleData", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.GuidelineCycle", "GlcdCycle")
                        .WithMany("GuidelineCycleData")
                        .HasForeignKey("GlcdCycleId")
                        .HasConstraintName("GLCD_CYCLE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "GlcdPatient")
                        .WithMany("GuidelineCycleData")
                        .HasForeignKey("GlcdPatientId")
                        .HasConstraintName("GLCD_PATIENT_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineCycleTemp", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.GuidelineCycle", "GctGuidelineCycle")
                        .WithMany("GuidelineCycleTemp")
                        .HasForeignKey("GctGuidelineCycleId")
                        .HasConstraintName("GCT_GUIDELINE_CYCLE_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.GuidelineInactivity", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Guideline", "GlinGuideline")
                        .WithMany("GuidelineInactivity")
                        .HasForeignKey("GlinGuidelineId")
                        .HasConstraintName("GLIN_GUIDELINE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "GlinPppu")
                        .WithMany("GuidelineInactivity")
                        .HasForeignKey("GlinPppuId")
                        .HasConstraintName("GLIN_PPPU_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recommendation", "GlinRecommendation")
                        .WithMany("GuidelineInactivity")
                        .HasForeignKey("GlinRecommendationId")
                        .HasConstraintName("GLIN_RECOMMENDATION_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Situation", "GlinSituation")
                        .WithMany("GuidelineInactivity")
                        .HasForeignKey("GlinSituationId")
                        .HasConstraintName("GLIN_SITUATION_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Headline", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "HlCategoryNavigation")
                        .WithMany("Headline")
                        .HasForeignKey("HlCategory")
                        .HasConstraintName("HL_FK_CATEGORY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "HlOrganisationNavigation")
                        .WithMany("Headline")
                        .HasForeignKey("HlOrganisation")
                        .HasConstraintName("HEADLINE_FK_ORG_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HeadlinePresenter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Headline", "HlpHeadline")
                        .WithMany("HeadlinePresenter")
                        .HasForeignKey("HlpHeadlineId")
                        .HasConstraintName("HLP_FK_HEADLINE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "HlpPatient")
                        .WithMany("HeadlinePresenter")
                        .HasForeignKey("HlpPatientId")
                        .HasConstraintName("HLP_FK_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "HlpUser")
                        .WithMany("HeadlinePresenter")
                        .HasForeignKey("HlpUserId")
                        .HasConstraintName("HLP_FK_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HeadlineRole", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Headline", "HlrHeadline")
                        .WithMany("HeadlineRole")
                        .HasForeignKey("HlrHeadlineId")
                        .HasConstraintName("HLR_FK_HEADLINE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "HlrRole")
                        .WithMany("HeadlineRole")
                        .HasForeignKey("HlrRoleId")
                        .HasConstraintName("HLR_FK_ROLE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HealthlinkForm", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("HealthlinkForm")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_HEALTHLINK_FORM_CASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("HealthlinkForm")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_HEALTHLINK_FORM_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OrgStructure")
                        .WithMany("HealthlinkForm")
                        .HasForeignKey("OrgStructureId")
                        .HasConstraintName("FK_HEALTHLINK_ORG_STRCTR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("HealthlinkForm")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_HEALTHLINK_FORM_PTNT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HelpInfoLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "HilConceptNavigation")
                        .WithMany("HelpInfoLinks")
                        .HasForeignKey("HilConcept")
                        .HasConstraintName("FK_HELP_INFO_LINKS_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.HelpInfo", "HilHelpinfoNavigation")
                        .WithMany("HelpInfoLinks")
                        .HasForeignKey("HilHelpinfo")
                        .HasConstraintName("FK_HELP_INFO_LINKS_HELPINFO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Partition", "HilOrganizationNavigation")
                        .WithMany("HelpInfoLinks")
                        .HasForeignKey("HilOrganization")
                        .HasConstraintName("FK_HELP_INFO_LINKS_ORG");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "HilShortcodeNavigation")
                        .WithMany("HelpInfoLinks")
                        .HasForeignKey("HilShortcode")
                        .HasConstraintName("FK_HELP_INFO_LINKS_SHORTCODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HicData", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.BatchInvoices", "Batch")
                        .WithMany("HicData")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("HIC_DATA_FK_BATCH");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SignedByNavigation")
                        .WithMany("HicData")
                        .HasForeignKey("SignedBy")
                        .HasConstraintName("HIC_DATA_FK_SIGNED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "Trans")
                        .WithMany("HicData")
                        .HasForeignKey("TransId")
                        .HasConstraintName("HIC_DATA_FK_TRANS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HicTransmissions", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MessageAttempt", "Attempt")
                        .WithMany("HicTransmissions")
                        .HasForeignKey("AttemptId")
                        .HasConstraintName("HIC_TRANS_FK_ATTEMPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.HicData", "SendDataNavigation")
                        .WithMany("HicTransmissions")
                        .HasForeignKey("SendData")
                        .HasConstraintName("HIC_TRANSM_FK_DATA");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HiserviceAudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "Emessage")
                        .WithMany("HiserviceAudit")
                        .HasForeignKey("EmessageId")
                        .HasConstraintName("FK_HISERVICE_AUDIT_EMSG");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("HiserviceAudit")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_HISERVICE_AUDIT_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("HiserviceAudit")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_HISERVICE_AUDIT_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.HisoSession", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("HisoSession")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_HSESSION_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.HealthlinkForm", "Form")
                        .WithMany("HisoSession")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_HSESSION_FORM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "Org")
                        .WithMany("HisoSession")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_HSESSION_ORG_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("HisoSession")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_HSESSION_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("HisoSession")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_HSESSION_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImConference", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OrgStructure")
                        .WithMany("ImConference")
                        .HasForeignKey("OrgStructureId")
                        .HasConstraintName("FK_IMCONFERENCE_ORGSTRUCTURE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImCreator", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ImConference", "Conf")
                        .WithMany("ImCreator")
                        .HasForeignKey("ConfId")
                        .HasConstraintName("IM_CREATOR_FK_CONF");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatorNavigation")
                        .WithMany("ImCreator")
                        .HasForeignKey("Creator")
                        .HasConstraintName("IM_CREATOR_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportedData", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("ImportedDataCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("IMPDATA__FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("ImportedDataDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("IMPDATA__FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ImportedData", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("IMPDATA__FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Trans")
                        .WithMany("ImportedData")
                        .HasForeignKey("TransId")
                        .HasConstraintName("FK_IMPORTED_DATA_TRANS_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportsLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "Emessage")
                        .WithMany("ImportsLog")
                        .HasForeignKey("EmessageId")
                        .HasConstraintName("FK_IMPORTSLOG_EMESSAGE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ImportsLogData", "LogData")
                        .WithMany("ImportsLog")
                        .HasForeignKey("LogDataId")
                        .HasConstraintName("FK_IMPORTSLOG_LOGDATA");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("ImportsLog")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_IMPORTSLOG_POS_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportsLogDetail", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ImportsLogData", "ErrorData")
                        .WithMany("ImportsLogDetail")
                        .HasForeignKey("ErrorDataId")
                        .HasConstraintName("FK_IMPORTSLOGDETAIL_ERROR_DATA");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ImportsLog", "Log")
                        .WithMany("ImportsLogDetail")
                        .HasForeignKey("LogId")
                        .HasConstraintName("FK_IMPORTSLOGDETAIL_LOG_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImportTracking", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.DeployedOfflineSession", "ImtrSession")
                        .WithMany("ImportTracking")
                        .HasForeignKey("ImtrSessionId")
                        .HasConstraintName("FK_IMTR_SESSION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImSender", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.InstantMessage", "Msg")
                        .WithMany("ImSender")
                        .HasForeignKey("MsgId")
                        .HasConstraintName("IM_SENDER_FK_MSG");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SenderNavigation")
                        .WithMany("ImSender")
                        .HasForeignKey("Sender")
                        .HasConstraintName("IM_SENDER_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ImSticker", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.InstantMessage", "MsgO")
                        .WithMany("ImSticker")
                        .HasForeignKey("MsgOid")
                        .HasConstraintName("IM_STIKER_FK_MESSAGE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ReceiverNavigation")
                        .WithMany("ImSticker")
                        .HasForeignKey("Receiver")
                        .HasConstraintName("IM_STICKER_FK_RECEIVER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Infant", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "InfnFilenumNavigation")
                        .WithMany("Infant")
                        .HasForeignKey("InfnFilenum")
                        .HasConstraintName("INFANT_FK_INFN_FILENUM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "InfnOutcomeNavigation")
                        .WithMany("InfantInfnOutcomeNavigation")
                        .HasForeignKey("InfnOutcome")
                        .HasConstraintName("INFANT_FK_INFN_OUTCOME");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pregnancy", "InfnPregnancyNavigation")
                        .WithMany("Infant")
                        .HasForeignKey("InfnPregnancy")
                        .HasConstraintName("INFANT_FK_INFN_PREGNANCY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "InfnStatusNavigation")
                        .WithMany("InfantInfnStatusNavigation")
                        .HasForeignKey("InfnStatus")
                        .HasConstraintName("INFANT_FK_INFN_STATUS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InstantMessage", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ImConference", "Conf")
                        .WithMany("InstantMessage")
                        .HasForeignKey("ConfId")
                        .HasConstraintName("INSTANT_MESSAGE_FK_CONFERENC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InstructionTemplate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "DiseaseNavigation")
                        .WithMany("InstructionTemplateDiseaseNavigation")
                        .HasForeignKey("Disease")
                        .HasConstraintName("FK_INSTR_TEMPLATE_DISEASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "MeasureNavigation")
                        .WithMany("InstructionTemplateMeasureNavigation")
                        .HasForeignKey("Measure")
                        .HasConstraintName("FK_INSTR_TEMPLATE_MEASURE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InstructionTemplateLine", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "ContentNavigation")
                        .WithMany("InstructionTemplateLineContentNavigation")
                        .HasForeignKey("Content")
                        .HasConstraintName("FK_INSTR_TEMPL_LINE_CONTENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "MeasureValueNavigation")
                        .WithMany("InstructionTemplateLineMeasureValueNavigation")
                        .HasForeignKey("MeasureValue")
                        .HasConstraintName("FK_INSTR_LINE_MEASURE_VALUE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.InstructionTemplate", "TemplateNavigation")
                        .WithMany("InstructionTemplateLine")
                        .HasForeignKey("Template")
                        .HasConstraintName("FK_INSTR_LINE_TEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InventoryAudit1", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxDispenseAdminister", "IaDispenseAdminNavigation")
                        .WithMany("InventoryAudit1IaDispenseAdminNavigation")
                        .HasForeignKey("IaDispenseAdmin")
                        .HasConstraintName("IA_RDA_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxDispenseAdminister", "IaDispenseAdminDiluentNavigation")
                        .WithMany("InventoryAudit1IaDispenseAdminDiluentNavigation")
                        .HasForeignKey("IaDispenseAdminDiluent")
                        .HasConstraintName("INVENTORY_AUDIT_RDA_DILUENT_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "IaLocationNavigation")
                        .WithMany("InventoryAudit1IaLocationNavigation")
                        .HasForeignKey("IaLocation")
                        .HasConstraintName("INVENTORY_AUDIT_LOCATION_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "IaMoveTypeNavigation")
                        .WithMany("InventoryAudit1IaMoveTypeNavigation")
                        .HasForeignKey("IaMoveType")
                        .HasConstraintName("INVENTORY_AUDIT_MOVE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "IaPatient")
                        .WithMany("InventoryAudit1")
                        .HasForeignKey("IaPatientId")
                        .HasConstraintName("FK_INVENTORY_AUDIT_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallimmunisation", "IaRecallImmNavigation")
                        .WithMany("InventoryAudit1IaRecallImmNavigation")
                        .HasForeignKey("IaRecallImm")
                        .HasConstraintName("INVENTORY_AUDIT_RECALL_IMM_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallimmunisation", "IaRecallImmDiluentNavigation")
                        .WithMany("InventoryAudit1IaRecallImmDiluentNavigation")
                        .HasForeignKey("IaRecallImmDiluent")
                        .HasConstraintName("INVENTORY_AUDIT_RECALL_IMMD_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockItem", "IaStockItemNavigation")
                        .WithMany("InventoryAudit1")
                        .HasForeignKey("IaStockItem")
                        .HasConstraintName("INVENTORY_AUDIT_STOCKITEM_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockLot", "IaStockLotNavigation")
                        .WithMany("InventoryAudit1")
                        .HasForeignKey("IaStockLot")
                        .HasConstraintName("INVENTORY_AUDIT_STOCK_LOT_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.InventoryLevelsEom", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("InventoryLevelsEom")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_IL_EOM_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("InventoryLevelsEom")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_IL_EOM_SERVICE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Kpi", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiGraph", "KpiDefaultgraphNavigation")
                        .WithMany("Kpi")
                        .HasForeignKey("KpiDefaultgraph")
                        .HasConstraintName("FK_KPI_KPI_DEFAULTGRAPH");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiProcess", "KpiProcessNavigation")
                        .WithMany("Kpi")
                        .HasForeignKey("KpiProcess")
                        .HasConstraintName("KPI_PROCESS_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiTree", "KpiTreenodeNavigation")
                        .WithMany("Kpi")
                        .HasForeignKey("KpiTreenode")
                        .HasConstraintName("KPI_TREENODE_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiCycle", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiProcess", "Process")
                        .WithMany("KpiCycle")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("KPI_CYCLE_PROCESS_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiData", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("KpiData")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("KPI_DATA_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("KpiData")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("KPI_DATA_FK_PTNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiSeries", "Series")
                        .WithMany("KpiData")
                        .HasForeignKey("SeriesId")
                        .HasConstraintName("KPI_DATA_SERIES_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiVariable", "Variable")
                        .WithMany("KpiData")
                        .HasForeignKey("VariableId")
                        .HasConstraintName("KPI_DATA_VARIABLE_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiGraph", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Kpi", "KpiNavigation")
                        .WithMany("KpiGraph")
                        .HasForeignKey("KpiId")
                        .HasConstraintName("KPI_GRAPH_KPI_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiGroupTable", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiTree", "KpgtTreenode")
                        .WithMany("KpiGroupTable")
                        .HasForeignKey("KpgtTreenodeId")
                        .HasConstraintName("FK_KPI_GROUP_TABLE_TREENODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiGroupTableColumn", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiGroupTable", "KpgtcTable")
                        .WithMany("KpiGroupTableColumn")
                        .HasForeignKey("KpgtcTableId")
                        .HasConstraintName("FK_KPI_GRP_TBL_COLUMN_TABLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiMember", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Kpi", "Kpi")
                        .WithMany("KpiMember")
                        .HasForeignKey("KpiId")
                        .HasConstraintName("KPI_MEMBER_KPI_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiProcess", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScheduledTask", "KppTaskO")
                        .WithMany("KpiProcess")
                        .HasForeignKey("KppTaskOid")
                        .HasConstraintName("KPI_PROCESS_TASK_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiSeries", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiCycle", "Cycle")
                        .WithMany("KpiSeries")
                        .HasForeignKey("CycleId")
                        .HasConstraintName("KPI_SERIES_CYCLE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Kpi", "Kpi")
                        .WithMany("KpiSeries")
                        .HasForeignKey("KpiId")
                        .HasConstraintName("KPI_SERIES_KPI_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiSeriesLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiSeries", "KslKpiSeries")
                        .WithMany("KpiSeriesLink")
                        .HasForeignKey("KslKpiSeriesId")
                        .HasConstraintName("KSL_KPI_SERIES_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "KslOrgStructure")
                        .WithMany("KpiSeriesLink")
                        .HasForeignKey("KslOrgStructureId")
                        .HasConstraintName("KSL_ORG_STRUCTURE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Partition", "KslPartition")
                        .WithMany("KpiSeriesLink")
                        .HasForeignKey("KslPartitionId")
                        .HasConstraintName("FK_KSL_PARTITION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PartitionStructure", "KslPartitionStructure")
                        .WithMany("KpiSeriesLink")
                        .HasForeignKey("KslPartitionStructureId")
                        .HasConstraintName("FK_KSL_PARTITION_STRUCTURE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", "KslPatientGroup")
                        .WithMany("KpiSeriesLink")
                        .HasForeignKey("KslPatientGroupId")
                        .HasConstraintName("FK_KSL_PATIENT_GROUP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "KslPppu")
                        .WithMany("KpiSeriesLink")
                        .HasForeignKey("KslPppuId")
                        .HasConstraintName("KSL_PPPU_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "KslProviderGroup")
                        .WithMany("KpiSeriesLink")
                        .HasForeignKey("KslProviderGroupId")
                        .HasConstraintName("KSL_PROVIDER_GROUP_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiTree", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiGroupTable", "KptrDefaulttableNavigation")
                        .WithMany("KpiTree")
                        .HasForeignKey("KptrDefaulttable")
                        .HasConstraintName("FK_KPI_TREE_DEFAULTTABLE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiTree", "KptrParentNavigation")
                        .WithMany("InverseKptrParentNavigation")
                        .HasForeignKey("KptrParent")
                        .HasConstraintName("KPI_TREE_FK_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiProcess", "KptrProcessNavigation")
                        .WithMany("KpiTree")
                        .HasForeignKey("KptrProcess")
                        .HasConstraintName("KPI_TREE_PROCESS_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.KpiVariable", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("KpiVariableCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("KPI_VARIABLE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("KpiVariableDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("KPI_VARIABLE_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Kpi", "Kpi")
                        .WithMany("KpiVariable")
                        .HasForeignKey("KpiId")
                        .HasConstraintName("KPI_VARIABLE_KPI_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.KpiVariable", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("KPI_VARIABLE_FK_MASTER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LegacyDiseaseLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "LdlDisease")
                        .WithMany("LegacyDiseaseLinks")
                        .HasForeignKey("LdlDiseaseId")
                        .HasConstraintName("LDL_FK_LDL_DISEASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "LdlPatient")
                        .WithMany("LegacyDiseaseLinks")
                        .HasForeignKey("LdlPatientId")
                        .HasConstraintName("LDL_FK_LDL_PATIENT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LegalStatusChanges", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LscCreatedByNavigation")
                        .WithMany("LegalStatusChangesLscCreatedByNavigation")
                        .HasForeignKey("LscCreatedBy")
                        .HasConstraintName("FK_LSC_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MentalEvents", "LscEvent")
                        .WithMany("LegalStatusChanges")
                        .HasForeignKey("LscEventId")
                        .HasConstraintName("FK_LSC_EVENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LscModifiedByNavigation")
                        .WithMany("LegalStatusChangesLscModifiedByNavigation")
                        .HasForeignKey("LscModifiedBy")
                        .HasConstraintName("FK_LSC_MODIFIED_BY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LegalStatusSections", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.LegalStatusChanges", "LssChange")
                        .WithMany("LegalStatusSections")
                        .HasForeignKey("LssChangeId")
                        .HasConstraintName("FK_LSS_CHANGE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LssSection")
                        .WithMany("LegalStatusSections")
                        .HasForeignKey("LssSectionId")
                        .HasConstraintName("FK_LSS_SECTION_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LegalStatusTsections", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MentalEventsTemplates", "LstEventTemplate")
                        .WithMany("LegalStatusTsections")
                        .HasForeignKey("LstEventTemplateId")
                        .HasConstraintName("FK_LST_EVENT_TEMPLATE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LstSection")
                        .WithMany("LegalStatusTsections")
                        .HasForeignKey("LstSectionId")
                        .HasConstraintName("FK_LST_SECTION_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Letter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "Cntc")
                        .WithMany("Letter")
                        .HasForeignKey("CntcId")
                        .HasConstraintName("LETTER_FK_CNTC");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("LetterCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("LETTER_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("LetterDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("LETTER_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DocCategory")
                        .WithMany("LetterDocCategory")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("LETTER_DOC_CATEGORY_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.LetterData", "LttrAddress")
                        .WithMany("LetterLttrAddress")
                        .HasForeignKey("LttrAddressId")
                        .HasConstraintName("FK_LTTR_ADDRESS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "LttrCaseNavigation")
                        .WithMany("Letter")
                        .HasForeignKey("LttrCase")
                        .HasConstraintName("LETTER_FK_BCASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.LetterData", "LttrContent")
                        .WithMany("LetterLttrContent")
                        .HasForeignKey("LttrContentId")
                        .HasConstraintName("FK_LTTR_CONTENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LttrDocCategory")
                        .WithMany("LetterLttrDocCategory")
                        .HasForeignKey("LttrDocCategoryId")
                        .HasConstraintName("FK_LETTER_DOC_CATEGORY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.LetterData", "LttrLetterhead")
                        .WithMany("LetterLttrLetterhead")
                        .HasForeignKey("LttrLetterheadId")
                        .HasConstraintName("FK_LTTR_LETTERHEAD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "LttrOrigTemplate")
                        .WithMany("InverseLttrOrigTemplate")
                        .HasForeignKey("LttrOrigTemplateId")
                        .HasConstraintName("FK_LETTER_ORIG_TEMPLATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LttrPosNavigation")
                        .WithMany("LetterLttrPosNavigation")
                        .HasForeignKey("LttrPos")
                        .HasConstraintName("LETTER_FK_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LttrProviderNavigation")
                        .WithMany("LetterLttrProviderNavigation")
                        .HasForeignKey("LttrProvider")
                        .HasConstraintName("LETTER_FK_LTTR_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LttrReason")
                        .WithMany("LetterLttrReason")
                        .HasForeignKey("LttrReasonId")
                        .HasConstraintName("FK_LETTER_REASON");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.LetterData", "LttrRtf")
                        .WithMany("LetterLttrRtf")
                        .HasForeignKey("LttrRtfId")
                        .HasConstraintName("FK_LETTER_RTF_DATA");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lettertemplatecategory", "LttrTemplateCategoryNavigation")
                        .WithMany("Letter")
                        .HasForeignKey("LttrTemplateCategory")
                        .HasConstraintName("LTTR_FOREIGN_TEMPLATE_CATEGO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LttrUsualSystem")
                        .WithMany("LetterLttrUsualSystem")
                        .HasForeignKey("LttrUsualSystemId")
                        .HasConstraintName("FK_LETTER_USUAL_SYSTEM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("FK_LETTER_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("Letter")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_LETTER_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("LetterPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("LETTER_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("Letter")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("LETTER_FK_PTNT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LetterData", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("LetterDataCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("LETTER_DATA__FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("LetterDataDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("LETTER_DATA__FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.LetterData", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("LETTER_DATA_FK_MASTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LetterRecipient", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("LetterRecipientCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("LETTER_RECIPI__FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("LetterRecipientDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("LETTER_RECIPI__FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "LtreLetter")
                        .WithMany("LetterRecipient")
                        .HasForeignKey("LtreLetterId")
                        .HasConstraintName("FK_LTRE_LETTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "LtrePatient")
                        .WithMany("LetterRecipient")
                        .HasForeignKey("LtrePatientId")
                        .HasConstraintName("FK_LTRE_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LtrePos")
                        .WithMany("LetterRecipientLtrePos")
                        .HasForeignKey("LtrePosId")
                        .HasConstraintName("FK_LTRE_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LtreProviderExtprovider")
                        .WithMany("LetterRecipientLtreProviderExtprovider")
                        .HasForeignKey("LtreProviderExtproviderId")
                        .HasConstraintName("FK_LTRE_PROV_EXTPROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.LetterRecipient", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("LETTER_RECIPIENT_FK_MASTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Lettertemplatecategory", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lettertemplatecategory", "LttcParent")
                        .WithMany("InverseLttcParent")
                        .HasForeignKey("LttcParentid")
                        .HasConstraintName("LETTERTEMPLCAT_FK_PARENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.LinkedEmr", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "LinkedPtnt")
                        .WithMany("LinkedEmrLinkedPtnt")
                        .HasForeignKey("LinkedPtntId")
                        .HasConstraintName("LINKED_EMR_FK_LINKED_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("LinkedEmrPtnt")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("LINKED_EMR_FK_PTNT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Links", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Partition", "LnkDestinationPartitionNavigation")
                        .WithMany("LinksLnkDestinationPartitionNavigation")
                        .HasForeignKey("LnkDestinationPartition")
                        .HasConstraintName("FK_LNK_DESTINATION_PARTITION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Partition", "LnkOwnerPartitionNavigation")
                        .WithMany("LinksLnkOwnerPartitionNavigation")
                        .HasForeignKey("LnkOwnerPartition")
                        .HasConstraintName("FK_LNK_OWNER_PARTITION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Logs", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("Logs")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_LOGS_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("Logs")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_LOGS_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Macrolog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Macro")
                        .WithMany("Macrolog")
                        .HasForeignKey("Macroid")
                        .HasConstraintName("FK_SHORTCODEMACROLOG");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("Macrolog")
                        .HasForeignKey("Pppuid")
                        .HasConstraintName("FK_PPPUMACROLOG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MacroOnUpdate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ObjectMacroNavigation")
                        .WithMany("MacroOnUpdateObjectMacroNavigation")
                        .HasForeignKey("ObjectMacro")
                        .HasConstraintName("FK_OBJECT_MACRO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OrgStructure")
                        .WithMany("MacroOnUpdate")
                        .HasForeignKey("OrgStructureId")
                        .HasConstraintName("FK_ORG_STRUCTURE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PostMacroNavigation")
                        .WithMany("MacroOnUpdatePostMacroNavigation")
                        .HasForeignKey("PostMacro")
                        .HasConstraintName("FK_OBJECT_POST_MACRO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PreMacroNavigation")
                        .WithMany("MacroOnUpdatePreMacroNavigation")
                        .HasForeignKey("PreMacro")
                        .HasConstraintName("FK_OBJECT_PRE_MACRO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MaestroAdaptorFile", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MaestroAdaptor", "AdaptorNavigation")
                        .WithMany("MaestroAdaptorFile")
                        .HasForeignKey("Adaptor")
                        .HasConstraintName("FK_MAESTRO_ADAPT_FILE_ADAPT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MaestroAdaptorInstance", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MaestroAdaptor", "AdaptorNavigation")
                        .WithMany("MaestroAdaptorInstance")
                        .HasForeignKey("Adaptor")
                        .HasConstraintName("FK_MAESTRO_ADAPT_INST_ADAP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Queue", "QueueInNavigation")
                        .WithMany("MaestroAdaptorInstanceQueueInNavigation")
                        .HasForeignKey("QueueIn")
                        .HasConstraintName("FK_MAESTRO_ADAPT_INST_Q_IN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Queue", "QueueOutNavigation")
                        .WithMany("MaestroAdaptorInstanceQueueOutNavigation")
                        .HasForeignKey("QueueOut")
                        .HasConstraintName("FK_MAESTRO_ADAPT_INST_Q_OUT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScheduledTask", "ScheduledTask")
                        .WithMany("MaestroAdaptorInstance")
                        .HasForeignKey("ScheduledTaskId")
                        .HasConstraintName("FK_MAESTRO_ADAPT_INST_TASK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ManualMatchingLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "MmlCaseNavigation")
                        .WithMany("ManualMatchingLog")
                        .HasForeignKey("MmlCase")
                        .HasConstraintName("FK_MML_CASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "MmlPatientNavigation")
                        .WithMany("ManualMatchingLog")
                        .HasForeignKey("MmlPatient")
                        .HasConstraintName("FK_MML_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MmlProviderNavigation")
                        .WithMany("ManualMatchingLogMmlProviderNavigation")
                        .HasForeignKey("MmlProvider")
                        .HasConstraintName("FK_MML_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "MmlTransactionO")
                        .WithMany("ManualMatchingLog")
                        .HasForeignKey("MmlTransactionOid")
                        .HasConstraintName("FK_MML_TRANSACTION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MmlUserNavigation")
                        .WithMany("ManualMatchingLogMmlUserNavigation")
                        .HasForeignKey("MmlUser")
                        .HasConstraintName("FK_MML_USER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Manualtransdetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "AIDepNavigation")
                        .WithMany("ManualtransdetailsAIDepNavigation")
                        .HasForeignKey("AIDep")
                        .HasConstraintName("FK_A_I_DEP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "AITypeNavigation")
                        .WithMany("ManualtransdetailsAITypeNavigation")
                        .HasForeignKey("AIType")
                        .HasConstraintName("FK_A_I_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("ManualtransdetailsCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("MANUALTRANSDET_KF_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("ManualtransdetailsDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("MANUALTRANSDET_KF_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TSuppNavigation")
                        .WithMany("ManualtransdetailsTSuppNavigation")
                        .HasForeignKey("TSupp")
                        .HasConstraintName("FK_T_SUPP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TemplOwner")
                        .WithMany("ManualtransdetailsTemplOwner")
                        .HasForeignKey("TemplOwnerId")
                        .HasConstraintName("FK_TEMPL_OWNER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Trans")
                        .WithMany("Manualtransdetails")
                        .HasForeignKey("TransId")
                        .HasConstraintName("M_TRANSDET_CDO_TRANS_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.McedtLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "EndUser")
                        .WithMany("McedtLogEndUser")
                        .HasForeignKey("EndUserId")
                        .HasConstraintName("FK_MCEDTLOG_ENDPPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ServiceProvider")
                        .WithMany("McedtLogServiceProvider")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("FK_MCEDTLOG_SRVCPPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MdcareDocument", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DocCategory")
                        .WithMany("MdcareDocument")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("MDCARE_DOC_CATEGORY_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("MdcareDocument")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_MDC_PATIENTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("MdcareDocumentPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_MDC_POSID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("MdcareDocumentProvider")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_MDC_PROVID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SignedProv")
                        .WithMany("MdcareDocumentSignedProv")
                        .HasForeignKey("SignedProvId")
                        .HasConstraintName("FK_MDC_SIGNEDPROVID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MedicalCertificate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MedicalCertificate", "ExtensionOfNavigation")
                        .WithMany("InverseExtensionOfNavigation")
                        .HasForeignKey("ExtensionOf")
                        .HasConstraintName("MEDCER_FK_EXTENSION_OF");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Pat")
                        .WithMany("MedicalCertificate")
                        .HasForeignKey("PatId")
                        .HasConstraintName("MEDCER_FK_PAT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PosNavigation")
                        .WithMany("MedicalCertificatePosNavigation")
                        .HasForeignKey("Pos")
                        .HasConstraintName("MEDCER_FK_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ProviderNavigation")
                        .WithMany("MedicalCertificateProviderNavigation")
                        .HasForeignKey("Provider")
                        .HasConstraintName("MEDCER_FK_PROVIDER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalEvents", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "MeCase")
                        .WithMany("MentalEvents")
                        .HasForeignKey("MeCaseId")
                        .HasConstraintName("FK_ME_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MeClientStateNavigation")
                        .WithMany("MentalEventsMeClientStateNavigation")
                        .HasForeignKey("MeClientState")
                        .HasConstraintName("FK_ME_CLIENT_STATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MeCreatedByNavigation")
                        .WithMany("MentalEventsMeCreatedByNavigation")
                        .HasForeignKey("MeCreatedBy")
                        .HasConstraintName("FK_ME_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MeEventTypeNavigation")
                        .WithMany("MentalEventsMeEventTypeNavigation")
                        .HasForeignKey("MeEventType")
                        .HasConstraintName("FK_ME_EVENT_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MeLocation")
                        .WithMany("MentalEventsMeLocation")
                        .HasForeignKey("MeLocationId")
                        .HasConstraintName("FK_ME_LOCATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MeModifiedByNavigation")
                        .WithMany("MentalEventsMeModifiedByNavigation")
                        .HasForeignKey("MeModifiedBy")
                        .HasConstraintName("FK_ME_MODIFIED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "MePatient")
                        .WithMany("MentalEvents")
                        .HasForeignKey("MePatientId")
                        .HasConstraintName("FK_ME_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "MePrivacyO")
                        .WithMany("MentalEvents")
                        .HasForeignKey("MePrivacyOid")
                        .HasConstraintName("FK_ME_PRIVACY_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("MentalEventsPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("MENTAL_EVENTS_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalEventsReviews", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "MerCarePlan")
                        .WithMany("MentalEventsReviews")
                        .HasForeignKey("MerCarePlanId")
                        .HasConstraintName("MVR_FK_CARE_PLAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MerPos")
                        .WithMany("MentalEventsReviewsMerPos")
                        .HasForeignKey("MerPosId")
                        .HasConstraintName("FK_MER_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MerProvider")
                        .WithMany("MentalEventsReviewsMerProvider")
                        .HasForeignKey("MerProviderId")
                        .HasConstraintName("FK_MER_PROVIDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "MerReasonNavigation")
                        .WithMany("MentalEventsReviews")
                        .HasForeignKey("MerReasonId")
                        .HasConstraintName("FK_MER_REASON_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MentalEventsTemplates", "MerTemplate")
                        .WithMany("MentalEventsReviews")
                        .HasForeignKey("MerTemplateId")
                        .HasConstraintName("FK_MER_TEMPLATE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MerType")
                        .WithMany("MentalEventsReviews")
                        .HasForeignKey("MerTypeId")
                        .HasConstraintName("FK_MER_TYPE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalEventsTemplates", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MetEventTypeNavigation")
                        .WithMany("MentalEventsTemplatesMetEventTypeNavigation")
                        .HasForeignKey("MetEventType")
                        .HasConstraintName("FK_MET_EVENT_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MetLocation")
                        .WithMany("MentalEventsTemplatesMetLocation")
                        .HasForeignKey("MetLocationId")
                        .HasConstraintName("FK_MET_LOCATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MentalEventsTemplates", "MetNextTemplateNavigation")
                        .WithMany("InverseMetNextTemplateNavigation")
                        .HasForeignKey("MetNextTemplate")
                        .HasConstraintName("FK_MET_NEXT_TEMPLATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MetPatientStateNavigation")
                        .WithMany("MentalEventsTemplatesMetPatientStateNavigation")
                        .HasForeignKey("MetPatientState")
                        .HasConstraintName("FK_MET_PATIENT_STATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MetReportTypeNavigation")
                        .WithMany("MentalEventsTemplatesMetReportTypeNavigation")
                        .HasForeignKey("MetReportType")
                        .HasConstraintName("FK_MET_REPORT_TYPE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalTemplatesCategories", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MtcCategory")
                        .WithMany("MentalTemplatesCategories")
                        .HasForeignKey("MtcCategoryId")
                        .HasConstraintName("FK_MTC_CATEGORY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MentalEventsTemplates", "MtcTemplate")
                        .WithMany("MentalTemplatesCategories")
                        .HasForeignKey("MtcTemplateId")
                        .HasConstraintName("FK_MTC_TEMPLATE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MentalTemplatesStates", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MtsState")
                        .WithMany("MentalTemplatesStates")
                        .HasForeignKey("MtsStateId")
                        .HasConstraintName("FK_MTS_STATE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MentalEventsTemplates", "MtsTemplate")
                        .WithMany("MentalTemplatesStates")
                        .HasForeignKey("MtsTemplateId")
                        .HasConstraintName("FK_MTS_TEMPLATE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MergedCareobject", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("MergedCareobject")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_MERGED_COBJ_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("MergedCareobject")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_MERGED_COBJ_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("MergedCareobject")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_MERGED_COBJ_PTNT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageAck", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "MackEmess")
                        .WithMany("MessageAck")
                        .HasForeignKey("MackEmessId")
                        .HasConstraintName("FK_MESSAGE_ACK_EMESS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MackExtOrgNavigation")
                        .WithMany("MessageAck")
                        .HasForeignKey("MackExtOrg")
                        .HasConstraintName("FK_MESSAGE_ACK_EXT_ORG");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageAttempt", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MessageWho", "MessageWho")
                        .WithMany("MessageAttempt")
                        .HasForeignKey("MessageWhoId")
                        .HasConstraintName("MESSAGE_ATTEMPT_FK_MESSAGE_W");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Messages", "Message")
                        .WithMany("MessageLog")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK_MESSAGE_LOG_MESSAGEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "ReText")
                        .WithMany("MessageLog")
                        .HasForeignKey("ReTextId")
                        .HasConstraintName("FK_MESSAGE_LOG_RETEXT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageResponse", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MessageAttempt", "Attempt")
                        .WithMany("MessageResponse")
                        .HasForeignKey("AttemptId")
                        .HasConstraintName("FK_MSG_RESPONSE_ATTEMPT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Messages", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "BodyO")
                        .WithMany("MessagesBodyO")
                        .HasForeignKey("BodyOid")
                        .HasConstraintName("MESSAGES_FK_BODY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("Messages")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_MESSAGES_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Dest")
                        .WithMany("MessagesDest")
                        .HasForeignKey("DestId")
                        .HasConstraintName("FK_MESSAGES_DEST_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DocCategory")
                        .WithMany("Messages")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("MESSAGES_DOC_CATEGORY_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("Messages")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_MESSAGES_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("MessagesPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("MESSAGES_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("Messages")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("MESSAGES_FK_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "RawDestination")
                        .WithMany("MessagesRawDestination")
                        .HasForeignKey("RawDestinationId")
                        .HasConstraintName("FK_MESSAGE_RAWDESTINATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SenderNavigation")
                        .WithMany("MessagesSenderNavigation")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_MESSAGES_SENDER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageWhat", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "Emess")
                        .WithMany("MessageWhat")
                        .HasForeignKey("EmessId")
                        .HasConstraintName("EMESS_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MessageWho", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MessageWhat", "MessageWhat")
                        .WithMany("MessageWho")
                        .HasForeignKey("MessageWhatId")
                        .HasConstraintName("MESSAGE_WHO_FK_MESSAGE_WHAT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Recipient")
                        .WithMany("MessageWho")
                        .HasForeignKey("RecipientId")
                        .HasConstraintName("MESSAGE_WHO_FK_RECIPIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MhpLetters", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("MhpLetters")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_MHP_LETTERS_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ReceivingProvider")
                        .WithMany("MhpLettersReceivingProvider")
                        .HasForeignKey("ReceivingProviderId")
                        .HasConstraintName("FK_MHP_LETTERS_RCV_PROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SendingProvider")
                        .WithMany("MhpLettersSendingProvider")
                        .HasForeignKey("SendingProviderId")
                        .HasConstraintName("FK_MHP_LETTERS_SND_PROV_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Movements", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("Movements")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MovLocationFrom")
                        .WithMany("MovementsMovLocationFrom")
                        .HasForeignKey("MovLocationFromId")
                        .HasConstraintName("FK_MOVEMENTS_LOCATION_FROM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MovLocation")
                        .WithMany("MovementsMovLocation")
                        .HasForeignKey("MovLocationId")
                        .HasConstraintName("FK_MOVEMENTS_LOCATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MovPos")
                        .WithMany("MovementsMovPos")
                        .HasForeignKey("MovPosId")
                        .HasConstraintName("FK_MOVEMENTS_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("MovementsProvider")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("MOVEMENTS_FK_PROVIDER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MovementsAudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Createdby")
                        .WithMany("MovementsAuditCreatedby")
                        .HasForeignKey("CreatedbyId")
                        .HasConstraintName("MOVEMENTS_AUDIT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Destinationpos")
                        .WithMany("MovementsAuditDestinationpos")
                        .HasForeignKey("Destinationposid")
                        .HasConstraintName("MOVEMENTS_AUDIT_FK_DESTINATI");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Destinationsupplier")
                        .WithMany("MovementsAuditDestinationsupplier")
                        .HasForeignKey("Destinationsupplierid")
                        .HasConstraintName("MOVAUDIT_FK_DESTSUPPLID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("MovementsAudit")
                        .HasForeignKey("Serviceid")
                        .HasConstraintName("MOVEMENTS_AUDIT_FK_SERVICEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Sourcepos")
                        .WithMany("MovementsAuditSourcepos")
                        .HasForeignKey("Sourceposid")
                        .HasConstraintName("MOVEMENTS_AUDIT_FK_SOURCEPOS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Sourcesupplier")
                        .WithMany("MovementsAuditSourcesupplier")
                        .HasForeignKey("Sourcesupplierid")
                        .HasConstraintName("MOVEMENTS_AUDIT_FK_SOURCESUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Mpi", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Mpi", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("MPI_FK_MASTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MpiPracticePatients", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MpiPracticePatients", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("MPIPP_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Mpi", "MpiO")
                        .WithMany("MpiPracticePatients")
                        .HasForeignKey("MpiOid")
                        .HasConstraintName("MPIPP_FK_MPI");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PracticePatientNavigation")
                        .WithMany("MpiPracticePatients")
                        .HasForeignKey("PracticePatient")
                        .HasConstraintName("MPIPP_FK_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MpiRules", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("MpiRulesCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("MPI_RULES_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("MpiRulesDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("MPI_RULES_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "ManualPatientNavigation")
                        .WithMany("MpiRulesManualPatientNavigation")
                        .HasForeignKey("ManualPatient")
                        .HasConstraintName("MPI_RULES_FK_MANUAL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MpiRules", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("MPI_RULES_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PracticePatientNavigation")
                        .WithMany("MpiRulesPracticePatientNavigation")
                        .HasForeignKey("PracticePatient")
                        .HasConstraintName("MPI_RULES_FK_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Mpl", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MplDominantExtPrv")
                        .WithMany("MplMplDominantExtPrv")
                        .HasForeignKey("MplDominantExtPrvId")
                        .HasConstraintName("MPL_FK_3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MplDominantPracPrv")
                        .WithMany("MplMplDominantPracPrv")
                        .HasForeignKey("MplDominantPracPrvId")
                        .HasConstraintName("MPL_FK_2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "MplDominantPrv")
                        .WithMany("MplMplDominantPrv")
                        .HasForeignKey("MplDominantPrvId")
                        .HasConstraintName("MPL_FK_1");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MplLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Mpl", "MplO")
                        .WithMany("MplLink")
                        .HasForeignKey("MplOid")
                        .HasConstraintName("MPL_LINK_FK_1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("MplLink")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("MPL_LINK_FK_2");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MsgAttach", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "BodyO")
                        .WithMany("MsgAttachBodyO")
                        .HasForeignKey("BodyOid")
                        .HasConstraintName("MSG_ATTACH_FK_BODY2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "MsgBodyO")
                        .WithMany("MsgAttachMsgBodyO")
                        .HasForeignKey("MsgBodyOid")
                        .HasConstraintName("MSG_ATTACH_FK_BODY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MsoDetail", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "Logo")
                        .WithMany("MsoDetailLogo")
                        .HasForeignKey("Logoid")
                        .HasConstraintName("FK_MSOD_LOGO_BLOBS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "Notes")
                        .WithMany("MsoDetailNotes")
                        .HasForeignKey("Notesid")
                        .HasConstraintName("FK_MSOD_NOTES_BLOBS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.MsoRegistry", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Key")
                        .WithMany("MsoRegistry")
                        .HasForeignKey("KeyId")
                        .HasConstraintName("FK_MSOREGISTRY_SHORTCODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.NbOutgoing", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.NbOutgoingBatch", "NboBatch")
                        .WithMany("NbOutgoing")
                        .HasForeignKey("NboBatchId")
                        .HasConstraintName("NB_OUTGOING_FK_BATCH_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "NboClaim")
                        .WithMany("NbOutgoing")
                        .HasForeignKey("NboClaimId")
                        .HasConstraintName("NB_OUTGOING_FK_CLAIM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "NboInvoice")
                        .WithMany("NbOutgoingNboInvoice")
                        .HasForeignKey("NboInvoiceId")
                        .HasConstraintName("NB_OUTGOING_FK_INVOICE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "NboPayment")
                        .WithMany("NbOutgoingNboPayment")
                        .HasForeignKey("NboPaymentId")
                        .HasConstraintName("NB_OUTGOING_FK_PAYMENT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Nextofkin", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "LklsIdNxokrelationNavigation")
                        .WithMany("NextofkinLklsIdNxokrelationNavigation")
                        .HasForeignKey("LklsIdNxokrelation")
                        .HasConstraintName("NEXTOFKIN_FK_RELATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "NxokAddrstateNavigation")
                        .WithMany("NextofkinNxokAddrstateNavigation")
                        .HasForeignKey("NxokAddrstate")
                        .HasConstraintName("NEXTOFKIN_FK_NXOK_ADDRSTATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithOne("NextofkinPtnt")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Nextofkin", "PtntId")
                        .HasConstraintName("FOREIGN_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdNxokNavigation")
                        .WithMany("NextofkinPtntIdNxokNavigation")
                        .HasForeignKey("PtntIdNxok")
                        .HasConstraintName("FOREIGN_PTNT_ID_NXOK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.NirDeliveryAttempt", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.NirMessage", "NmParentMsg")
                        .WithMany("NirDeliveryAttempt")
                        .HasForeignKey("NmParentMsgId")
                        .HasConstraintName("NIR_DELIVERY_ATTEMPT_FK_NIR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.NirMessage", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.NirMessage", "NmParentMsg")
                        .WithMany("InverseNmParentMsg")
                        .HasForeignKey("NmParentMsgId")
                        .HasConstraintName("FK_NIR_MSG_NM_PARENT_MSG_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "NmProvider")
                        .WithMany("NirMessage")
                        .HasForeignKey("NmProviderId")
                        .HasConstraintName("FK_NIR_MSG_NM_PROVIDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "NmPtnt")
                        .WithMany("NirMessage")
                        .HasForeignKey("NmPtntId")
                        .HasConstraintName("FK_NIR_MSG_NM_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallaction", "NmRecallAction")
                        .WithMany("NirMessage")
                        .HasForeignKey("NmRecallActionId")
                        .HasConstraintName("FK_NM_RECALL_ACTION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallplan", "NmRecallPlan")
                        .WithMany("NirMessage")
                        .HasForeignKey("NmRecallPlanId")
                        .HasConstraintName("FK_NM_RECALL_PLAN_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallvisit", "NmRecallVisit")
                        .WithMany("NirMessage")
                        .HasForeignKey("NmRecallVisitId")
                        .HasConstraintName("FK_NM_RECALL_VISIT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.NirTask", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallaction", "Prac")
                        .WithOne("NirTask")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.NirTask", "PracId")
                        .HasConstraintName("NIR_TASK_FK_RECALLACTION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OfflineSession", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DeletedbyNavigation")
                        .WithMany("OfflineSessionDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("OFFLINE_SESSION_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("OfflineSessionPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_OFFLINE_SESSION_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("OfflineSessionPppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("OFFLINE_SESSION_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OntarioMessages", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "OmAccNumberNavigation")
                        .WithMany("OntarioMessagesOmAccNumberNavigation")
                        .HasForeignKey("OmAccNumber")
                        .HasConstraintName("FK_ACC_NUMBER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OntarioMessages", "OmParent")
                        .WithMany("InverseOmParent")
                        .HasForeignKey("OmParentId")
                        .HasConstraintName("ONTARIO_MESSAGES_FK_PARENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "OmPayment")
                        .WithMany("OntarioMessagesOmPayment")
                        .HasForeignKey("OmPaymentId")
                        .HasConstraintName("FK_ONTARIO_MESS_PAYMENT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OntarioOutgoing", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "OoClaim")
                        .WithMany("OntarioOutgoing")
                        .HasForeignKey("OoClaimId")
                        .HasConstraintName("FK_OO_CLAIM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "OoInvoice")
                        .WithMany("OntarioOutgoing")
                        .HasForeignKey("OoInvoiceId")
                        .HasConstraintName("ONTARIO_OUTGOING_FK_INVOICE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OntarioOutgoing", "OoParent")
                        .WithMany("InverseOoParent")
                        .HasForeignKey("OoParentId")
                        .HasConstraintName("ONTARIO_OUTGOING_FK_PARENT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OnthegoPrefitem", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OnthegoProfile", "Profile")
                        .WithMany("OnthegoPrefitem")
                        .HasForeignKey("Profileid")
                        .HasConstraintName("FK_ONTHEGO_PREFITEM_PROFILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OnthegoQuickContact", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ContactType")
                        .WithMany("OnthegoQuickContact")
                        .HasForeignKey("ContactTypeId")
                        .HasConstraintName("FK_QCONTACT_CONTACT_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OnthegoProfile", "Profile")
                        .WithMany("OnthegoQuickContact")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_QCONTACT_PROFILE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("OnthegoQuickContact")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_QCONTACT_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OnthegoTaskView", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "FilterByGroupNavigation")
                        .WithMany("OnthegoTaskView")
                        .HasForeignKey("FilterByGroup")
                        .HasConstraintName("FK_TASKVIEW_PROVGROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OnthegoProfile", "Profile")
                        .WithMany("OnthegoTaskView")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_TASKVIEW_PROFILE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrderFormatLine", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProvOrderFormat", "OflPof")
                        .WithMany("OrderFormatLine")
                        .HasForeignKey("OflPofId")
                        .HasConstraintName("OFL_POF_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrderFormData", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "FormBlob")
                        .WithMany("OrderFormData")
                        .HasForeignKey("FormBlobId")
                        .HasConstraintName("FK_ORDFRM_DATA_BLOBID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Orders", "Order")
                        .WithMany("OrderFormData")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ORDFRM_DATA_ORDERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Supplier")
                        .WithMany("OrderFormData")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("ORDR_FRMDT_FK_SUPPLIER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrderItem", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "CdoForm")
                        .WithMany("OrderItem")
                        .HasForeignKey("CdoFormId")
                        .HasConstraintName("OI_FORM_ID_FK_CDO_TD_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Test", "LinkedObjO")
                        .WithMany("OrderItem")
                        .HasForeignKey("LinkedObjOid")
                        .HasConstraintName("FK_ORDERITEM_TEST");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Orders", "ParentOrderNavigation")
                        .WithMany("OrderItem")
                        .HasForeignKey("ParentOrder")
                        .HasConstraintName("OI_FK_PARENT_ORDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Supplier")
                        .WithMany("OrderItem")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("ORDER_ITEM_FK_SUPPLIER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrderResults", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "LabResultO")
                        .WithMany("OrderResults")
                        .HasForeignKey("LabResultOid")
                        .HasConstraintName("ORDER_RESULTS_FK_LAB");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrderItem", "OrdItemNavigation")
                        .WithMany("OrderResults")
                        .HasForeignKey("OrdItem")
                        .HasConstraintName("ORDER_RESULTS_FK_ORD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Orders", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Encounter")
                        .WithMany("Orders")
                        .HasForeignKey("EncounterId")
                        .HasConstraintName("ORDERS_FK_ENCOUNTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Extcopy1Navigation")
                        .WithMany("OrdersExtcopy1Navigation")
                        .HasForeignKey("Extcopy1")
                        .HasConstraintName("EXTPROV_FK_EXTCOPY1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Extcopy2Navigation")
                        .WithMany("OrdersExtcopy2Navigation")
                        .HasForeignKey("Extcopy2")
                        .HasConstraintName("EXTPROV_FK_EXTCOPY2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Payer")
                        .WithMany("Orders")
                        .HasForeignKey("PayerId")
                        .HasConstraintName("ORDERS_FK_PAYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Supplier")
                        .WithMany("OrdersSupplier")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("ORDERS_FK_SUPPLIER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "SupplierType")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierTypeId")
                        .HasConstraintName("ORDERS_FK_SUPPLIER_TYPE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgProvgroupLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "Org")
                        .WithMany("OrgProvgroupLinks")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ORG_PROVGROUP_LINKS_ORGID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "ProviderGroup")
                        .WithMany("OrgProvgroupLinks")
                        .HasForeignKey("ProviderGroupId")
                        .HasConstraintName("FK_ORG_PROVGROUP_LINKS_GROUPID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructure", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "AlertOrganisationNavigation")
                        .WithMany("InverseAlertOrganisationNavigation")
                        .HasForeignKey("AlertOrganisation")
                        .HasConstraintName("ORG_STRUCTURE_FK_ALERT_ORG");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "AlterpatientForm")
                        .WithMany("OrgStructureAlterpatientForm")
                        .HasForeignKey("AlterpatientFormid")
                        .HasConstraintName("FK_ORGSTR_ALTERPAT_FORMID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DefaultAlerttypeNavigation")
                        .WithMany("OrgStructureDefaultAlerttypeNavigation")
                        .HasForeignKey("DefaultAlerttype")
                        .HasConstraintName("DEF_ALERTTYPE_FK_SHCDID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "DisplaypatientForm")
                        .WithMany("OrgStructureDisplaypatientForm")
                        .HasForeignKey("DisplaypatientFormid")
                        .HasConstraintName("FK_ORGSTR_DISPLAYPAT_FORMID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "NewpatientForm")
                        .WithMany("OrgStructureNewpatientForm")
                        .HasForeignKey("NewpatientFormid")
                        .HasConstraintName("FK_ORGSTR_NEWPAT_FORMID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "OsAdmRole")
                        .WithMany("OrgStructureOsAdmRole")
                        .HasForeignKey("OsAdmRoleId")
                        .HasConstraintName("FK_OS_ADM_ROLE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "OsAdminPosNavigation")
                        .WithMany("OrgStructureOsAdminPosNavigation")
                        .HasForeignKey("OsAdminPos")
                        .HasConstraintName("FK_ORG_STRUCTURE_ADMIN_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "OsCaseRole")
                        .WithMany("OrgStructureOsCaseRole")
                        .HasForeignKey("OsCaseRoleId")
                        .HasConstraintName("FK_OS_CASE_ROLE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "OsClnRole")
                        .WithMany("OrgStructureOsClnRole")
                        .HasForeignKey("OsClnRoleId")
                        .HasConstraintName("FK_OS_CLN_ROLE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "OsContactTypeNavigation")
                        .WithMany("OrgStructureOsContactTypeNavigation")
                        .HasForeignKey("OsContactType")
                        .HasConstraintName("OS_CONTACT_TYPE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "OsEquipLoanPosNavigation")
                        .WithMany("OrgStructureOsEquipLoanPosNavigation")
                        .HasForeignKey("OsEquipLoanPos")
                        .HasConstraintName("ORG_STRUCTURE_FK_LOAN_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "OsGuessedRole")
                        .WithMany("OrgStructureOsGuessedRole")
                        .HasForeignKey("OsGuessedRoleId")
                        .HasConstraintName("FK_OS_GUESSED_ROLE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_ORG_STR_PARENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("OrgStructurePppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_ORG_STR_NODE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxsystem", "RxSystem")
                        .WithMany("OrgStructure")
                        .HasForeignKey("RxSystemId")
                        .HasConstraintName("ORGSTRUCTURE_FK_RXSYSTEM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SchdAdminEncMacroNavigation")
                        .WithMany("OrgStructureSchdAdminEncMacroNavigation")
                        .HasForeignKey("SchdAdminEncMacro")
                        .HasConstraintName("FK_ORG_STR_ADM_ENC_MACRO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SchdClinicalEncMacroNavigation")
                        .WithMany("OrgStructureSchdClinicalEncMacroNavigation")
                        .HasForeignKey("SchdClinicalEncMacro")
                        .HasConstraintName("FK_ORG_STR_CLIN_ENC_MACRO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdCareTypeNavigation")
                        .WithMany("OrgStructureShcdCareTypeNavigation")
                        .HasForeignKey("ShcdCareType")
                        .HasConstraintName("FK_ORG_STRUCTURE_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdSubtype")
                        .WithMany("OrgStructureShcdSubtype")
                        .HasForeignKey("ShcdSubtypeId")
                        .HasConstraintName("FK_ORG_STR_SHCD_SUBTYPE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "Template")
                        .WithMany("OrgStructureTemplate")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("ORG_STRUCTURE_FK_CDO_TRANSDA");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "WtbdFromgroupNavigation")
                        .WithMany("OrgStructureWtbdFromgroupNavigation")
                        .HasForeignKey("WtbdFromgroup")
                        .HasConstraintName("FK_ORGSTR_WTBD_FROM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "WtbdTogroupNavigation")
                        .WithMany("OrgStructureWtbdTogroupNavigation")
                        .HasForeignKey("WtbdTogroup")
                        .HasConstraintName("FK_ORGSTR_WTBD_TO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureCasetemplate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseTemplates", "OctCstO")
                        .WithMany("OrgStructureCasetemplate")
                        .HasForeignKey("OctCstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_OCT_CST_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OctOstO")
                        .WithMany("OrgStructureCasetemplate")
                        .HasForeignKey("OctOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_OCT_OST_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureDefaultPType", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "DptOstO")
                        .WithMany("OrgStructureDefaultPType")
                        .HasForeignKey("DptOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_DPT_OT_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureDiseasecode", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "OdcDscd")
                        .WithMany("OrgStructureDiseasecode")
                        .HasForeignKey("OdcDscdId")
                        .HasConstraintName("FK_ORG_STRUCTURE_DC_DSCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OdcOstO")
                        .WithMany("OrgStructureDiseasecode")
                        .HasForeignKey("OdcOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_DC_OST_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureLetter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "OlrLttr")
                        .WithMany("OrgStructureLetter")
                        .HasForeignKey("OlrLttrId")
                        .HasConstraintName("FK_ORG_STRUCTURE_LR_LTTR_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OlrOstO")
                        .WithMany("OrgStructureLetter")
                        .HasForeignKey("OlrOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_LR_OST_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureLookuplist", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "OslLkls")
                        .WithMany("OrgStructureLookuplist")
                        .HasForeignKey("OslLklsId")
                        .HasConstraintName("FK_ORG_STRUCTURE_LL_LKLS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OslOstO")
                        .WithMany("OrgStructureLookuplist")
                        .HasForeignKey("OslOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_LL_OST_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureOwncase", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OsoOstO")
                        .WithMany("OrgStructureOwncase")
                        .HasForeignKey("OsoOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_OC_OST_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "OsoShcd")
                        .WithMany("OrgStructureOwncase")
                        .HasForeignKey("OsoShcdId")
                        .HasConstraintName("FK_ORG_STRUCTURE_OC_SHCD_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureParent", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "Org")
                        .WithMany("OrgStructureParentOrg")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ORG_STRUCTURE_PARENT_ORG_");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "Parent")
                        .WithMany("OrgStructureParentParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_ORG_STRUCTURE_PARENT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructurePppu", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OspOstO")
                        .WithMany("OrgStructurePppu")
                        .HasForeignKey("OspOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_PPPU_OST_OI");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "OspPppu")
                        .WithMany("OrgStructurePppuNavigation")
                        .HasForeignKey("OspPppuId")
                        .HasConstraintName("FK_ORG_STRUCTURE_PPPU_PPPU_I");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureRecallplan", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OrpOstO")
                        .WithMany("OrgStructureRecallplan")
                        .HasForeignKey("OrpOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_RP_OST_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "OrpRcpl")
                        .WithMany("OrgStructureRecallplan")
                        .HasForeignKey("OrpRcplId")
                        .HasConstraintName("FK_ORG_STRUCTURE_RP_RCPL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureRole", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "OrlAprO")
                        .WithMany("OrgStructureRole")
                        .HasForeignKey("OrlAprOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_RL_APR_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OrlOstO")
                        .WithMany("OrgStructureRole")
                        .HasForeignKey("OrlOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_RL_OST_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureRvtemplate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OvtOstO")
                        .WithMany("OrgStructureRvtemplate")
                        .HasForeignKey("OvtOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_VT_OST_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallvisittemplate", "OvtRvtO")
                        .WithMany("OrgStructureRvtemplate")
                        .HasForeignKey("OvtRvtOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_VT_RVT_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureService", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OsrOstO")
                        .WithMany("OrgStructureService")
                        .HasForeignKey("OsrOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_SR_OST_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "OsrSrvc")
                        .WithMany("OrgStructureService")
                        .HasForeignKey("OsrSrvcId")
                        .HasConstraintName("FK_ORG_STRUCTURE_SR_SRVC_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureShortcode", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OssOstO")
                        .WithMany("OrgStructureShortcode")
                        .HasForeignKey("OssOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_SC_OST_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "OssShcd")
                        .WithMany("OrgStructureShortcode")
                        .HasForeignKey("OssShcdId")
                        .HasConstraintName("FK_ORG_STRUCTURE_SC_SHCD_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.OrgStructureTrans", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OtrOstO")
                        .WithMany("OrgStructureTrans")
                        .HasForeignKey("OtrOstOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_TRANS_OST_O");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "OtrTrnO")
                        .WithMany("OrgStructureTrans")
                        .HasForeignKey("OtrTrnOid")
                        .HasConstraintName("FK_ORG_STRUCTURE_TRANS_TRN_O");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Partition", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Partition", "PartitionContainer")
                        .WithMany("InversePartitionContainer")
                        .HasForeignKey("PartitionContainerId")
                        .HasConstraintName("PARTITION_FK_CONTAINER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PartitionStructure", "PartitionStructure")
                        .WithMany("Partition")
                        .HasForeignKey("PartitionStructureId")
                        .HasConstraintName("FK_PARTITION_STRUCTURE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PartitionBusiness", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "PatientpppuCdoPerson")
                        .WithMany("PartitionBusiness")
                        .HasForeignKey("PatientpppuCdoPersonId")
                        .HasConstraintName("FK_PATIENTPPPU_CDO_PERSON_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbAdmin")
                        .WithMany("PartitionBusinessPrtbAdmin")
                        .HasForeignKey("PrtbAdminId")
                        .HasConstraintName("FK_PRTB_ADMIN_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbAnonymous")
                        .WithMany("PartitionBusinessPrtbAnonymous")
                        .HasForeignKey("PrtbAnonymousId")
                        .HasConstraintName("FK_PRTB_ANONYMOUS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "PrtbCdoOrganization")
                        .WithMany("PartitionBusiness")
                        .HasForeignKey("PrtbCdoOrganizationId")
                        .HasConstraintName("PARTBUS_FK_ORGANIZATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbDefaultPos")
                        .WithMany("PartitionBusinessPrtbDefaultPos")
                        .HasForeignKey("PrtbDefaultPosId")
                        .HasConstraintName("FK_PRTB_DEFAULT_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbEmergency")
                        .WithMany("PartitionBusinessPrtbEmergency")
                        .HasForeignKey("PrtbEmergencyId")
                        .HasConstraintName("FK_PRTB_EMERGENCY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbExtProv")
                        .WithMany("PartitionBusinessPrtbExtProv")
                        .HasForeignKey("PrtbExtProvId")
                        .HasConstraintName("FK_PRTB_EXT_PROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbIntrahealth")
                        .WithMany("PartitionBusinessPrtbIntrahealth")
                        .HasForeignKey("PrtbIntrahealthId")
                        .HasConstraintName("FK_PRTB_INTRAHEALTH_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbMsodelegate")
                        .WithMany("PartitionBusinessPrtbMsodelegate")
                        .HasForeignKey("PrtbMsodelegateId")
                        .HasConstraintName("FK_PRTB_MSODELEGATE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbPatientpppu")
                        .WithMany("PartitionBusinessPrtbPatientpppu")
                        .HasForeignKey("PrtbPatientpppuId")
                        .HasConstraintName("FK_PRTB_PATIENTPPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbPos")
                        .WithMany("PartitionBusinessPrtbPos")
                        .HasForeignKey("PrtbPosId")
                        .HasConstraintName("FK_PRTB_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AddressPartition", "PrtbPostaladdress")
                        .WithMany("PartitionBusinessPrtbPostaladdress")
                        .HasForeignKey("PrtbPostaladdressId")
                        .HasConstraintName("FK_PRTB_AP_POSTALADDRESS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbPractice")
                        .WithMany("PartitionBusinessPrtbPractice")
                        .HasForeignKey("PrtbPracticeId")
                        .HasConstraintName("FK_PRTB_PRACTICE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PrtbReferenceSystem")
                        .WithMany("PartitionBusinessPrtbReferenceSystem")
                        .HasForeignKey("PrtbReferenceSystemId")
                        .HasConstraintName("FK_PRTB_SC_REFERENCE_SYSTEM_");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PrtbSourcesoftware")
                        .WithMany("PartitionBusinessPrtbSourcesoftware")
                        .HasForeignKey("PrtbSourcesoftwareId")
                        .HasConstraintName("FK_PRTB_SC_SOURCESOFTWARE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PrtbSpecialtyConcept")
                        .WithMany("PartitionBusinessPrtbSpecialtyConcept")
                        .HasForeignKey("PrtbSpecialtyConceptId")
                        .HasConstraintName("FK_PRTB_SPECIALTY_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AddressPartition", "PrtbStreetaddress")
                        .WithMany("PartitionBusinessPrtbStreetaddress")
                        .HasForeignKey("PrtbStreetaddressId")
                        .HasConstraintName("FK_PRTB_AP_STREETADDRESS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PrtbTypeConcept")
                        .WithMany("PartitionBusinessPrtbTypeConcept")
                        .HasForeignKey("PrtbTypeConceptId")
                        .HasConstraintName("FK_PRTB_TYPE_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrtbUnspecifiedpppu")
                        .WithMany("PartitionBusinessPrtbUnspecifiedpppu")
                        .HasForeignKey("PrtbUnspecifiedpppuId")
                        .HasConstraintName("FK_PRTB_UNSPECIFIEDPPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PartitionComplexFilter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.FindObjects", "FindObjectO")
                        .WithMany("PartitionComplexFilter")
                        .HasForeignKey("FindObjectOid")
                        .HasConstraintName("PCF_COMP_FILTER_FK_FIND_OBJ");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PartitionStructure", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PartitionStructure", "ParentNodeNavigation")
                        .WithMany("InverseParentNodeNavigation")
                        .HasForeignKey("ParentNode")
                        .HasConstraintName("PARTITION_STRUCTURE_SELF_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patient", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PATIENT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PATIENT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "LklsIdEthnicityNavigation")
                        .WithMany("PatientLklsIdEthnicityNavigation")
                        .HasForeignKey("LklsIdEthnicity")
                        .HasConstraintName("FOREIGN_LKLS_ID_ETHNICITY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "LklsIdEthnicity2Navigation")
                        .WithMany("PatientLklsIdEthnicity2Navigation")
                        .HasForeignKey("LklsIdEthnicity2")
                        .HasConstraintName("PATIENT_FK_LKLS_ID_ETHNICIT2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "LklsIdEthnicity3Navigation")
                        .WithMany("PatientLklsIdEthnicity3Navigation")
                        .HasForeignKey("LklsIdEthnicity3")
                        .HasConstraintName("PATIENT_FK_LKLS_ID_ETHNICIT3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "LklsIdMaritalstatusNavigation")
                        .WithMany("PatientLklsIdMaritalstatusNavigation")
                        .HasForeignKey("LklsIdMaritalstatus")
                        .HasConstraintName("FOREIGN_LKLS_ID_MARITALSTATU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "LklsIdOccupationNavigation")
                        .WithMany("PatientLklsIdOccupationNavigation")
                        .HasForeignKey("LklsIdOccupation")
                        .HasConstraintName("FOREIGN_LKLS_ID_OCCUPATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "LklsIdReligionNavigation")
                        .WithMany("PatientLklsIdReligionNavigation")
                        .HasForeignKey("LklsIdReligion")
                        .HasConstraintName("FOREIGN_LKLS_ID_RELIGION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdAltdrNavigation")
                        .WithMany("PatientPppuIdAltdrNavigation")
                        .HasForeignKey("PppuIdAltdr")
                        .HasConstraintName("FOREIGN_PPPU_ID_ALTDR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdUsualdrNavigation")
                        .WithMany("PatientPppuIdUsualdrNavigation")
                        .HasForeignKey("PppuIdUsualdr")
                        .HasConstraintName("FOREIGN_PPPU_ID_USUALDR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PtntDeletedUser")
                        .WithMany("PatientPtntDeletedUser")
                        .HasForeignKey("PtntDeletedUserid")
                        .HasConstraintName("FK_PTNT_DELETED_USERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntEmployer")
                        .WithMany("InversePtntEmployer")
                        .HasForeignKey("PtntEmployerId")
                        .HasConstraintName("PTNT_FK_EMPLOYER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PtntFamilyhxO")
                        .WithMany("PatientPtntFamilyhxO")
                        .HasForeignKey("PtntFamilyhxOid")
                        .HasConstraintName("PATIENT_FK_PTNT_FAMILYHX_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdGuarantorNavigation")
                        .WithMany("InversePtntIdGuarantorNavigation")
                        .HasForeignKey("PtntIdGuarantor")
                        .HasConstraintName("FOREIGN_PTNT_ID_GUARANTOR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdInsurerNavigation")
                        .WithMany("InversePtntIdInsurerNavigation")
                        .HasForeignKey("PtntIdInsurer")
                        .HasConstraintName("PTNT_FOREIGN_INSURER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdPartnerNavigation")
                        .WithMany("InversePtntIdPartnerNavigation")
                        .HasForeignKey("PtntIdPartner")
                        .HasConstraintName("FOREIGN_PTNT_ID_PARTNER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntLeadcaregiverNavigation")
                        .WithMany("InversePtntLeadcaregiverNavigation")
                        .HasForeignKey("PtntLeadcaregiver")
                        .HasConstraintName("PATIENT_FK_LEADCAREGIVER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PtntLeadcarerelNavigation")
                        .WithMany("PatientPtntLeadcarerelNavigation")
                        .HasForeignKey("PtntLeadcarerel")
                        .HasConstraintName("FK_PAT_LEADCARE_REL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntMasterPtnt")
                        .WithMany("InversePtntMasterPtnt")
                        .HasForeignKey("PtntMasterPtntId")
                        .HasConstraintName("FK_PTNT_MASTER_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PtntNamesuffixNavigation")
                        .WithMany("PatientPtntNamesuffixNavigation")
                        .HasForeignKey("PtntNamesuffix")
                        .HasConstraintName("FK_PTNT_NAMESUFFIX_SHORTCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PtntObstetricHxO")
                        .WithMany("PatientPtntObstetricHxO")
                        .HasForeignKey("PtntObstetricHxOid")
                        .HasConstraintName("PATIENT_FK_PTNT_OBSTETRIC_HX");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "PtntOrg")
                        .WithMany("Patient")
                        .HasForeignKey("PtntOrgId")
                        .HasConstraintName("FK_PATIENT_ORG_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntParent1Navigation")
                        .WithMany("InversePtntParent1Navigation")
                        .HasForeignKey("PtntParent1")
                        .HasConstraintName("FK_PATIENT_PARENT1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PtntParent1relNavigation")
                        .WithMany("PatientPtntParent1relNavigation")
                        .HasForeignKey("PtntParent1rel")
                        .HasConstraintName("FK_PAT_PARENT1_REL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntParent2Navigation")
                        .WithMany("InversePtntParent2Navigation")
                        .HasForeignKey("PtntParent2")
                        .HasConstraintName("FK_PATIENT_PARENT2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PtntParent2relNavigation")
                        .WithMany("PatientPtntParent2relNavigation")
                        .HasForeignKey("PtntParent2rel")
                        .HasConstraintName("FK_PAT_PARENT2_REL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PtntPasthxO")
                        .WithMany("PatientPtntPasthxO")
                        .HasForeignKey("PtntPasthxOid")
                        .HasConstraintName("PATIENT_FK_PTNT_PASTHX_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntPayer")
                        .WithMany("InversePtntPayer")
                        .HasForeignKey("PtntPayerId")
                        .HasConstraintName("PATIENT_FK_PAYER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PtntPostalstateNavigation")
                        .WithMany("PatientPtntPostalstateNavigation")
                        .HasForeignKey("PtntPostalstate")
                        .HasConstraintName("PATIENT_FK_PTNT_POSTALSTATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PtntSocialhxO")
                        .WithMany("PatientPtntSocialhxO")
                        .HasForeignKey("PtntSocialhxOid")
                        .HasConstraintName("PATIENT_FK_PTNT_SOCIALHX_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PtntSocialhxSrcProvider")
                        .WithMany("PatientPtntSocialhxSrcProvider")
                        .HasForeignKey("PtntSocialhxSrcProviderid")
                        .HasConstraintName("FK_PPPU_SOCLHX_SRC_PROVIDERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PtntSrcProvider")
                        .WithMany("PatientPtntSrcProvider")
                        .HasForeignKey("PtntSrcProviderid")
                        .HasConstraintName("FK_PPPU_PTNT_SRC_PROVIDERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PtntStreetstateNavigation")
                        .WithMany("PatientPtntStreetstateNavigation")
                        .HasForeignKey("PtntStreetstate")
                        .HasConstraintName("PATIENT_FK_PTNT_STREETSTATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PtntTransferStatusChangedByNavigation")
                        .WithMany("PatientPtntTransferStatusChangedByNavigation")
                        .HasForeignKey("PtntTransferStatusChangedBy")
                        .HasConstraintName("PATIENT_FK_TRANSFER_CHANGED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PtntWorkstateNavigation")
                        .WithMany("PatientPtntWorkstateNavigation")
                        .HasForeignKey("PtntWorkstate")
                        .HasConstraintName("PATIENT_FK_PTNT_WORKSTATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdBenefittypeNavigation")
                        .WithMany("PatientShcdIdBenefittypeNavigation")
                        .HasForeignKey("ShcdIdBenefittype")
                        .HasConstraintName("FK_PTNT_BEN_TP_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdHealthstatusNavigation")
                        .WithMany("PatientShcdIdHealthstatusNavigation")
                        .HasForeignKey("ShcdIdHealthstatus")
                        .HasConstraintName("FK_PTNT_HEAL_ST_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdHomelanguageNavigation")
                        .WithMany("PatientShcdIdHomelanguageNavigation")
                        .HasForeignKey("ShcdIdHomelanguage")
                        .HasConstraintName("PATIENT_FK_SHCD_ID_HOMELANGU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdJournalsNavigation")
                        .WithMany("PatientShcdIdJournalsNavigation")
                        .HasForeignKey("ShcdIdJournals")
                        .HasConstraintName("PATIENT_FK_SHCD_ID_JOURNALS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdLivingsituationNavigation")
                        .WithMany("PatientShcdIdLivingsituationNavigation")
                        .HasForeignKey("ShcdIdLivingsituation")
                        .HasConstraintName("FK_PTNT_LIV_SIT_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdPlanNavigation")
                        .WithMany("PatientShcdIdPlanNavigation")
                        .HasForeignKey("ShcdIdPlan")
                        .HasConstraintName("PTNT_FOREIGN_PLAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdPreflanguageNavigation")
                        .WithMany("PatientShcdIdPreflanguageNavigation")
                        .HasForeignKey("ShcdIdPreflanguage")
                        .HasConstraintName("PATIENT_FK_SHCD_ID_PREFLANGU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdServicecategoryNavigation")
                        .WithMany("PatientShcdIdServicecategoryNavigation")
                        .HasForeignKey("ShcdIdServicecategory")
                        .HasConstraintName("FK_PTNT_SER_CAT_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdServicediscountNavigation")
                        .WithMany("PatientShcdIdServicediscountNavigation")
                        .HasForeignKey("ShcdIdServicediscount")
                        .HasConstraintName("PTNT_FOREIGN_SERVICEDISCOUNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdServicerateNavigation")
                        .WithMany("PatientShcdIdServicerateNavigation")
                        .HasForeignKey("ShcdIdServicerate")
                        .HasConstraintName("PTNT_FOREIGN_SERVICERATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdTargettypeNavigation")
                        .WithMany("PatientShcdIdTargettypeNavigation")
                        .HasForeignKey("ShcdIdTargettype")
                        .HasConstraintName("FK_PTNT_TRG_TP_SHCD_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientAlternatName", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientAlternatNameCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_PTALTNAME_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientAlternatNameDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("FK_PTALTNAME_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientAlternatName", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PTAN_PTAN_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtanPtnt")
                        .WithMany("PatientAlternatName")
                        .HasForeignKey("PtanPtntId")
                        .HasConstraintName("PAT_ALTERNAT_NAME_PATIENT_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientAudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "ObserverPtnt")
                        .WithMany("PatientAuditObserverPtnt")
                        .HasForeignKey("ObserverPtntId")
                        .HasConstraintName("FK_PAUDIT_OBSPTNTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PaudtPppu")
                        .WithMany("PatientAudit")
                        .HasForeignKey("PaudtPppuId")
                        .HasConstraintName("PATIENT_AUDIT_FK_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PaudtPtnt")
                        .WithMany("PatientAuditPaudtPtnt")
                        .HasForeignKey("PaudtPtntId")
                        .HasConstraintName("PATIENT_AUDIT_FK_PTNT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientAuditDetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientAudit", "PadAudit")
                        .WithMany("PatientAuditDetails")
                        .HasForeignKey("PadAuditId")
                        .HasConstraintName("PAD_AUDIT_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientcard", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtcdPayer")
                        .WithMany("PatientcardPtcdPayer")
                        .HasForeignKey("PtcdPayerId")
                        .HasConstraintName("FK_PATIENTCARD_PAYER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PtcdRateNavigation")
                        .WithMany("Patientcard")
                        .HasForeignKey("PtcdRate")
                        .HasConstraintName("FK_PATIENTCARD_RATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("PatientcardPtnt")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("PATIENTCARDFOREIGNKEY1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientcard", "TemplateO")
                        .WithMany("InverseTemplateO")
                        .HasForeignKey("TemplateOid")
                        .HasConstraintName("FK_PATIENTCARD_TEMP_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientClinicaldetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AlcoholSrcProvider")
                        .WithMany("PatientClinicaldetailsAlcoholSrcProvider")
                        .HasForeignKey("AlcoholSrcProviderid")
                        .HasConstraintName("FK_PPPU_ALCOHOL_SRC_PROVIDERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "BirthGenderNavigation")
                        .WithMany("PatientClinicaldetailsBirthGenderNavigation")
                        .HasForeignKey("BirthGender")
                        .HasConstraintName("PTNT_CLDETAILS_BIRTH_GENDER_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientClinicaldetailsCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PTCD_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientClinicaldetailsDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PTCD_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientClinicaldetails", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PTCD_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PatientClinicaldetails")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PATIENT_CLINICALDETAILS_FK_P");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "Referral")
                        .WithMany("PatientClinicaldetails")
                        .HasForeignKey("ReferralId")
                        .HasConstraintName("PATIENT_CLINICALDETAILS_FK_R");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SexIdentityNavigation")
                        .WithMany("PatientClinicaldetailsSexIdentityNavigation")
                        .HasForeignKey("SexIdentity")
                        .HasConstraintName("PTNT_CLDETAILS_SEX_IDENTITY_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SexOrientNavigation")
                        .WithMany("PatientClinicaldetailsSexOrientNavigation")
                        .HasForeignKey("SexOrient")
                        .HasConstraintName("PTNT_CLDETAILS_SEX_ORIENT_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SmokerSrcProvider")
                        .WithMany("PatientClinicaldetailsSmokerSrcProvider")
                        .HasForeignKey("SmokerSrcProviderid")
                        .HasConstraintName("FK_PPPU_SMOKER_SRC_PROVIDERID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientCmsfields", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "CmsPatient")
                        .WithMany("PatientCmsfields")
                        .HasForeignKey("CmsPatientId")
                        .HasConstraintName("CMS_FK_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientDeleteLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtdlPatientNavigation")
                        .WithMany("PatientDeleteLog")
                        .HasForeignKey("PtdlPatient")
                        .HasConstraintName("FK_PTDL_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PtdlUserNavigation")
                        .WithMany("PatientDeleteLog")
                        .HasForeignKey("PtdlUser")
                        .HasConstraintName("FK_PTDL_USER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientEmployment", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "AddressStateNavigation")
                        .WithMany("PatientEmploymentAddressStateNavigation")
                        .HasForeignKey("AddressState")
                        .HasConstraintName("PATIENT_EMPL_FK_ADDR_STATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "EmployerNavigation")
                        .WithMany("PatientEmploymentEmployerNavigation")
                        .HasForeignKey("Employer")
                        .HasConstraintName("PATIENT_EMPL_FK_EMPLOYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "OccupationNavigation")
                        .WithMany("PatientEmploymentOccupationNavigation")
                        .HasForeignKey("Occupation")
                        .HasConstraintName("PATIENT_EMPL_FK_OCCUPATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PatientNavigation")
                        .WithMany("PatientEmploymentPatientNavigation")
                        .HasForeignKey("Patient")
                        .HasConstraintName("PATIENT_EMPL_FK_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientextdr", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Expr")
                        .WithMany("Patientextdr")
                        .HasForeignKey("ExprId")
                        .HasConstraintName("PATIENTEXTDR_FK_EXPR_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("Patientextdr")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("PATIENTEXTDR_FK_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Textitem", "TxitTypeNavigation")
                        .WithMany("Patientextdr")
                        .HasForeignKey("TxitType")
                        .HasConstraintName("FK_PATIENTEXTDR_TEXTITEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientFamilyProblems", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientFamilyProblemsCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PFP_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientFamilyProblemsDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PFP_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientFamilyProblems", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PFP_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "PfpDx")
                        .WithMany("PatientFamilyProblems")
                        .HasForeignKey("PfpDxId")
                        .HasConstraintName("FK_PFP_DX_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PfpLifeStage")
                        .WithMany("PatientFamilyProblems")
                        .HasForeignKey("PfpLifeStageId")
                        .HasConstraintName("FK_PTNTFMPRBL_LFSTG_TO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PfpPatientNavigation")
                        .WithMany("PatientFamilyProblemsPfpPatientNavigation")
                        .HasForeignKey("PfpPatient")
                        .HasConstraintName("FK_PFP_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PfpRelatPatientNavigation")
                        .WithMany("PatientFamilyProblemsPfpRelatPatientNavigation")
                        .HasForeignKey("PfpRelatPatient")
                        .HasConstraintName("FK_PFP_RELAT_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PfpRelationshipNavigation")
                        .WithMany("PatientFamilyProblems")
                        .HasForeignKey("PfpRelationship")
                        .HasConstraintName("FK_PFP_RELATIONSHIP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PfpSrcProvider")
                        .WithMany("PatientFamilyProblems")
                        .HasForeignKey("PfpSrcProviderid")
                        .HasConstraintName("FK_PPPU_PFP_SRC_PROVIDERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "ProblemNotesNavigation")
                        .WithMany("PatientFamilyProblems")
                        .HasForeignKey("ProblemNotes")
                        .HasConstraintName("FK_PATFP_NOTES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientFilter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PfProblemConcept")
                        .WithMany("PatientFilter")
                        .HasForeignKey("PfProblemConceptId")
                        .HasConstraintName("PF_PROBLEM_CONCEPT_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientFolder", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientFolderCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PATIENT_FOLDER_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientFolderDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PATIENT_FOLDER_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientFolder", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PATIENT_FOLDER_FK_MASTER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientGrp", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PatientGrp")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PATIENT_GRP_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientGrpLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientGrp", "GrpO")
                        .WithMany("PatientGrpLink")
                        .HasForeignKey("GrpOid")
                        .HasConstraintName("PATIENT_GRP_LINK_FK_GRP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PatientGrpLink")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PATIENT_GRP_LINK_FK_PTNT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientIhi", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientIhiCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PT_IHI_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientIhiDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PT_IHI_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientIhi", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PT_IHI_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PatientIhi")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_PATIENT_IHI_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientInfoAudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "ObserverPtnt")
                        .WithMany("PatientInfoAuditObserverPtnt")
                        .HasForeignKey("ObserverPtntId")
                        .HasConstraintName("FK_PIAUDIT_OBSPTNTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PiaudPppu")
                        .WithMany("PatientInfoAudit")
                        .HasForeignKey("PiaudPppuId")
                        .HasConstraintName("FK_PAT_INFO_AUDIT_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PiaudPtnt")
                        .WithMany("PatientInfoAuditPiaudPtnt")
                        .HasForeignKey("PiaudPtntId")
                        .HasConstraintName("FK_PAT_INFO_AUDIT_PTNT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientInfoAuditDetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientInfoAudit", "PiadAudit")
                        .WithMany("PatientInfoAuditDetails")
                        .HasForeignKey("PiadAuditId")
                        .HasConstraintName("FK_PIAD_AUDIT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientmaternity", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "PtmtCdoHistoryNavigation")
                        .WithMany("Patientmaternity")
                        .HasForeignKey("PtmtCdoHistory")
                        .HasConstraintName("PTNTMT_FK_CDO_HISTORY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithOne("Patientmaternity")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Patientmaternity", "PtntId")
                        .HasConstraintName("PTMT_PRIMARY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMemo", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientMemoCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PM__FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientMemoDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PM__FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientMemo", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PM__FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PmPtnt")
                        .WithMany("PatientMemo")
                        .HasForeignKey("PmPtntId")
                        .HasConstraintName("PATIENT_MEMO_FK_PM_PTNT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMentalHealth", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PmhLocation")
                        .WithMany("PatientMentalHealthPmhLocation")
                        .HasForeignKey("PmhLocationId")
                        .HasConstraintName("FK_PMH_LOCATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PmhPatient")
                        .WithOne("PatientMentalHealth")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.PatientMentalHealth", "PmhPatientId")
                        .HasConstraintName("FK_PMH_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PmhState")
                        .WithMany("PatientMentalHealthPmhState")
                        .HasForeignKey("PmhStateId")
                        .HasConstraintName("FK_PMH_STATE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMentalHealthLegalSt", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientMentalHealth", "PmhlOwnerNavigation")
                        .WithMany("PatientMentalHealthLegalSt")
                        .HasForeignKey("PmhlOwner")
                        .HasConstraintName("FK_PATIENT_M_H_LEGAL_ST_OWNER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PmhlStatusNavigation")
                        .WithMany("PatientMentalHealthLegalSt")
                        .HasForeignKey("PmhlStatus")
                        .HasConstraintName("FK_PATIENT_M_H_LEGAL_ST_STATUS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMentalHealthLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MentalEvents", "PmhlEvent")
                        .WithOne("PatientMentalHealthLog")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.PatientMentalHealthLog", "PmhlEventId")
                        .HasConstraintName("FK_PMHL_EVENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PmhlLocation")
                        .WithMany("PatientMentalHealthLogPmhlLocation")
                        .HasForeignKey("PmhlLocationId")
                        .HasConstraintName("FK_PMHL_LOCATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PmhlState")
                        .WithMany("PatientMentalHealthLogPmhlState")
                        .HasForeignKey("PmhlStateId")
                        .HasConstraintName("FK_PMHL_STATE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientmerge", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Duplicate")
                        .WithMany("PatientmergeDuplicate")
                        .HasForeignKey("DuplicateId")
                        .HasConstraintName("FK_PTNTMERGE_DUPLICATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Master")
                        .WithMany("PatientmergeMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("FK_PTNTMERGE_MASTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMergeDetail", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientMergeLog", "MergeLog")
                        .WithMany("PatientMergeDetail")
                        .HasForeignKey("MergeLogId")
                        .HasConstraintName("PTNT_MERGE_DTL_FK_MERGELOG_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientMergeRef", "MergeRef")
                        .WithMany("PatientMergeDetail")
                        .HasForeignKey("MergeRefId")
                        .HasConstraintName("PTNT_MERGE_DTL_FK_MERGEREF_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientMergeLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("PatientMergeLog")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("PTNT_MERGE_LOG_FK_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Master")
                        .WithMany("PatientMergeLogMaster")
                        .HasForeignKey("Masterid")
                        .HasConstraintName("PATIENT_MERGE_LOG_FK_MASTERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Sub")
                        .WithMany("PatientMergeLogSub")
                        .HasForeignKey("Subid")
                        .HasConstraintName("PATIENT_MERGE_LOG_FK_SUBID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientPassword", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientPasswordCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PAT_PASS_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientPasswordDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PAT_PASS_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientPassword", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PAT_PASS_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PatientPassword")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PATIENT_PASSWORD_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientPayDetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientPayDetailsCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PPD__FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientPayDetailsDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PPD__FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientPayDetails", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PPD__FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PpdPtnt")
                        .WithMany("PatientPayDetails")
                        .HasForeignKey("PpdPtntId")
                        .HasConstraintName("PPD_FK_PTNT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientproblem", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("Patientproblem")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("PATPROB_CASE_ID_FK_BCASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ClosedbyNavigation")
                        .WithMany("PatientproblemClosedbyNavigation")
                        .HasForeignKey("Closedby")
                        .HasConstraintName("FK_PPR_CLOSEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientproblemCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PATIENTPROBLEM_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientproblemDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PATIENTPROBLEM_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Expr")
                        .WithMany("PatientproblemExpr")
                        .HasForeignKey("ExprId")
                        .HasConstraintName("PAPR_FOREIGN_EXPR_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExternalEntity", "ExternalEntity")
                        .WithMany("Patientproblem")
                        .HasForeignKey("ExternalEntityId")
                        .HasConstraintName("FK_PTNTPRBL_EXTERNAL_ENTITY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Indication")
                        .WithMany("PatientproblemIndication")
                        .HasForeignKey("IndicationId")
                        .HasConstraintName("FK_PROBLEM_INDICATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LifeStageFrom")
                        .WithMany("PatientproblemLifeStageFrom")
                        .HasForeignKey("LifeStageFromId")
                        .HasConstraintName("FK_PTNTPRBL_LFSTG_FROM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LifeStageIndication")
                        .WithMany("PatientproblemLifeStageIndication")
                        .HasForeignKey("LifeStageIndicationId")
                        .HasConstraintName("FK_PTNTPRBL_LFSTG_IND");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LifeStageTo")
                        .WithMany("PatientproblemLifeStageTo")
                        .HasForeignKey("LifeStageToId")
                        .HasConstraintName("FK_PTNTPRBL_LFSTG_TO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "PaprAlertorganisationNavigation")
                        .WithMany("Patientproblem")
                        .HasForeignKey("PaprAlertorganisation")
                        .HasConstraintName("FK_PATIENTPROBLEM_ORGSTRUCTU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PaprAnatomy")
                        .WithMany("PatientproblemPaprAnatomy")
                        .HasForeignKey("PaprAnatomyId")
                        .HasConstraintName("PAPR_ANATOMY_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PaprCasealerttypeNavigation")
                        .WithMany("PatientproblemPaprCasealerttypeNavigation")
                        .HasForeignKey("PaprCasealerttype")
                        .HasConstraintName("PAPR_IND_CASEALERT_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientproblem", "PaprCoMorbidToNavigation")
                        .WithMany("InversePaprCoMorbidToNavigation")
                        .HasForeignKey("PaprCoMorbidTo")
                        .HasConstraintName("FK_PAPR_CO_MORBID_TO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "PaprDx")
                        .WithMany("PatientproblemPaprDx")
                        .HasForeignKey("PaprDxid")
                        .HasConstraintName("PAPR_FOREIGN_DX_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PaprDxnatureNavigation")
                        .WithMany("PatientproblemPaprDxnatureNavigation")
                        .HasForeignKey("PaprDxnature")
                        .HasConstraintName("PATPROB_FK_DXNATURE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PaprLocation")
                        .WithMany("PatientproblemPaprLocation")
                        .HasForeignKey("PaprLocationId")
                        .HasConstraintName("PAPR_LOCATION_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PaprOutcome")
                        .WithMany("PatientproblemPaprOutcome")
                        .HasForeignKey("PaprOutcomeid")
                        .HasConstraintName("PATPROB_OUTCOMEID_FK_SHORTCO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PaprPppuidaddedNavigation")
                        .WithMany("PatientproblemPaprPppuidaddedNavigation")
                        .HasForeignKey("PaprPppuidadded")
                        .HasConstraintName("PAPR_FOREIGN_PPPUID_ADDED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PaprPppuidalteredNavigation")
                        .WithMany("PatientproblemPaprPppuidalteredNavigation")
                        .HasForeignKey("PaprPppuidaltered")
                        .HasConstraintName("PAPR_FOREIGN_PPPUID_ALTERED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PaprPrivateToPosNavigation")
                        .WithMany("PatientproblemPaprPrivateToPosNavigation")
                        .HasForeignKey("PaprPrivateToPos")
                        .HasConstraintName("PATIENTPROBLEM_FK_PRV_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PaprProvider")
                        .WithMany("PatientproblemPaprProvider")
                        .HasForeignKey("PaprProviderId")
                        .HasConstraintName("PAPR_FOREIGN_PROVIDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "PaprService")
                        .WithMany("Patientproblem")
                        .HasForeignKey("PaprServiceId")
                        .HasConstraintName("FK_PATIENTPROBLEM_SERVICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("PatientproblemPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("PATIENTPROBLEM_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("Patientproblem")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("PAPR_FOREIGN_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "Referral")
                        .WithMany("Patientproblem")
                        .HasForeignKey("ReferralId")
                        .HasConstraintName("FK_PROBLEM_REFERRAL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "RoleO")
                        .WithMany("Patientproblem")
                        .HasForeignKey("RoleOid")
                        .HasConstraintName("PAPR_FK_ROLE_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallaction", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientrecallactionCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PATRECALLACTION_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientrecallactionDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PATRECALLACTION_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExternalEntity", "ExternalEntity")
                        .WithMany("Patientrecallaction")
                        .HasForeignKey("ExternalEntityId")
                        .HasConstraintName("FK_PRAC_EXTERNAL_ENTITY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallaction", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PATIENTRECALLACTION_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PracBlobdata")
                        .WithMany("Patientrecallaction")
                        .HasForeignKey("PracBlobdataId")
                        .HasConstraintName("FK_PATIENTACTION_BLOBDATA");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanaction", "PracCareaction")
                        .WithMany("Patientrecallaction")
                        .HasForeignKey("PracCareactionid")
                        .HasConstraintName("FK_PATIENTACTION_CAREACTION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PracExplanation")
                        .WithMany("Patientrecallaction")
                        .HasForeignKey("PracExplanationid")
                        .HasConstraintName("FK_ACTION_EXPLANATIONID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PracExtprov")
                        .WithMany("PatientrecallactionPracExtprov")
                        .HasForeignKey("PracExtprovId")
                        .HasConstraintName("FK_EXTPROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "PracFormO")
                        .WithMany("Patientrecallaction")
                        .HasForeignKey("PracFormOid")
                        .HasConstraintName("FK_PRAC_FORM_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "PracForm")
                        .WithMany("Patientrecallaction")
                        .HasForeignKey("PracFormid")
                        .HasConstraintName("FK_PRAC_FORM_TRANS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PracGivenbyExtprov")
                        .WithMany("PatientrecallactionPracGivenbyExtprov")
                        .HasForeignKey("PracGivenbyExtprovId")
                        .HasConstraintName("FK_GIVENBY_EXTPROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PracGivenby")
                        .WithMany("PatientrecallactionPracGivenby")
                        .HasForeignKey("PracGivenbyId")
                        .HasConstraintName("FK_PRAC_GIVENBY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "PracLetter")
                        .WithMany("Patientrecallaction")
                        .HasForeignKey("PracLetterId")
                        .HasConstraintName("FK_PRAC_LETTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PracPppu")
                        .WithMany("PatientrecallactionPracPppu")
                        .HasForeignKey("PracPppuId")
                        .HasConstraintName("FK_PRAC_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallvisit", "PracPrvs")
                        .WithMany("Patientrecallaction")
                        .HasForeignKey("PracPrvsId")
                        .HasConstraintName("PTNTRECALLACTIONFOREIGNKEY1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recommendation", "PracRecommendation")
                        .WithMany("Patientrecallaction")
                        .HasForeignKey("PracRecommendationId")
                        .HasConstraintName("PRAC_RECOMMENDATION_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallactivity", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientrecallactivityCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PATIENTRECALLACT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientrecallactivityDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PATIENTRECALLACT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallactivity", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PATIENTRECALLACTIVIT_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PratPerson")
                        .WithMany("Patientrecallactivity")
                        .HasForeignKey("PratPersonid")
                        .HasConstraintName("FK_PRATIVITY_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallvisit", "PratPrvs")
                        .WithMany("Patientrecallactivity")
                        .HasForeignKey("PratPrvsId")
                        .HasConstraintName("FK_PRACTIVITY_PRVS_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallassessment", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("Patientrecallassessment")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("RRAS_PROPS_FK_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallplan", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "ContactO")
                        .WithMany("Patientrecallplan")
                        .HasForeignKey("ContactOid")
                        .HasConstraintName("FK_PRPL_CONTACT_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientrecallplanCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PATRECALLPLAN_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientrecallplanDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PATRECALLPLAN_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallplan", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PATIENTRECALLPLAN_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("PatientrecallplanPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("PATIENTRECALLPLAN_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "PrplCase")
                        .WithMany("Patientrecallplan")
                        .HasForeignKey("PrplCaseid")
                        .HasConstraintName("FK_PLAN_CASEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PrplExplanation")
                        .WithMany("Patientrecallplan")
                        .HasForeignKey("PrplExplanationid")
                        .HasConstraintName("FK_PLAN_EXPLANATIONID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrplPppu")
                        .WithMany("PatientrecallplanPrplPppu")
                        .HasForeignKey("PrplPppuId")
                        .HasConstraintName("PTNTRECALLPLANFOREIGNKEY3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrplPppuPosNavigation")
                        .WithMany("PatientrecallplanPrplPppuPosNavigation")
                        .HasForeignKey("PrplPppuPos")
                        .HasConstraintName("FK_PRV_PPPU_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "PrplPrivacyrole")
                        .WithMany("Patientrecallplan")
                        .HasForeignKey("PrplPrivacyroleid")
                        .HasConstraintName("FK_PRV_PRIVACYROLEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PrplPtnt")
                        .WithMany("Patientrecallplan")
                        .HasForeignKey("PrplPtntId")
                        .HasConstraintName("PATIENTRECALLPLAN_FK_PRPL_PT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "PrplRcpl")
                        .WithMany("Patientrecallplan")
                        .HasForeignKey("PrplRcplId")
                        .HasConstraintName("FK_PATIENTRECALLPLAN_RCPL_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanstream", "PrplStream")
                        .WithMany("Patientrecallplan")
                        .HasForeignKey("PrplStreamid")
                        .HasConstraintName("PTNRECALLPLAN_FK_PRPL_STREAM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallservice", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientrecallserviceCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PATRECALLSERVICE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientrecallserviceDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PATRECALLSERVICE_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallservice", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PATIENTRECALLSERVICE_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("PatientrecallservicePos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_PTNTRECALLPOSID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("PatientrecallserviceProvider")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_PTNTRECALLPROVIDERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RateNavigation")
                        .WithMany("Patientrecallservice")
                        .HasForeignKey("Rate")
                        .HasConstraintName("FK_PTNT_RSERVICE_RATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("Patientrecallservice")
                        .HasForeignKey("Serviceid")
                        .HasConstraintName("FK_PTNTRECALLSERVID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patientrecallvisit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanvisit", "Carevisit")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("CarevisitId")
                        .HasConstraintName("PTNTRECALLPLAN_FK_RCPV");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "ContactO")
                        .WithMany("PatientrecallvisitContactO")
                        .HasForeignKey("ContactOid")
                        .HasConstraintName("FK_PRVS_CONTACT_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientrecallvisitCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PATRECALLVISIT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientrecallvisitDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PATRECALLVISIT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExternalEntity", "ExternalEntity")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("ExternalEntityId")
                        .HasConstraintName("FK_PRVS_EXTERNAL_ENTITY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallvisit", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PATIENTRECALLVISIT_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("PatientrecallvisitPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("PATIENTRECALLVISIT_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "PrvsCase")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("PrvsCaseId")
                        .HasConstraintName("PRVS_FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "PrvsContact")
                        .WithMany("PatientrecallvisitPrvsContact")
                        .HasForeignKey("PrvsContactId")
                        .HasConstraintName("FK_PRVS_CONTACT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PrvsExplanation")
                        .WithMany("PatientrecallvisitPrvsExplanation")
                        .HasForeignKey("PrvsExplanationid")
                        .HasConstraintName("FK_VISIT_EXPLANATIONID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrvsExtprovider")
                        .WithMany("PatientrecallvisitPrvsExtprovider")
                        .HasForeignKey("PrvsExtproviderId")
                        .HasConstraintName("FK_PRVS_EXTPROVIDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.MentalEvents", "PrvsMentalEventNavigation")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("PrvsMentalEvent")
                        .HasConstraintName("FK_PRVS_MENTAL_EVENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PrvsOtherPatient")
                        .WithMany("PatientrecallvisitPrvsOtherPatient")
                        .HasForeignKey("PrvsOtherPatientId")
                        .HasConstraintName("FK_PRVS_OTHER_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallvisit", "PrvsParent")
                        .WithMany("InversePrvsParent")
                        .HasForeignKey("PrvsParentId")
                        .HasConstraintName("FK_PRVS_PARENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrvsPerformedbyExtprov")
                        .WithMany("PatientrecallvisitPrvsPerformedbyExtprov")
                        .HasForeignKey("PrvsPerformedbyExtprovid")
                        .HasConstraintName("FK_PRVS_PERFORMBY_EXTPROVID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrvsPerformedby")
                        .WithMany("PatientrecallvisitPrvsPerformedby")
                        .HasForeignKey("PrvsPerformedbyId")
                        .HasConstraintName("FK_PRVS_PERFORMEDBY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PrvsPerformedbyPatient")
                        .WithMany("PatientrecallvisitPrvsPerformedbyPatient")
                        .HasForeignKey("PrvsPerformedbyPatientId")
                        .HasConstraintName("FK_PRVS_PERFORMEDBY_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrvsPppu")
                        .WithMany("PatientrecallvisitPrvsPppu")
                        .HasForeignKey("PrvsPppuId")
                        .HasConstraintName("PTNTRECALLVISITFOREIGNKEY2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrvsPppuPos")
                        .WithMany("PatientrecallvisitPrvsPppuPos")
                        .HasForeignKey("PrvsPppuPosId")
                        .HasConstraintName("FK_PRVS_PPPU_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PrvsPriority")
                        .WithMany("PatientrecallvisitPrvsPriority")
                        .HasForeignKey("PrvsPriorityid")
                        .HasConstraintName("FK_RECVISPRIOR_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "PrvsPrivacyrole")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("PrvsPrivacyroleId")
                        .HasConstraintName("FK_PRVS_PRIVACYROLE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallplan", "PrvsPrpl")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("PrvsPrplId")
                        .HasConstraintName("PTNTRECALLVISITFOREIGNKEY1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallobjective", "PrvsRecallobjective")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("PrvsRecallobjectiveId")
                        .HasConstraintName("FK_PRVS_RECALLOBJECTIVE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallrecurrence", "PrvsRecallrecurrence")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("PrvsRecallrecurrenceId")
                        .HasConstraintName("FK_PRVS_RECALLRECURRENCE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PrvsShcdVisittype")
                        .WithMany("PatientrecallvisitPrvsShcdVisittype")
                        .HasForeignKey("PrvsShcdVisittypeId")
                        .HasConstraintName("FK_PRVS_SHCD_VISITTYPE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PrvsSpecialtyconcept")
                        .WithMany("PatientrecallvisitPrvsSpecialtyconcept")
                        .HasForeignKey("PrvsSpecialtyconceptId")
                        .HasConstraintName("FK_PRVS_SPEC_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PrvsSpecialtytypeconcept")
                        .WithMany("PatientrecallvisitPrvsSpecialtytypeconcept")
                        .HasForeignKey("PrvsSpecialtytypeconceptId")
                        .HasConstraintName("FK_PRVS_SPEC_TYPECONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "PrvsSrvc")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("PrvsSrvcId")
                        .HasConstraintName("PTNTRECALLVISITFOREIGNKEY3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallvisittemplate", "PrvsVisittemplate")
                        .WithMany("Patientrecallvisit")
                        .HasForeignKey("PrvsVisittemplateId")
                        .HasConstraintName("FK_PRVS_VISITTEMPLATE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdCompleteform")
                        .WithMany("PatientrecallvisitShcdCompleteform")
                        .HasForeignKey("ShcdCompleteformid")
                        .HasConstraintName("FK_PRV_SHCD_FORMID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientRoleAction", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientRole", "PraPatientRole")
                        .WithMany("PatientRoleAction")
                        .HasForeignKey("PraPatientRoleId")
                        .HasConstraintName("FK_PRA_PATIENT_ROLE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PraShortcode")
                        .WithMany("PatientRoleAction")
                        .HasForeignKey("PraShortcodeId")
                        .HasConstraintName("FK_PRA_SHORTCODE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientRoleLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PrlPatient")
                        .WithMany("PatientRoleLink")
                        .HasForeignKey("PrlPatientId")
                        .HasConstraintName("FK_PRL_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientRole", "PrlPatientRole")
                        .WithMany("PatientRoleLink")
                        .HasForeignKey("PrlPatientRoleId")
                        .HasConstraintName("FK_PRL_PATIENT_ROLE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientRxInteractionPrefs", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PatientRxInteractionPrefs")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PATRXINTERPREFSPATIENTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("PatientRxInteractionPrefs")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_PATRXINTERPREFSPROVIDERID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientRxSchedulesDue", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "Apnt")
                        .WithMany("PatientRxSchedulesDue")
                        .HasForeignKey("ApntId")
                        .HasConstraintName("FK_PTNT_RX_SCHDLS_DUE_APNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithOne("PatientRxSchedulesDue")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.PatientRxSchedulesDue", "PatientId")
                        .HasConstraintName("FK_PTNT_RX_SCHDLS_DUE_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientSharingConsent", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientSharingConsentCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PT_SHAR_CONS_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientSharingConsentDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PT_SHAR_CONS_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientSharingConsent", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PT_SHAR_CONS_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "PtscCase")
                        .WithMany("PatientSharingConsent")
                        .HasForeignKey("PtscCaseId")
                        .HasConstraintName("PTSC_FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtscPatient")
                        .WithMany("PatientSharingConsent")
                        .HasForeignKey("PtscPatientId")
                        .HasConstraintName("FK_PATIENTCONSENT_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PtscPos")
                        .WithMany("PatientSharingConsent")
                        .HasForeignKey("PtscPosId")
                        .HasConstraintName("PTSC_FK_PATCONSENT_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PtscSignatureBlob")
                        .WithMany("PatientSharingConsent")
                        .HasForeignKey("PtscSignatureBlobId")
                        .HasConstraintName("PTSC_FK_SIGNATURE_BLOB_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientSms", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Encounter")
                        .WithMany("PatientSms")
                        .HasForeignKey("EncounterId")
                        .HasConstraintName("FK_PATIENT_SMS_ENCOUNTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PatientSms")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PATIENT_SMS_FK_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("PatientSmsPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("PATIENT_SMS_FK_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PatientSmsPppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PATIENT_SMS_FK_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "SmsServiceO")
                        .WithMany("PatientSms")
                        .HasForeignKey("SmsServiceOid")
                        .HasConstraintName("PATIENT_SMS_FK_SMS_SVC_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientSupplier", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PsAlternateSupplier")
                        .WithMany("PatientSupplierPsAlternateSupplier")
                        .HasForeignKey("PsAlternateSupplierId")
                        .HasConstraintName("PS_ALTERNATE_SUPPLIER_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PsPatient")
                        .WithMany("PatientSupplier")
                        .HasForeignKey("PsPatientId")
                        .HasConstraintName("PS_PATIENT_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PsPreferredSupplier")
                        .WithMany("PatientSupplierPsPreferredSupplier")
                        .HasForeignKey("PsPreferredSupplierId")
                        .HasConstraintName("PS_PREFERRED_SUPPLIER_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Patienttext", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ModifiedByNavigation")
                        .WithMany("Patienttext")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_PTNT_TEXT_PPPU_MODIFIED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithOne("Patienttext")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Patienttext", "PtntId")
                        .HasConstraintName("PTTX_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientTouch", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PatientTouchCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PATIENT_TOUCH_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PatientTouchDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PATIENT_TOUCH_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientTouch", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("FK_PATIENT_TOUCH_MASTER_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientTravel", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PatientTravel")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PATIENT_TRAVEL_FK_PATIENT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientVerification", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "Apnt")
                        .WithMany("PatientVerification")
                        .HasForeignKey("ApntId")
                        .HasConstraintName("FK_PATVER_APNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("PatientVerification")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("FK_PATVER_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientVerificationRequest", "RequestO")
                        .WithMany("PatientVerification")
                        .HasForeignKey("RequestOid")
                        .HasConstraintName("FK_PATVER_REQUEST");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PatientVerificationRequest", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("PatientVerificationRequest")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_PATVERREQ_CREATED");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PayerCasetemplate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Payer")
                        .WithMany("PayerCasetemplate")
                        .HasForeignKey("PayerId")
                        .HasConstraintName("PAYER_CASETEMPLATE_FK_PAYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseTemplates", "Template")
                        .WithMany("PayerCasetemplate")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("PAYER_CASETEMPLATE_FK_TEMPLATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PayerDetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PayerDetails", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExtProviderScannedForm", "PdInvoiceTemplate")
                        .WithMany("PayerDetails")
                        .HasForeignKey("PdInvoiceTemplateId")
                        .HasConstraintName("FK_PAYERDTL_INVTMPL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PdPayer")
                        .WithMany("PayerDetails")
                        .HasForeignKey("PdPayerId")
                        .HasConstraintName("FK_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PdServiceMacroNavigation")
                        .WithMany("PayerDetails")
                        .HasForeignKey("PdServiceMacro")
                        .HasConstraintName("FK_PAYER_DET_SERVICE_MACRO");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PayerSchedule", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Payer")
                        .WithMany("PayerSchedule")
                        .HasForeignKey("PayerId")
                        .HasConstraintName("PAYER_SCHEDULE_FK_PAYER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PcehrDocument", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DeletedbyNavigation")
                        .WithMany("PcehrDocument")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("FK_PCEHR_DOCUMENT_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("PcehrDocument")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("FK_PCEHR_DOCUMENT_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PcehrFile", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PcehrDocument", "PcehrDoc")
                        .WithMany("PcehrFile")
                        .HasForeignKey("PcehrDocId")
                        .HasConstraintName("FK_PCEHR_FILE_DOC_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Phphistory", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PhphistoryCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PHPH_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PhphistoryDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PHPH_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoOrganization", "OrganizationNavigation")
                        .WithMany("Phphistory")
                        .HasForeignKey("Organization")
                        .HasConstraintName("PHPH_FK_ORGANIZATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Payer")
                        .WithMany("PhphistoryPayer")
                        .HasForeignKey("PayerId")
                        .HasConstraintName("FK_PHPHISTORY_PAYER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientcard", "Plan")
                        .WithMany("Phphistory")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_PHPHISTORY_PLAN_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("PhphistoryPtnt")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("FK_PHPHISTORY_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RateNavigation")
                        .WithMany("Phphistory")
                        .HasForeignKey("Rate")
                        .HasConstraintName("FK_PHPHISTORY_RATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Plugins", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PlData")
                        .WithMany("Plugins")
                        .HasForeignKey("PlDataId")
                        .HasConstraintName("FK_BLOBS_DATA_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketDiseaseLimit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PpdlDiseasegroupNavigation")
                        .WithMany("PocketDiseaseLimit")
                        .HasForeignKey("PpdlDiseasegroup")
                        .HasConstraintName("FK_PPDLIMIT_DGROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PpdlUserNavigation")
                        .WithMany("PocketDiseaseLimit")
                        .HasForeignKey("PpdlUser")
                        .HasConstraintName("FK_PPDLIMIT_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketDiseases", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "PpcdDiseaseNavigation")
                        .WithMany("PocketDiseases")
                        .HasForeignKey("PpcdDisease")
                        .HasConstraintName("FK_PCKTD_DISEASECODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pockets", "PpcdPocketNavigation")
                        .WithMany("PocketDiseases")
                        .HasForeignKey("PpcdPocket")
                        .HasConstraintName("FK_PCKTD_POCKETS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketPatGrp", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PocketPatGrp")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PATIENT_PAT_GRP_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketPatLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PocketPatGrp", "GrpO")
                        .WithMany("PocketPatLink")
                        .HasForeignKey("GrpOid")
                        .HasConstraintName("FK_PPCPAT_GRP_LINK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PocketPcPtnt", "Patient")
                        .WithMany("PocketPatLink")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_POCKET_PAT_LINK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketPcObj", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PocketPcPtnt", "SyncO")
                        .WithMany("PocketPcObj")
                        .HasForeignKey("SyncOid")
                        .HasConstraintName("FK_POCKET_PC_SYNC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketPcPtnt", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PocketPcPtnt")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("POCKET_PC_PTNT_FK_PTNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pockets", "Pocket")
                        .WithMany("PocketPcPtnt")
                        .HasForeignKey("Pocketid")
                        .HasConstraintName("FK_POCKET_PC_PTNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PocketPcPtnt")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("POCKET_PC_PTNT_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketServiceLimit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "PpslServiceNavigation")
                        .WithMany("PocketServiceLimit")
                        .HasForeignKey("PpslService")
                        .HasConstraintName("FK_PPSLIMIT_DGROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PpslUserNavigation")
                        .WithMany("PocketServiceLimit")
                        .HasForeignKey("PpslUser")
                        .HasConstraintName("FK_PPSLIMIT_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PocketServices", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pockets", "PpcsPocketNavigation")
                        .WithMany("PocketServices")
                        .HasForeignKey("PpcsPocket")
                        .HasConstraintName("FK_PCKS_POCKETS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "PpcsServiceNavigation")
                        .WithMany("PocketServices")
                        .HasForeignKey("PpcsService")
                        .HasConstraintName("FK_PCKS_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PostCodes", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "StateNavigation")
                        .WithMany("PostCodes")
                        .HasForeignKey("State")
                        .HasConstraintName("FK_POSTCODES_STATE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppu", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PppuCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PPPU_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DefaultSupplierIdLaboratoryNavigation")
                        .WithMany("InverseDefaultSupplierIdLaboratoryNavigation")
                        .HasForeignKey("DefaultSupplierIdLaboratory")
                        .HasConstraintName("PPPU_FK_DEFSUPPLIER_LABORATORY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DefaultSupplierIdPharmacyNavigation")
                        .WithMany("InverseDefaultSupplierIdPharmacyNavigation")
                        .HasForeignKey("DefaultSupplierIdPharmacy")
                        .HasConstraintName("PPPU_FK_DEFSUPPLIER_PHARMACY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "DefaultSupplierIdRadiologyNavigation")
                        .WithMany("InverseDefaultSupplierIdRadiologyNavigation")
                        .HasForeignKey("DefaultSupplierIdRadiology")
                        .HasConstraintName("PPPU_FK_DEFSUPPLIER_RADIOLOGY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PppuDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PPPU_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "OrgPayer")
                        .WithMany("Pppu")
                        .HasForeignKey("OrgPayerId")
                        .HasConstraintName("FK_PPPU_ORG_PAYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AccProfile", "PppuAccessProfile")
                        .WithMany("Pppu")
                        .HasForeignKey("PppuAccessProfileId")
                        .HasConstraintName("FK_PPPU_ACCESS_PROFILE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "PppuAltEservice")
                        .WithMany("PppuPppuAltEservice")
                        .HasForeignKey("PppuAltEserviceId")
                        .HasConstraintName("FK_PPPU_EMESSAGE_ALT_ESRV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "PppuApntSlip")
                        .WithMany("PppuPppuApntSlip")
                        .HasForeignKey("PppuApntSlipId")
                        .HasConstraintName("PPPU_APNT_SLIP_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PppuAppLocation")
                        .WithMany("PppuPppuAppLocation")
                        .HasForeignKey("PppuAppLocationId")
                        .HasConstraintName("FK_PPPU_APP_LOCATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "PppuAssociatesDetail")
                        .WithMany("PppuPppuAssociatesDetail")
                        .HasForeignKey("PppuAssociatesDetailId")
                        .HasConstraintName("FK_PPPU_ASSOCIATES_DETAIL_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PppuCoverRuleNavigation")
                        .WithMany("PppuPppuCoverRuleNavigation")
                        .HasForeignKey("PppuCoverRule")
                        .HasConstraintName("PPPU_FK_COVER_RULE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExtProviderEformat", "PppuEformat")
                        .WithMany("PppuNavigation")
                        .HasForeignKey("PppuEformatId")
                        .HasConstraintName("FK_PPPU_EFORMAT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PppuExtprovcustomrepNavigation")
                        .WithMany("PppuPppuExtprovcustomrepNavigation")
                        .HasForeignKey("PppuExtprovcustomrep")
                        .HasConstraintName("FK_EXTPROVCUSTOMREP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PppuExtprovcustomrepmacroNavigation")
                        .WithMany("PppuPppuExtprovcustomrepmacroNavigation")
                        .HasForeignKey("PppuExtprovcustomrepmacro")
                        .HasConstraintName("FK_EXTPROVCUSTOMREPMACRO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "PppuFrontPage")
                        .WithMany("PppuPppuFrontPage")
                        .HasForeignKey("PppuFrontPageId")
                        .HasConstraintName("PPPU_FRONT_PAGE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdBasePosNavigation")
                        .WithMany("InversePppuIdBasePosNavigation")
                        .HasForeignKey("PppuIdBasePos")
                        .HasConstraintName("PPPU_CONSTRAINT_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdLocumNavigation")
                        .WithMany("InversePppuIdLocumNavigation")
                        .HasForeignKey("PppuIdLocum")
                        .HasConstraintName("FK_PPPU_IDLOCUM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OnthegoProfile", "PppuOnthego")
                        .WithMany("Pppu")
                        .HasForeignKey("PppuOnthegoId")
                        .HasConstraintName("FK_PPPU_ONTHEGO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "PppuOrgLevelNavigation")
                        .WithMany("PppuNavigation")
                        .HasForeignKey("PppuOrgLevel")
                        .HasConstraintName("FK_PPPU_ORG_LEVEL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PppuPaycodeNavigation")
                        .WithMany("PppuPppuPaycodeNavigation")
                        .HasForeignKey("PppuPaycode")
                        .HasConstraintName("PPPU_FK_PAYCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PppuPosSetting")
                        .WithMany("PppuPppuPosSetting")
                        .HasForeignKey("PppuPosSettingId")
                        .HasConstraintName("PPPU_POS_SETTING_FK_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PppuPostalstateNavigation")
                        .WithMany("PppuPppuPostalstateNavigation")
                        .HasForeignKey("PppuPostalstate")
                        .HasConstraintName("PPPU_FK_PPPU_POSTALSTATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "PppuProvidergroupNavigation")
                        .WithMany("Pppu")
                        .HasForeignKey("PppuProvidergroup")
                        .HasConstraintName("FK_PPPU_PROVGROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PppuRateShcd")
                        .WithMany("PppuPppuRateShcd")
                        .HasForeignKey("PppuRateShcdId")
                        .HasConstraintName("FK_PPPURATESHCD");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PppuReferencesystemNavigation")
                        .WithMany("PppuPppuReferencesystemNavigation")
                        .HasForeignKey("PppuReferencesystem")
                        .HasConstraintName("PPPU_FK_REFSYS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "PppuReferralEservice")
                        .WithMany("PppuPppuReferralEservice")
                        .HasForeignKey("PppuReferralEserviceId")
                        .HasConstraintName("FK_PPPU_EMESSAGE_REF_ESRV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PppuSignature")
                        .WithMany("PppuPppuSignature")
                        .HasForeignKey("PppuSignatureId")
                        .HasConstraintName("FK_PPPU_SIGNATURE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PppuSpecialtyconcept")
                        .WithMany("PppuPppuSpecialtyconcept")
                        .HasForeignKey("PppuSpecialtyconceptid")
                        .HasConstraintName("PPPU_FK_SPECIALTYCONCEPTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Lookuplist", "PppuStreetstateNavigation")
                        .WithMany("PppuPppuStreetstateNavigation")
                        .HasForeignKey("PppuStreetstate")
                        .HasConstraintName("PPPU_FK_PPPU_STREETSTATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuSupervisorNavigation")
                        .WithMany("InversePppuSupervisorNavigation")
                        .HasForeignKey("PppuSupervisor")
                        .HasConstraintName("PPPU_FK_SUPERVISOR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Timezones", "PppuTimezone")
                        .WithMany("Pppu")
                        .HasForeignKey("PppuTimezoneId")
                        .HasConstraintName("FK_PPPU_TIMEZONE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PppuTypeconcept")
                        .WithMany("PppuPppuTypeconcept")
                        .HasForeignKey("PppuTypeconceptid")
                        .HasConstraintName("PPPU_FK_TYPECONCEPTID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppualias", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Alias", "Alias")
                        .WithMany("Pppualias")
                        .HasForeignKey("AliasId")
                        .HasConstraintName("PPPUALIAS_FK_ALIAS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("Pppualias")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PPPUALIAS_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuAreaInterest", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PppuAreaInterest")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PPPU_AREA_INTEREST_FK_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Shcd")
                        .WithMany("PppuAreaInterest")
                        .HasForeignKey("ShcdId")
                        .HasConstraintName("PPPU_AREA_INTEREST_FK_SHCD_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuCdoTransdataLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PppuCdoTransdataLink")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PPPU_CDO_TRDT_LNK_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "PtdlTransdataO")
                        .WithMany("PppuCdoTransdataLink")
                        .HasForeignKey("PtdlTransdataOid")
                        .HasConstraintName("PPPU_CDO_TRDT_LNK_FK_TRDT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuchargerate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("Pppuchargerate")
                        .HasForeignKey("Pppuid")
                        .HasConstraintName("FK_PPPUCHARGERATEPPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Shortcode")
                        .WithMany("Pppuchargerate")
                        .HasForeignKey("Shortcodeid")
                        .HasConstraintName("FK_PPPUCHARGERATESHCD");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuCover", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CoverO")
                        .WithMany("PppuCoverCoverO")
                        .HasForeignKey("CoverOid")
                        .HasConstraintName("PPPU_FK_COVER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedByNavigation")
                        .WithMany("PppuCoverCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("PPPU_COVER_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "LastModifiedByNavigation")
                        .WithMany("PppuCoverLastModifiedByNavigation")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("PPPU_COVER_FK_MODIFIEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "MacroRuleNavigation")
                        .WithMany("PppuCover")
                        .HasForeignKey("MacroRule")
                        .HasConstraintName("PPPU_COVER_FK_MACRO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PosO")
                        .WithMany("PppuCoverPosO")
                        .HasForeignKey("PosOid")
                        .HasConstraintName("PPPU_FK_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrincipalO")
                        .WithMany("PppuCoverPrincipalO")
                        .HasForeignKey("PrincipalOid")
                        .HasConstraintName("PPPU_FK_PRINCIPAL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuEclipseClaimType", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Payer")
                        .WithMany("PppuEclipseClaimType")
                        .HasForeignKey("PayerId")
                        .HasConstraintName("FK_PPPU_ECLIPSE_PAYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PppuEclipseClaimType")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_PPPU_ECLIPSE_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppufinancial", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithOne("Pppufinancial")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Pppufinancial", "PppuId")
                        .HasConstraintName("PPPUFINANCIAL_FK_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PufnDefaultLedgerNavigation")
                        .WithMany("Pppufinancial")
                        .HasForeignKey("PufnDefaultLedger")
                        .HasConstraintName("FK_PPPUFINANCIAL_LEDGER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExtProviderScannedForm", "PufnInvfmtTemplate")
                        .WithMany("PppufinancialPufnInvfmtTemplate")
                        .HasForeignKey("PufnInvfmtTemplateId")
                        .HasConstraintName("FK_PPPUFIN_INVTMPL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExtProviderScannedForm", "PufnStmntfmtTemplate")
                        .WithMany("PppufinancialPufnStmntfmtTemplate")
                        .HasForeignKey("PufnStmntfmtTemplateId")
                        .HasConstraintName("FK_PPPUFIN_STMNTTMPL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuimage", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithOne("Pppuimage")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Pppuimage", "PppuId")
                        .HasConstraintName("PPPUIMAGE_PPPUID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuletterhead", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithOne("PppuletterheadPppu")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Pppuletterhead", "PppuId")
                        .HasConstraintName("PULH_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "PulhBgimage")
                        .WithMany("Pppuletterhead")
                        .HasForeignKey("PulhBgimageId")
                        .HasConstraintName("FK_PPPULETTERHEAD_BGIMAGE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PulhPosNavigation")
                        .WithMany("PppuletterheadPulhPosNavigation")
                        .HasForeignKey("PulhPos")
                        .HasConstraintName("PPPULETTERHEAD_FK_PULH_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "PulhTemplateNavigation")
                        .WithMany("Pppuletterhead")
                        .HasForeignKey("PulhTemplate")
                        .HasConstraintName("PPPULETTERHEAD_FK_PULH_TEMPL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuPasswordHistory", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("PppuPasswordHistoryCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PPPU_PASS_HIST__FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("PppuPasswordHistoryDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("PPPU_PASS_HIST__FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PppuPasswordHistory", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("PPPU_PASSWORD_HISTOR_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PppuPasswordHistory")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_PASSWORD_HISTORY_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuPatientExclusion", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PppuPatientExclusion")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PPPU_PATIENT_EXCL_PTNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PppuPatientExclusion")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_PPPU_PATIENT_EXCL_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppupos", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PppuposPppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_PPPUPOS_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuPos")
                        .WithMany("PppuposPppuPos")
                        .HasForeignKey("PppuPosId")
                        .HasConstraintName("FK_PPPUPOS_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PppuPosReferencesystemNavigation")
                        .WithMany("PppuposPppuPosReferencesystemNavigation")
                        .HasForeignKey("PppuPosReferencesystem")
                        .HasConstraintName("PPPUPOS_FK_REFSYS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PppuPosRrpSccNavigation")
                        .WithMany("PppuposPppuPosRrpSccNavigation")
                        .HasForeignKey("PppuPosRrpScc")
                        .HasConstraintName("PPPUPOS_RRP_SCC_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "PppuPosTopRoleNavigation")
                        .WithMany("Pppupos")
                        .HasForeignKey("PppuPosTopRole")
                        .HasConstraintName("PPPUPOS_FK_TOP_ROLE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuposPayees", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PpospPos")
                        .WithMany("PppuposPayeesPpospPos")
                        .HasForeignKey("PpospPosId")
                        .HasConstraintName("FK_PPPUPOS_PAYEES_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PpospPppu")
                        .WithMany("PppuposPayeesPpospPppu")
                        .HasForeignKey("PpospPppuId")
                        .HasConstraintName("FK_PPPUPOS_PAYEES_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppupreference", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("Pppupreference")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FOREIGN_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuprint", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithOne("Pppuprint")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Pppuprint", "PppuId")
                        .HasConstraintName("PPPUPRINTFOREIGNKEY1");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuprintfontdefault", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("Pppuprintfontdefault")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PPPUPRINTFONTDEF_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuprintreportdefault", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("Pppuprintreportdefault")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PPPUPRINTREPORTDEF_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuProvgrps", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "Group")
                        .WithMany("PppuProvgrps")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_PPU_PROVGRPS_PROV_GRP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PppuProvgrps")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PPPU_PROVGRPS_PPPU_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppuroles", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedbyNavigation")
                        .WithMany("PppurolesCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("PPPUROLES_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("PppurolesPppu")
                        .HasForeignKey("Pppuid")
                        .HasConstraintName("PPPUROLES_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "Role")
                        .WithMany("Pppuroles")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("PPPUROLES_FK_ROLEID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pppusecurity", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithOne("Pppusecurity")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Pppusecurity", "PppuId")
                        .HasConstraintName("PPPUSECURITY_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuSpeciality", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PspConcept")
                        .WithMany("PppuSpeciality")
                        .HasForeignKey("PspConceptId")
                        .HasConstraintName("PPPU_SPECIALITY_CONCEPT_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PspPppu")
                        .WithMany("PppuSpeciality")
                        .HasForeignKey("PspPppuId")
                        .HasConstraintName("PPPU_SPECIALITY_PPPUID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PppuTestLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PtlConcept")
                        .WithMany("PppuTestLink")
                        .HasForeignKey("PtlConceptId")
                        .HasConstraintName("PTL_CONCEPT_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PtlPppu")
                        .WithMany("PppuTestLink")
                        .HasForeignKey("PtlPppuId")
                        .HasConstraintName("PTL_PPPU_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Test", "PtlTest")
                        .WithMany("PppuTestLink")
                        .HasForeignKey("PtlTestId")
                        .HasConstraintName("PTL_TEST_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Ppputext", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithOne("Ppputext")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Ppputext", "PppuId")
                        .HasConstraintName("PPPUTEXT_FK_PPPU_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PredictDocument", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DocCategory")
                        .WithMany("PredictDocument")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("PREDICT_DOC_CATEGORY_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("PredictDocument")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PDCT_PATIENTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("PredictDocumentPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_PDCT_POSID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("PredictDocumentProvider")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_PDCT_PROVID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SignedProv")
                        .WithMany("PredictDocumentSignedProv")
                        .HasForeignKey("SignedProvId")
                        .HasConstraintName("FK_PDCT_SIGNEDPROVID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Pregnancy", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PrgnNatureNavigation")
                        .WithMany("Pregnancy")
                        .HasForeignKey("PrgnNature")
                        .HasConstraintName("PREGNANCY_FK_NATURE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PrgnOutcomeNavigation")
                        .WithMany("PregnancyPrgnOutcomeNavigation")
                        .HasForeignKey("PrgnOutcome")
                        .HasConstraintName("PREGNANCY_FK_PRGN_OUTCOME");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientproblem", "PrgnProblemNavigation")
                        .WithMany("Pregnancy")
                        .HasForeignKey("PrgnProblem")
                        .HasConstraintName("PREGNANCY_FK_PRGN_PROBLEM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PrgnStatusNavigation")
                        .WithMany("PregnancyPrgnStatusNavigation")
                        .HasForeignKey("PrgnStatus")
                        .HasConstraintName("PREGNANCY_FK_PRGN_STATUS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Priorapproval", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "ContactO")
                        .WithMany("PriorapprovalContactO")
                        .HasForeignKey("ContactOid")
                        .HasConstraintName("FK_PRAP_CONTACT_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PrapAgency")
                        .WithMany("PriorapprovalPrapAgency")
                        .HasForeignKey("PrapAgencyid")
                        .HasConstraintName("PRAP_FK_PRAP_AGENCYID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Scheduleline", "PrapBudget")
                        .WithMany("Priorapproval")
                        .HasForeignKey("PrapBudgetid")
                        .HasConstraintName("PRIORAPPROVAL_FK_PRAP_BUDGET");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "PrapCase")
                        .WithMany("Priorapproval")
                        .HasForeignKey("PrapCaseId")
                        .HasConstraintName("PRIORAPPROVAL_FK_PRAP_CASE_I");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "PrapForm")
                        .WithMany("PriorapprovalPrapForm")
                        .HasForeignKey("PrapFormid")
                        .HasConstraintName("PRIORAPPROVAL_FK_FORMID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrapPppu")
                        .WithMany("PriorapprovalPrapPppu")
                        .HasForeignKey("PrapPppuid")
                        .HasConstraintName("FK_PRAP_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrapPppuidaddedNavigation")
                        .WithMany("PriorapprovalPrapPppuidaddedNavigation")
                        .HasForeignKey("PrapPppuidadded")
                        .HasConstraintName("PRAP_FOREIGN_PPPUID_ADDED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrapPppuidalteredNavigation")
                        .WithMany("PriorapprovalPrapPppuidalteredNavigation")
                        .HasForeignKey("PrapPppuidaltered")
                        .HasConstraintName("PRAP_FOREIGN_PPPUID_ALTERED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("Priorapproval")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_PRIORAPPROVAL_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("PriorapprovalPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("PRIORAPPROVAL_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("PriorapprovalPtnt")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("PRAP_FOREIGN_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdBodyPart")
                        .WithMany("PriorapprovalShcdBodyPart")
                        .HasForeignKey("ShcdBodyPartId")
                        .HasConstraintName("SHCD_BODY_PART_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdFormNavigation")
                        .WithMany("PriorapprovalShcdIdFormNavigation")
                        .HasForeignKey("ShcdIdForm")
                        .HasConstraintName("PRAP_FOREIGN_SHCD_ID_FORM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdNatureOfInjury")
                        .WithMany("PriorapprovalShcdNatureOfInjury")
                        .HasForeignKey("ShcdNatureOfInjuryId")
                        .HasConstraintName("SHCD_NATURE_OF_INJURY_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProblemInstruction", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "MeasureNavigation")
                        .WithMany("ProblemInstruction")
                        .HasForeignKey("Measure")
                        .HasConstraintName("FK_PR_INSTR_MEASURE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientproblem", "ProblemNavigation")
                        .WithMany("ProblemInstruction")
                        .HasForeignKey("Problem")
                        .HasConstraintName("FK_PR_INSTR_PROBLEM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProblemInstructionLine", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "ContentNavigation")
                        .WithMany("ProblemInstructionLineContentNavigation")
                        .HasForeignKey("Content")
                        .HasConstraintName("FK_PR_INSTR_LINE_CONTENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProblemInstruction", "InstructionNavigation")
                        .WithMany("ProblemInstructionLine")
                        .HasForeignKey("Instruction")
                        .HasConstraintName("FK_PR_INSTR_LINE_INSTRUCTION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "MeasureValueNavigation")
                        .WithMany("ProblemInstructionLineMeasureValueNavigation")
                        .HasForeignKey("MeasureValue")
                        .HasConstraintName("FK_PR_INSTR_LINE_MEASURE_VALUE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProcedureAudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ComplicationNavigation")
                        .WithMany("ProcedureAuditComplicationNavigation")
                        .HasForeignKey("Complication")
                        .HasConstraintName("PROCEDURE_AUDIT_FK_COMPLICAT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "OrganSystemNavigation")
                        .WithMany("ProcedureAuditOrganSystemNavigation")
                        .HasForeignKey("OrganSystem")
                        .HasConstraintName("PROCEDURE_AUDIT_FK_OSYSTEM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "PathologyNavigation")
                        .WithMany("ProcedureAuditPathologyNavigation")
                        .HasForeignKey("Pathology")
                        .HasConstraintName("PROCEDURE_AUDIT_FK_PATHOLOGY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Procedureop", "Procedure")
                        .WithMany("ProcedureAudit")
                        .HasForeignKey("ProcedureId")
                        .HasConstraintName("PROCEDURE_AUDIT_FK_PROCEDURE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProcedureFormLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdFormNavigation")
                        .WithMany("ProcedureFormLink")
                        .HasForeignKey("ShcdIdForm")
                        .HasConstraintName("FK_PROC_FORM_SHCD");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "SrvcIdProcNavigation")
                        .WithMany("ProcedureFormLink")
                        .HasForeignKey("SrvcIdProc")
                        .HasConstraintName("FK_PROC_FORM_SRVC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Procedureop", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Anaesthetist")
                        .WithMany("ProcedureopAnaesthetist")
                        .HasForeignKey("AnaesthetistId")
                        .HasConstraintName("PROCEDUREOP_FK_ANAESTHETIST_");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Assistant")
                        .WithMany("ProcedureopAssistant")
                        .HasForeignKey("AssistantId")
                        .HasConstraintName("PROCEDUREOP_FK_ASSISTANT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("Procedureop")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("PROCEDUREOP_FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedbyNavigation")
                        .WithMany("ProcedureopCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_PROC_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Disease")
                        .WithMany("ProcedureopDisease")
                        .HasForeignKey("DiseaseId")
                        .HasConstraintName("PROCEDUREOP_FK_DISEASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Indication")
                        .WithMany("ProcedureopIndication")
                        .HasForeignKey("IndicationId")
                        .HasConstraintName("PROCEDUREOP_FK_INDICATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ModifiedbyNavigation")
                        .WithMany("ProcedureopModifiedbyNavigation")
                        .HasForeignKey("Modifiedby")
                        .HasConstraintName("FK_PROC_MODIFIEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("ProcedureopPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("PROCEDUREOP_FK_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Priorapproval", "Prap")
                        .WithMany("Procedureop")
                        .HasForeignKey("PrapId")
                        .HasConstraintName("PROCEDUREOP_FK_PRAP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("Procedureop")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_PROCEDUREOP_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("ProcedureopPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("PROCEDUREOP_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "ProcForm")
                        .WithMany("Procedureop")
                        .HasForeignKey("ProcFormid")
                        .HasConstraintName("FK_PROC_FORMID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ProvOwner")
                        .WithMany("ProcedureopProvOwner")
                        .HasForeignKey("ProvOwnerId")
                        .HasConstraintName("PROCEDUREOP_FK_PROV_OWNER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("Procedureop")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("PROCEDUREOP_FK_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdFormNavigation")
                        .WithMany("Procedureop")
                        .HasForeignKey("ShcdIdForm")
                        .HasConstraintName("PROCEDUREOP_FK_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Srvc")
                        .WithMany("Procedureop")
                        .HasForeignKey("SrvcId")
                        .HasConstraintName("PROCEDUREOP_FK_SRVC_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Surgeon")
                        .WithMany("ProcedureopSurgeon")
                        .HasForeignKey("SurgeonId")
                        .HasConstraintName("PROCEDUREOP_FK_SURGEON_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProcedureResource", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Procedureop", "Proc")
                        .WithMany("ProcedureResource")
                        .HasForeignKey("ProcId")
                        .HasConstraintName("PROCEDURE_RESOURCE_FK_PROC_I");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Srvc")
                        .WithMany("ProcedureResource")
                        .HasForeignKey("SrvcId")
                        .HasConstraintName("PROCEDURE_RESOURCE_FK_SRVC_I");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilePartitionGroup", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PartitionComplexFilter", "ComplexFilterO")
                        .WithMany("ProfilePartitionGroup")
                        .HasForeignKey("ComplexFilterOid")
                        .HasConstraintName("PROFILE_PRT_GRP_FK_CF");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePartitionGroup", "PpgFirstGroupNavigation")
                        .WithMany("InversePpgFirstGroupNavigation")
                        .HasForeignKey("PpgFirstGroup")
                        .HasConstraintName("PRT_FK_PPG_FIRST_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "PpgPrivacyNavigation")
                        .WithMany("ProfilePartitionGroup")
                        .HasForeignKey("PpgPrivacy")
                        .HasConstraintName("PRT_FK_PPG_PRIVACY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePartitionGroup", "PpgSecondGroupNavigation")
                        .WithMany("InversePpgSecondGroupNavigation")
                        .HasForeignKey("PpgSecondGroup")
                        .HasConstraintName("PRT_FK_PPG_SECOND_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivateToNavigation")
                        .WithMany("ProfilePartitionGroup")
                        .HasForeignKey("PrivateTo")
                        .HasConstraintName("PROFILE_PRT_GRP_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilePartitionGroupLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePartitionGroup", "GroupO")
                        .WithMany("ProfilePartitionGroupLink")
                        .HasForeignKey("GroupOid")
                        .HasConstraintName("PROFILE_PRT_GRP_LINK_FK_GRP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Partition", "Prt")
                        .WithMany("ProfilePartitionGroupLink")
                        .HasForeignKey("PrtId")
                        .HasConstraintName("PROFILE_PRT_GRP_LINK_FK_PTNT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ComplexFilter", "ComplexFilterO")
                        .WithMany("ProfilePatientGroup")
                        .HasForeignKey("ComplexFilterOid")
                        .HasConstraintName("PROFILE_PTNT_GRP_FK_CF");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientGroupCategory", "GroupCategory")
                        .WithMany("ProfilePatientGroup")
                        .HasForeignKey("GroupCategoryId")
                        .HasConstraintName("FK_PATIENT_GROUP_CATEGORY_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", "PpgFirstGroupNavigation")
                        .WithMany("InversePpgFirstGroupNavigation")
                        .HasForeignKey("PpgFirstGroup")
                        .HasConstraintName("FK_PPG_FIRST_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PpgOwnerNavigation")
                        .WithMany("ProfilePatientGroupPpgOwnerNavigation")
                        .HasForeignKey("PpgOwner")
                        .HasConstraintName("FK_PROFILE_PTNT_GRP_PPG_OWNER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "PpgPrivacyNavigation")
                        .WithMany("ProfilePatientGroup")
                        .HasForeignKey("PpgPrivacy")
                        .HasConstraintName("FK_PPG_PRIVACY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", "PpgSecondGroupNavigation")
                        .WithMany("InversePpgSecondGroupNavigation")
                        .HasForeignKey("PpgSecondGroup")
                        .HasConstraintName("FK_PPG_SECOND_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivateToNavigation")
                        .WithMany("ProfilePatientGroupPrivateToNavigation")
                        .HasForeignKey("PrivateTo")
                        .HasConstraintName("PROFILE_PTNT_GRP_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilepatientgroupCache", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfileptntgrpCachelog", "AppgclO")
                        .WithMany("ProfilepatientgroupCache")
                        .HasForeignKey("AppgclOid")
                        .HasConstraintName("PPGC_FK_PPGCL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("ProfilepatientgroupCache")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("PPGC_FK_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroupLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("ProfilePatientGroupLink")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_GRP_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProfilePatientGroup", "GroupO")
                        .WithMany("ProfilePatientGroupLink")
                        .HasForeignKey("GroupOid")
                        .HasConstraintName("PROFILE_PTNT_GRP_LINK_FK_GRP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("ProfilePatientGroupLink")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("PROFILE_PTNT_GRP_LINK_FK_PTN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProfileptntgrpCachelog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ComplexFilter", "ComplexFilterO")
                        .WithMany("ProfileptntgrpCachelog")
                        .HasForeignKey("ComplexFilterOid")
                        .HasConstraintName("PPGCL_FK_COMPLEX_FILTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProvGroupCaseTemplate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CaseTemplates", "CaseTemplate")
                        .WithMany("ProvGroupCaseTemplate")
                        .HasForeignKey("CaseTemplateId")
                        .HasConstraintName("PR_GR_CASE_TMPLT_FK_CSTM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "ProviderGroup")
                        .WithMany("ProvGroupCaseTemplate")
                        .HasForeignKey("ProviderGroupId")
                        .HasConstraintName("PR_GR_CASE_TMPLT_FK_PRGR");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderCommentGl", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Guideline", "PcglGuideline")
                        .WithMany("ProviderCommentGl")
                        .HasForeignKey("PcglGuidelineId")
                        .HasConstraintName("PCGL_GUIDELINE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PcglPatient")
                        .WithMany("ProviderCommentGl")
                        .HasForeignKey("PcglPatientId")
                        .HasConstraintName("PCGL_PATIENT_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PcglProvider")
                        .WithMany("ProviderCommentGl")
                        .HasForeignKey("PcglProviderId")
                        .HasConstraintName("PCGL_PROVIDER_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recommendation", "PcglRecommendation")
                        .WithMany("ProviderCommentGl")
                        .HasForeignKey("PcglRecommendationId")
                        .HasConstraintName("PCGL_RECOMMENDATION_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderCommentRx", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "PrcmPrescr")
                        .WithMany("ProviderCommentRx")
                        .HasForeignKey("PrcmPrescrId")
                        .HasConstraintName("PRCM_PRESCR_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrcmProvider")
                        .WithMany("ProviderCommentRx")
                        .HasForeignKey("PrcmProviderId")
                        .HasConstraintName("PRCM_PROVIDER_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderGroup", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "Org")
                        .WithMany("ProviderGroup")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_PROVIDER_GROUP_ORG_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdProviderGrouptypeNavigation")
                        .WithMany("ProviderGroup")
                        .HasForeignKey("ShcdProviderGrouptype")
                        .HasConstraintName("FK_PROVIDER_GROUP_SHCD_PGT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderGroupLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "ParentNavigation")
                        .WithMany("ProviderGroupLinksParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_PROVGRP_LINK_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "SourceNavigation")
                        .WithMany("ProviderGroupLinksSourceNavigation")
                        .HasForeignKey("Source")
                        .HasConstraintName("FK_PROVGRP_LINK_SOURCE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProviderService", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("ProviderService")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("PROVIDER_SRV_PPPU_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("ProviderService")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("PROVIDER_SRV_SRV_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Shcd")
                        .WithMany("ProviderService")
                        .HasForeignKey("ShcdId")
                        .HasConstraintName("PROVIDER_SRV_SHCD_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ProvOrderFormat", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PofProv")
                        .WithMany("ProvOrderFormat")
                        .HasForeignKey("PofProvId")
                        .HasConstraintName("FK_PR_ORD_F_PROV_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PublishCopytoLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PublishLog", "PbclPublishLog")
                        .WithMany("PublishCopytoLink")
                        .HasForeignKey("PbclPublishLogId")
                        .HasConstraintName("PBCL_PUBLISH_LOG_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PbclRecipient")
                        .WithMany("PublishCopytoLink")
                        .HasForeignKey("PbclRecipientId")
                        .HasConstraintName("PBCL_RECIPIENT_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PublishItem", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PbitExternalSystem")
                        .WithMany("PublishItem")
                        .HasForeignKey("PbitExternalSystemId")
                        .HasConstraintName("PBIT_EXTERNAL_SYSTEM_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "PbitObject")
                        .WithMany("PublishItem")
                        .HasForeignKey("PbitObjectId")
                        .HasConstraintName("PBIT_OBJECT_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.PublishLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PblgDirectedto")
                        .WithMany("PublishLogPblgDirectedto")
                        .HasForeignKey("PblgDirectedtoId")
                        .HasConstraintName("PBLG_DIRECTEDTO_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "PblgLetter")
                        .WithMany("PublishLog")
                        .HasForeignKey("PblgLetterId")
                        .HasConstraintName("PBLG_LETTER_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "PblgObject")
                        .WithMany("PublishLog")
                        .HasForeignKey("PblgObjectId")
                        .HasConstraintName("PBLG_OBJECT_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PblgPublisher")
                        .WithMany("PublishLogPblgPublisher")
                        .HasForeignKey("PblgPublisherId")
                        .HasConstraintName("PBLG_PUBLISHER_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PblgSystem")
                        .WithMany("PublishLog")
                        .HasForeignKey("PblgSystemId")
                        .HasConstraintName("PBLG_SYSTEM_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Question", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "FinProvider")
                        .WithMany("Question")
                        .HasForeignKey("FinProviderId")
                        .HasConstraintName("FK_QUESTION_FIN_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "QuestionInvoice")
                        .WithMany("Question")
                        .HasForeignKey("QuestionInvoiceId")
                        .HasConstraintName("FK_QUESTION_INVOICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Trans")
                        .WithMany("Question")
                        .HasForeignKey("TransId")
                        .HasConstraintName("FK_QUESTION_TRANS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Queue", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("QueueCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_QUEUE_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFile", "DescriptionMacro")
                        .WithMany("QueueDescriptionMacro")
                        .HasForeignKey("DescriptionMacroId")
                        .HasConstraintName("FK_QUE_SFL_DESC_MACRO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DescriptionSc")
                        .WithMany("QueueDescriptionSc")
                        .HasForeignKey("DescriptionScId")
                        .HasConstraintName("FK_QUEUE_SC_DESCRIPTION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFile", "DetailsMacro")
                        .WithMany("QueueDetailsMacro")
                        .HasForeignKey("DetailsMacroId")
                        .HasConstraintName("FK_QUE_SFL_DETLS_MACRO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DetailsSc")
                        .WithMany("QueueDetailsSc")
                        .HasForeignKey("DetailsScId")
                        .HasConstraintName("FK_QUEUE_SC_DETAILS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFile", "InitiationMacro")
                        .WithMany("QueueInitiationMacro")
                        .HasForeignKey("InitiationMacroId")
                        .HasConstraintName("FK_QUE_SFL_INIT_MACRO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "InitiationSc")
                        .WithMany("QueueInitiationSc")
                        .HasForeignKey("InitiationScId")
                        .HasConstraintName("FK_QUEUE_SC_INITIATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "QueueDatacenterNavigation")
                        .WithMany("QueueQueueDatacenterNavigation")
                        .HasForeignKey("QueueDatacenter")
                        .HasConstraintName("FK_QUEUE_DATACENTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "QueueEmessageNavigation")
                        .WithMany("Queue")
                        .HasForeignKey("QueueEmessage")
                        .HasConstraintName("FK_QUEUE_EMESSAGE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFile", "QueueItemCreateMacro")
                        .WithMany("QueueQueueItemCreateMacro")
                        .HasForeignKey("QueueItemCreateMacroId")
                        .HasConstraintName("FK_QUE_SFL_QI_CRE_MACRO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QueueItemCreateSc")
                        .WithMany("QueueQueueItemCreateSc")
                        .HasForeignKey("QueueItemCreateScId")
                        .HasConstraintName("FK_QUEUE_SC_ITEMCREATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFile", "QueueItemMacro")
                        .WithMany("QueueQueueItemMacro")
                        .HasForeignKey("QueueItemMacroId")
                        .HasConstraintName("FK_QUE_SFL_QI_MACRO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QueueItemSc")
                        .WithMany("QueueQueueItemSc")
                        .HasForeignKey("QueueItemScId")
                        .HasConstraintName("FK_QUEUE_SC_QUEUEITEM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "QueuePosNavigation")
                        .WithMany("QueueQueuePosNavigation")
                        .HasForeignKey("QueuePos")
                        .HasConstraintName("FK_QUEUE_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RetiredByNavigation")
                        .WithMany("QueueRetiredByNavigation")
                        .HasForeignKey("RetiredBy")
                        .HasConstraintName("FK_QUEUE_RETIRED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFile", "StopMacroNavigation")
                        .WithMany("QueueStopMacroNavigation")
                        .HasForeignKey("StopMacroId")
                        .HasConstraintName("FK_QUE_SFL_STOP_MACRO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "StopSc")
                        .WithMany("QueueStopSc")
                        .HasForeignKey("StopScId")
                        .HasConstraintName("FK_QUEUE_SC_STOP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFile", "TerminationMacro")
                        .WithMany("QueueTerminationMacro")
                        .HasForeignKey("TerminationMacroId")
                        .HasConstraintName("FK_QUE_SFL_TERM_MACRO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TerminationSc")
                        .WithMany("QueueTerminationSc")
                        .HasForeignKey("TerminationScId")
                        .HasConstraintName("FK_QUEUE_SC_TERMINATION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.QueueItem", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedByNavigation")
                        .WithMany("QueueItem")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_QUEUE_ITEM_CREATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ObjectTypeNavigation")
                        .WithMany("QueueItemObjectTypeNavigation")
                        .HasForeignKey("ObjectType")
                        .HasConstraintName("FK_QUEUEITEM_OBJTYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Queue", "OriginQueue")
                        .WithMany("QueueItemOriginQueue")
                        .HasForeignKey("OriginQueueId")
                        .HasConstraintName("FK_QITEM_ORG_QUEUE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "OutcomeCodeNavigation")
                        .WithMany("QueueItemOutcomeCodeNavigation")
                        .HasForeignKey("OutcomeCode")
                        .HasConstraintName("FK_QUEUEITEM_OUTCOME");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("QueueItem")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_QUEUEITEM_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Queue", "Queue")
                        .WithMany("QueueItemQueue")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("FK_QUEUEITEM_QUEUE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.QueueItemLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.QueueItem", "QueueItem")
                        .WithMany("QueueItemLog")
                        .HasForeignKey("QueueItemId")
                        .HasConstraintName("FK_QUEUEITMLOG_QUEUEITM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ResultCodeNavigation")
                        .WithMany("QueueItemLog")
                        .HasForeignKey("ResultCode")
                        .HasConstraintName("FK_QUEUEITMLOG_RESCODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.QueueLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Queue", "Queue")
                        .WithMany("QueueLog")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("FK_QUEUELOG_QUEUE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ResultCodeNavigation")
                        .WithMany("QueueLog")
                        .HasForeignKey("ResultCode")
                        .HasConstraintName("FK_QUEUELOG_RESCODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Quoteactivity", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "QuaPos")
                        .WithMany("QuoteactivityQuaPos")
                        .HasForeignKey("QuaPosId")
                        .HasConstraintName("FK_QUA_PPPU_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "QuaQuote")
                        .WithMany("Quoteactivity")
                        .HasForeignKey("QuaQuoteId")
                        .HasConstraintName("FK_QUA_QUOTE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QuaStatus")
                        .WithMany("Quoteactivity")
                        .HasForeignKey("QuaStatusId")
                        .HasConstraintName("FK_QUA_SHORTCODE_STATUS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "QuaUser")
                        .WithMany("QuoteactivityQuaUser")
                        .HasForeignKey("QuaUserId")
                        .HasConstraintName("FK_QUA_PPPU_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Quotedetail", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Priorapproval", "Prap")
                        .WithMany("Quotedetail")
                        .HasForeignKey("PrapId")
                        .HasConstraintName("QTDT_FK_PRAP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "Qt")
                        .WithOne("Quotedetail")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Quotedetail", "QtId")
                        .HasConstraintName("QTDT_FK_QT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtdtDescriptioncodeNavigation")
                        .WithMany("Quotedetail")
                        .HasForeignKey("QtdtDescriptioncode")
                        .HasConstraintName("QTDT_FK_SHORTCODE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Quoteline", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Form")
                        .WithMany("Quoteline")
                        .HasForeignKey("FormId")
                        .HasConstraintName("QL_FK_FORM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "LklsIdAgencyNavigation")
                        .WithMany("QuotelineLklsIdAgencyNavigation")
                        .HasForeignKey("LklsIdAgency")
                        .HasConstraintName("QL_FK_PATIENT_AGENCY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quoteline", "ParentLn")
                        .WithMany("InverseParentLn")
                        .HasForeignKey("ParentLnId")
                        .HasConstraintName("QL_FK_PARENT_LN_I");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdServiceproviderNavigation")
                        .WithMany("QuotelinePppuIdServiceproviderNavigation")
                        .HasForeignKey("PppuIdServiceprovider")
                        .HasConstraintName("QL_FK_SRVCPROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdValidatedbyNavigation")
                        .WithMany("QuotelinePppuIdValidatedbyNavigation")
                        .HasForeignKey("PppuIdValidatedby")
                        .HasConstraintName("QL_FK_VALIDATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Priorapproval", "Prap")
                        .WithMany("Quoteline")
                        .HasForeignKey("PrapId")
                        .HasConstraintName("QL_FK_PRAP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdServiceNavigation")
                        .WithMany("QuotelinePtntIdServiceNavigation")
                        .HasForeignKey("PtntIdService")
                        .HasConstraintName("QUOTELINE_FK_PTNT_SERVICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "Qt")
                        .WithMany("QuotelineQt")
                        .HasForeignKey("QtId")
                        .HasConstraintName("QL_FK_QT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "QtIdBulkinvoiceNavigation")
                        .WithMany("QuotelineQtIdBulkinvoiceNavigation")
                        .HasForeignKey("QtIdBulkinvoice")
                        .HasConstraintName("QL_FK_ID_BULKINVOICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "QtIdServiceNavigation")
                        .WithMany("QuotelineQtIdServiceNavigation")
                        .HasForeignKey("QtIdService")
                        .HasConstraintName("QUOTELINE_FK_QT_SERVICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "QtlnAttendanceNavigation")
                        .WithMany("Quoteline")
                        .HasForeignKey("QtlnAttendance")
                        .HasConstraintName("QL_FK_ATTENDANCE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnBodyPart")
                        .WithMany("QuotelineQtlnBodyPart")
                        .HasForeignKey("QtlnBodyPartId")
                        .HasConstraintName("QTLN_BODY_PART_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "QtlnCase")
                        .WithMany("Quoteline")
                        .HasForeignKey("QtlnCaseId")
                        .HasConstraintName("QL_FK_BCASE_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnChargerateNavigation")
                        .WithMany("QuotelineQtlnChargerateNavigation")
                        .HasForeignKey("QtlnChargerate")
                        .HasConstraintName("QL_FK_CHARGERATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "QtlnDiagnosesNavigation")
                        .WithMany("QuotelineQtlnDiagnosesNavigation")
                        .HasForeignKey("QtlnDiagnoses")
                        .HasConstraintName("QUOTELINE_FK_DIAGNOSES");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnDiscountNavigation")
                        .WithMany("QuotelineQtlnDiscountNavigation")
                        .HasForeignKey("QtlnDiscountId")
                        .HasConstraintName("FK_QUOTELINE_DISCOUNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "QtlnDscdId1Navigation")
                        .WithMany("QuotelineQtlnDscdId1Navigation")
                        .HasForeignKey("QtlnDscdId1")
                        .HasConstraintName("QUOTELINE_FK_DSCD_ID_1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "QtlnDscdId2Navigation")
                        .WithMany("QuotelineQtlnDscdId2Navigation")
                        .HasForeignKey("QtlnDscdId2")
                        .HasConstraintName("QUOTELINE_FK_DSCD_ID_2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "QtlnDscdId3Navigation")
                        .WithMany("QuotelineQtlnDscdId3Navigation")
                        .HasForeignKey("QtlnDscdId3")
                        .HasConstraintName("QUOTELINE_FK_DSCD_ID_3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "QtlnFacilityNavigation")
                        .WithMany("QuotelineQtlnFacilityNavigation")
                        .HasForeignKey("QtlnFacility")
                        .HasConstraintName("QUOTELINE_FACILITY_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnGstTaxrateNavigation")
                        .WithMany("QuotelineQtlnGstTaxrateNavigation")
                        .HasForeignKey("QtlnGstTaxrate")
                        .HasConstraintName("FK_QTLN_SHCD_GST_TAXRATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quoteline", "QtlnIdDebitlineNavigation")
                        .WithMany("InverseQtlnIdDebitlineNavigation")
                        .HasForeignKey("QtlnIdDebitline")
                        .HasConstraintName("QL_FK_ID_DEBITLINE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quoteline", "QtlnIdServiceNavigation")
                        .WithMany("InverseQtlnIdServiceNavigation")
                        .HasForeignKey("QtlnIdService")
                        .HasConstraintName("QUOTELINE_FK_QTLN_SERVICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "QtlnInpatientpos")
                        .WithMany("QuotelineQtlnInpatientpos")
                        .HasForeignKey("QtlnInpatientposid")
                        .HasConstraintName("QL_FK_INPATIENTPOSID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnLocationNavigation")
                        .WithMany("QuotelineQtlnLocationNavigation")
                        .HasForeignKey("QtlnLocation")
                        .HasConstraintName("QUOTELINE_LOCATION_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnNature")
                        .WithMany("QuotelineQtlnNature")
                        .HasForeignKey("QtlnNatureId")
                        .HasConstraintName("QTLN_NATURE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnPstTaxrateNavigation")
                        .WithMany("QuotelineQtlnPstTaxrateNavigation")
                        .HasForeignKey("QtlnPstTaxrate")
                        .HasConstraintName("FK_QTLN_SHCD_PST_TAXRATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "QtlnReferralNavigation")
                        .WithMany("Quoteline")
                        .HasForeignKey("QtlnReferral")
                        .HasConstraintName("QL_FK_REFERRAL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "QtlnServiceposNavigation")
                        .WithMany("QuotelineQtlnServiceposNavigation")
                        .HasForeignKey("QtlnServicepos")
                        .HasConstraintName("QL_FK_SERVICEPOS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnStockLocation")
                        .WithMany("QuotelineQtlnStockLocation")
                        .HasForeignKey("QtlnStockLocationId")
                        .HasConstraintName("FK_QTLN_STOCK_LOCATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockLot", "QtlnStockLot")
                        .WithMany("Quoteline")
                        .HasForeignKey("QtlnStockLotId")
                        .HasConstraintName("FK_QTLN_STOCK_LOT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnSubmissioncodeNavigation")
                        .WithMany("QuotelineQtlnSubmissioncodeNavigation")
                        .HasForeignKey("QtlnSubmissioncode")
                        .HasConstraintName("QUOTELINE_SUBMISSIONCODE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtlnTaxrateNavigation")
                        .WithMany("QuotelineQtlnTaxrateNavigation")
                        .HasForeignKey("QtlnTaxrate")
                        .HasConstraintName("QL_FK_TAXRATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdLedgerNavigation")
                        .WithMany("QuotelineShcdIdLedgerNavigation")
                        .HasForeignKey("ShcdIdLedger")
                        .HasConstraintName("QL_FK_LEDGER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Srvc")
                        .WithMany("Quoteline")
                        .HasForeignKey("SrvcId")
                        .HasConstraintName("QL_FK_SRVC_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Quotes", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.BatchInvoices", "Batch")
                        .WithMany("QuotesBatch")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("FK_QUOTE_BATCH_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Deposits", "Deposit")
                        .WithMany("Quotes")
                        .HasForeignKey("DepositId")
                        .HasConstraintName("FK_QUOTE_DEPOSIT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.BatchInvoices", "Eob")
                        .WithMany("QuotesEob")
                        .HasForeignKey("EobId")
                        .HasConstraintName("FK_QUOTE_EOB_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "InvoiceValidatedByNavigation")
                        .WithMany("QuotesInvoiceValidatedByNavigation")
                        .HasForeignKey("InvoiceValidatedBy")
                        .HasConstraintName("FK_QUOTE_VALIDATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdIncomeNavigation")
                        .WithMany("QuotesPppuIdIncomeNavigation")
                        .HasForeignKey("PppuIdIncome")
                        .HasConstraintName("FK_QUOTE_PPPU_ID_INCOME");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPaymentposNavigation")
                        .WithMany("QuotesPppuIdPaymentposNavigation")
                        .HasForeignKey("PppuIdPaymentpos")
                        .HasConstraintName("FK_QUOTE_PPPU_ID_PAYMPOS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPaymentproviderNavigation")
                        .WithMany("QuotesPppuIdPaymentproviderNavigation")
                        .HasForeignKey("PppuIdPaymentprovider")
                        .HasConstraintName("FK_QUOTE_PPPU_ID_PAYMPROV");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPosNavigation")
                        .WithMany("QuotesPppuIdPosNavigation")
                        .HasForeignKey("PppuIdPos")
                        .HasConstraintName("QUOTES_FK_PPPU_ID_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdServiceNavigation")
                        .WithMany("QuotesPppuIdServiceNavigation")
                        .HasForeignKey("PppuIdService")
                        .HasConstraintName("FK_QUOTE_PPPU_ID_SERVICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Priorapproval", "Prap")
                        .WithMany("Quotes")
                        .HasForeignKey("PrapId")
                        .HasConstraintName("FK_QUOTE_PRAP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdGuarantorNavigation")
                        .WithMany("QuotesPtntIdGuarantorNavigation")
                        .HasForeignKey("PtntIdGuarantor")
                        .HasConstraintName("FK_QUOTE_GUARANTOR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdInsurerNavigation")
                        .WithMany("QuotesPtntIdInsurerNavigation")
                        .HasForeignKey("PtntIdInsurer")
                        .HasConstraintName("FK_QUOTE_INSURER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdServiceNavigation")
                        .WithMany("QuotesPtntIdServiceNavigation")
                        .HasForeignKey("PtntIdService")
                        .HasConstraintName("FK_QUOTE_PTNT_SERVICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "QtAttendanceNavigation")
                        .WithMany("Quotes")
                        .HasForeignKey("QtAttendance")
                        .HasConstraintName("FK_QUOTE_ATTENDANCE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "QtAutocreatedNavigation")
                        .WithMany("InverseQtAutocreatedNavigation")
                        .HasForeignKey("QtAutocreated")
                        .HasConstraintName("FK_QT_AUTOCREATED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "QtCase")
                        .WithMany("Quotes")
                        .HasForeignKey("QtCaseId")
                        .HasConstraintName("FK_QUOTE_BCASE_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PppuCover", "QtCover")
                        .WithMany("Quotes")
                        .HasForeignKey("QtCoverid")
                        .HasConstraintName("FK_QUOTECOVER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "QtCreditNote")
                        .WithMany("QuotesQtCreditNote")
                        .HasForeignKey("QtCreditNoteId")
                        .HasConstraintName("QT_CREDIT_NOTE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "QtDeletedby")
                        .WithMany("Quotes")
                        .HasForeignKey("QtDeletedbyid")
                        .HasConstraintName("FK_QUOTE_DELETEDBYID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtDescriptioncodeNavigation")
                        .WithMany("QuotesQtDescriptioncodeNavigation")
                        .HasForeignKey("QtDescriptioncode")
                        .HasConstraintName("FK_QUOTE_DESCRIPTIONCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "QtFpayerNavigation")
                        .WithMany("QuotesQtFpayerNavigation")
                        .HasForeignKey("QtFpayer")
                        .HasConstraintName("FK_QUOTES_PATIENT_FPAYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "QtIdAnnulledNavigation")
                        .WithMany("InverseQtIdAnnulledNavigation")
                        .HasForeignKey("QtIdAnnulled")
                        .HasConstraintName("QUOTES_FK_ANNULLED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "QtIdGroupNavigation")
                        .WithMany("InverseQtIdGroupNavigation")
                        .HasForeignKey("QtIdGroup")
                        .HasConstraintName("QUOTES_FK_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "QtInvoice")
                        .WithMany("QuotesQtInvoice")
                        .HasForeignKey("QtInvoiceId")
                        .HasConstraintName("FK_QT_INVOICE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtLedger")
                        .WithMany("QuotesQtLedger")
                        .HasForeignKey("QtLedgerId")
                        .HasConstraintName("FK_QT_LEDGER_SHORTCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "QtLetter")
                        .WithMany("Quotes")
                        .HasForeignKey("QtLetterId")
                        .HasConstraintName("FK_QT_LETTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "QtPayerNavigation")
                        .WithMany("QuotesQtPayerNavigation")
                        .HasForeignKey("QtPayer")
                        .HasConstraintName("QUOTES_FK_PAYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientcard", "QtPayerplanNavigation")
                        .WithMany("Quotes")
                        .HasForeignKey("QtPayerplan")
                        .HasConstraintName("QUOTES_FK_PAYERPLAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtPayerplanrateNavigation")
                        .WithMany("QuotesQtPayerplanrateNavigation")
                        .HasForeignKey("QtPayerplanrate")
                        .HasConstraintName("FK_QUOTE_PAYERPLANRATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "QtPendingstatus")
                        .WithMany("QuotesQtPendingstatus")
                        .HasForeignKey("QtPendingstatusId")
                        .HasConstraintName("FK_QT_SHCD_PENDINGSTATUS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "QtReferralNavigation")
                        .WithMany("Quotes")
                        .HasForeignKey("QtReferral")
                        .HasConstraintName("FK_QUOTE_REFERRAL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientVerificationRequest", "QtRequestO")
                        .WithMany("Quotes")
                        .HasForeignKey("QtRequestOid")
                        .HasConstraintName("FK_QUOTES_REQUEST");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "QtResubmit")
                        .WithMany("QuotesQtResubmit")
                        .HasForeignKey("QtResubmitId")
                        .HasConstraintName("QT_RESUBMIT_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "QtSecondpayerNavigation")
                        .WithMany("QuotesQtSecondpayerNavigation")
                        .HasForeignKey("QtSecondpayer")
                        .HasConstraintName("QUOTES_FK_SECONDPAYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "QtSplitprovNavigation")
                        .WithMany("QuotesQtSplitprovNavigation")
                        .HasForeignKey("QtSplitprov")
                        .HasConstraintName("FK_QT_SPLITPROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SchdIdDiscountNavigation")
                        .WithMany("QuotesSchdIdDiscountNavigation")
                        .HasForeignKey("SchdIdDiscount")
                        .HasConstraintName("FK_QUOTE_DISCOUNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SchdIdRateNavigation")
                        .WithMany("QuotesSchdIdRateNavigation")
                        .HasForeignKey("SchdIdRate")
                        .HasConstraintName("FK_QUOTE_RATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdPlanNavigation")
                        .WithMany("QuotesShcdIdPlanNavigation")
                        .HasForeignKey("ShcdIdPlan")
                        .HasConstraintName("FK_QUOTE_PLAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallauditmacrolist", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "RcpaCareplan")
                        .WithMany("Recallauditmacrolist")
                        .HasForeignKey("RcpaCareplanid")
                        .HasConstraintName("FK_CAREPLANID_RCPL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallcarevisit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallcarevisitCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLCAREVISIT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallcarevisitDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLCAREVISIT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallcarevisit", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLCAREVISIT_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RcvPos")
                        .WithMany("RecallcarevisitRcvPos")
                        .HasForeignKey("RcvPosId")
                        .HasConstraintName("RCV_POS_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RcvProvider")
                        .WithMany("RecallcarevisitRcvProvider")
                        .HasForeignKey("RcvProviderId")
                        .HasConstraintName("RCV_PROVIDER_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "RcvReason")
                        .WithMany("Recallcarevisit")
                        .HasForeignKey("RcvReasonId")
                        .HasConstraintName("RCV_REASON_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RcvVisitType")
                        .WithMany("Recallcarevisit")
                        .HasForeignKey("RcvVisitTypeId")
                        .HasConstraintName("RCV_VISIT_TYPE_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallimmunisation", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallimmunisationCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLIMM_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallimmunisationDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLIMM_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockItem", "DiluentStockItem")
                        .WithMany("Recallimmunisation")
                        .HasForeignKey("DiluentStockItemId")
                        .HasConstraintName("IMM_DIL_STOCK_ITEM_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockLot", "DiluentStockLot")
                        .WithMany("RecallimmunisationDiluentStockLot")
                        .HasForeignKey("DiluentStockLotId")
                        .HasConstraintName("IMM_DLNT_STOCK_LOT_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "DoseNavigation")
                        .WithMany("RecallimmunisationDoseNavigation")
                        .HasForeignKey("Dose")
                        .HasConstraintName("RECALLIMMUNISATION_DOSE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "IndicationShortcode")
                        .WithMany("RecallimmunisationIndicationShortcode")
                        .HasForeignKey("IndicationShortcodeId")
                        .HasConstraintName("FK_INDICATION_SHORTCODE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallimmunisation", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLIMMUNISATION_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "NeedleNavigation")
                        .WithMany("RecallimmunisationNeedleNavigation")
                        .HasForeignKey("Needle")
                        .HasConstraintName("RECALLIMMUNISATION_NEEDLE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RouteShortcode")
                        .WithMany("RecallimmunisationRouteShortcode")
                        .HasForeignKey("RouteShortcodeId")
                        .HasConstraintName("FK_RI_ROUTE_SHORTCODE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "Rx")
                        .WithMany("Recallimmunisation")
                        .HasForeignKey("RxId")
                        .HasConstraintName("RECALLIMM_FK_RX_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("Recallimmunisation")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("IMM_SERVICE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SiteShortcode")
                        .WithMany("RecallimmunisationSiteShortcode")
                        .HasForeignKey("SiteShortcodeId")
                        .HasConstraintName("FK_RI_SITE_SHORTCODE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockLot", "StockLot")
                        .WithMany("RecallimmunisationStockLot")
                        .HasForeignKey("StockLotId")
                        .HasConstraintName("IMM_STOCK_LOT_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallobjective", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Careobjective", "Careobjective")
                        .WithMany("Recallobjective")
                        .HasForeignKey("Careobjectiveid")
                        .HasConstraintName("FK_RECALLOBJECTIVE_CAREO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("Recallobjective")
                        .HasForeignKey("Caseid")
                        .HasConstraintName("FK_RECALLOBJECTIVE_CASEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallobjectiveCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLOBJECTIVE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallobjectiveDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLOBJECTIVE_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallobjective", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLOBJECTIVE_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("Recallobjective")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("RECALLOBJECTIVE_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacyrole")
                        .WithMany("Recallobjective")
                        .HasForeignKey("Privacyroleid")
                        .HasConstraintName("FK_RECALLOBJECTIVE_PR_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallplan", "Recallplan")
                        .WithMany("Recallobjective")
                        .HasForeignKey("Recallplanid")
                        .HasConstraintName("FK_RECALLOBJECTIVE_RP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("Recallobjective")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_RECALLOBJECTIVE_SERVICE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdCompletedoutcome")
                        .WithMany("RecallobjectiveShcdCompletedoutcome")
                        .HasForeignKey("ShcdCompletedoutcomeid")
                        .HasConstraintName("FK_RECALLOBJECTIVE_CO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdObjectivetype")
                        .WithMany("RecallobjectiveShcdObjectivetype")
                        .HasForeignKey("ShcdObjectivetypeid")
                        .HasConstraintName("FK_RECALLOBJECTIVE_OT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplan", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallplanCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLPLAN_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallplanDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLPLAN_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLPLAN_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ComplexFilter", "RcplComplexFilter")
                        .WithMany("Recallplan")
                        .HasForeignKey("RcplComplexFilterId")
                        .HasConstraintName("RCPL_FK_COMP_FILTERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanstream", "RcplDefaultStream")
                        .WithMany("Recallplan")
                        .HasForeignKey("RcplDefaultStreamId")
                        .HasConstraintName("RCPL_FK_DEFAULT_STREAM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RcplDesignedby")
                        .WithMany("Recallplan")
                        .HasForeignKey("RcplDesignedbyid")
                        .HasConstraintName("RECALLPLAN_FK_DESIGNEDBYID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.HelpInfo", "RcplHelpInfoNavigation")
                        .WithMany("RecallplanRcplHelpInfoNavigation")
                        .HasForeignKey("RcplHelpInfo")
                        .HasConstraintName("RCPL_FK_HELP_INFO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "RcplPrivacyrole")
                        .WithMany("Recallplan")
                        .HasForeignKey("RcplPrivacyroleid")
                        .HasConstraintName("FK_RP_PRIVACYROLEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.HelpInfo", "RcplProviderInfoNavigation")
                        .WithMany("RecallplanRcplProviderInfoNavigation")
                        .HasForeignKey("RcplProviderInfo")
                        .HasConstraintName("RCPL_FK_PROVIDER_INFO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "SrvcIdPlan")
                        .WithMany("Recallplan")
                        .HasForeignKey("SrvcIdPlanid")
                        .HasConstraintName("RECALLPLANFOREIGNKEY1");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplanaction", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "CpacAlternativeCp")
                        .WithMany("Recallplanaction")
                        .HasForeignKey("CpacAlternativeCpId")
                        .HasConstraintName("FK_CPAC_ALTERNATIVE_CP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanvisit", "CpacCpvs")
                        .WithMany("Recallplanaction")
                        .HasForeignKey("CpacCpvsId")
                        .HasConstraintName("FK_CPVS_RCPL_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recommendation", "CpacRecommendation")
                        .WithMany("Recallplanaction")
                        .HasForeignKey("CpacRecommendationId")
                        .HasConstraintName("CPAC_RECOMMENDATION_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallvisittemplate", "CpacVisittemplate")
                        .WithMany("Recallplanaction")
                        .HasForeignKey("CpacVisittemplateid")
                        .HasConstraintName("RPA_FK_VISITTEMPLATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallplanactionCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLPLANACTION_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallplanactionDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLPLANACTION_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanaction", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLPLANACTION_FK_MASTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplaneventprops", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept")
                        .WithMany("Recallplaneventprops")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("RPE_PROPS_FK_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Disease")
                        .WithMany("Recallplaneventprops")
                        .HasForeignKey("DiseaseId")
                        .HasConstraintName("RPE_PROPS_FK_DISEASECODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanevents", "Event")
                        .WithOne("Recallplaneventprops")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Recallplaneventprops", "EventId")
                        .HasConstraintName("RPE_PROPS_FK_RECALLPLANEVENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "Term")
                        .WithMany("Recallplaneventprops")
                        .HasForeignKey("TermId")
                        .HasConstraintName("RPE_PROPS_FK_TERM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplanevents", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "Careplan")
                        .WithMany("Recallplanevents")
                        .HasForeignKey("CareplanId")
                        .HasConstraintName("RP_EVENTS_FK_RECALLPLAN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplanstream", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "RcstRcpl")
                        .WithMany("Recallplanstream")
                        .HasForeignKey("RcstRcplId")
                        .HasConstraintName("RC_STREAM_FK_RCPL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallplanvisit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallplanvisitCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLPLANVISIT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallplanvisitDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLPLANVISIT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanvisit", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLPLANVISIT_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdProviderNavigation")
                        .WithMany("RecallplanvisitPppuIdProviderNavigation")
                        .HasForeignKey("PppuIdProvider")
                        .HasConstraintName("RECALLPLANVISIT_FK_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuPosNavigation")
                        .WithMany("RecallplanvisitPppuPosNavigation")
                        .HasForeignKey("PppuPos")
                        .HasConstraintName("FK_RV_PPPU_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacyrole")
                        .WithMany("Recallplanvisit")
                        .HasForeignKey("Privacyroleid")
                        .HasConstraintName("FK_RV_PRIVACYROLEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplan", "Rcpl")
                        .WithMany("Recallplanvisit")
                        .HasForeignKey("RcplId")
                        .HasConstraintName("RECALLPLANVISITFOREIGNKEY1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Careobjective", "RpvsCareobjective")
                        .WithMany("Recallplanvisit")
                        .HasForeignKey("RpvsCareobjectiveId")
                        .HasConstraintName("FK_RPVS_CAREOBJECTIVE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Carerecurrence", "RpvsCarerecurrenceO")
                        .WithMany("Recallplanvisit")
                        .HasForeignKey("RpvsCarerecurrenceOid")
                        .HasConstraintName("FK_RPVS_CARERECURRENCE_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanvisit", "RpvsDdVisitNavigation")
                        .WithMany("InverseRpvsDdVisitNavigation")
                        .HasForeignKey("RpvsDdVisit")
                        .HasConstraintName("FK_PRVS_DD_VISIT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RpvsExtProviderNavigation")
                        .WithMany("RecallplanvisitRpvsExtProviderNavigation")
                        .HasForeignKey("RpvsExtProvider")
                        .HasConstraintName("FK_CV_EXT_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanstream", "RpvsPlanstream")
                        .WithMany("Recallplanvisit")
                        .HasForeignKey("RpvsPlanstreamid")
                        .HasConstraintName("RPVS_PLANSTREAMID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "RpvsSpecialtyconcept")
                        .WithMany("RecallplanvisitRpvsSpecialtyconcept")
                        .HasForeignKey("RpvsSpecialtyconceptId")
                        .HasConstraintName("FK_RPVS_SPEC_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "RpvsSpecialtytypeconcept")
                        .WithMany("RecallplanvisitRpvsSpecialtytypeconcept")
                        .HasForeignKey("RpvsSpecialtytypeconceptId")
                        .HasConstraintName("FK_RPVS_SPEC_TYPECONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdVisittypeNavigation")
                        .WithMany("Recallplanvisit")
                        .HasForeignKey("ShcdVisittype")
                        .HasConstraintName("FK_RV_SHCD_VISITTYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "SrvcIdVisit")
                        .WithMany("Recallplanvisit")
                        .HasForeignKey("SrvcIdVisitid")
                        .HasConstraintName("RECALLPLANVISITFOREIGNKEY2");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallrecurrence", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallrecurrenceCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLRECURRENCE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallrecurrenceDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLRECURRENCE_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallrecurrence", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLRECURRENCE_FK_MASTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallreference", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Activity")
                        .WithMany("Recallreference")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("RECALLREFERENCE_FK_ACTIVITY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallreferenceCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLREFERENCE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallreferenceDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLREFERENCE_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Diagnosis")
                        .WithMany("Recallreference")
                        .HasForeignKey("Diagnosisid")
                        .HasConstraintName("RECALLREFER_FK_DIAGNOSIS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "Letter")
                        .WithMany("Recallreference")
                        .HasForeignKey("LetterId")
                        .HasConstraintName("RECALLREFERENCE_FK_LETTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallreference", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLREFERENCE_FK_MASTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RecallResultAction", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallplanaction", "CarePlanAction")
                        .WithMany("RecallResultAction")
                        .HasForeignKey("CarePlanActionId")
                        .HasConstraintName("FK_RRA_CARE_PLAN_ACTION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept")
                        .WithMany("RecallResultAction")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("FK_RRA_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallResultActionCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLRESULTACT_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallResultActionDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLRESULTACT_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RecallResultAction", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALL_RESULT_ACTION_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallaction", "RecallPlanAction")
                        .WithMany("RecallResultAction")
                        .HasForeignKey("RecallPlanActionId")
                        .HasConstraintName("FK_RRA_RECALL_PLAN_ACTION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermset", "Termset")
                        .WithMany("RecallResultAction")
                        .HasForeignKey("TermsetId")
                        .HasConstraintName("FK_RRA_TERMSET_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RecallresultactionShortcode", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallresultactionShortcodeCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLRESACT_SC_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallresultactionShortcodeDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLRESACT_SC_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RecallresultactionShortcode", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RRASC_SHORTCODE_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RecallResultAction", "ResultAction")
                        .WithMany("RecallresultactionShortcode")
                        .HasForeignKey("ResultActionId")
                        .HasConstraintName("FK_RRASC_RESULT_ACTION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShortCode")
                        .WithMany("RecallresultactionShortcode")
                        .HasForeignKey("ShortCodeId")
                        .HasConstraintName("FK_RRASC_SHORT_CODE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallservice", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallserviceCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLSERVICE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallserviceDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLSERVICE_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallservice", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLSERVICE_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RateNavigation")
                        .WithMany("Recallservice")
                        .HasForeignKey("Rate")
                        .HasConstraintName("RECALLSERVICE_FK_RATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("Recallservice")
                        .HasForeignKey("Serviceid")
                        .HasConstraintName("FK_RECALLSERVID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recallvisittemplate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept")
                        .WithMany("Recallvisittemplate")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("FK_RV_TEMPLATE_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RecallvisittemplateCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RECALLVISITTEMP_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RecallvisittemplateDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RECALLVISITTEMP_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recallvisittemplate", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RECALLVISITTEMPLATE_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "OwnerPppu")
                        .WithMany("Recallvisittemplate")
                        .HasForeignKey("OwnerPppuId")
                        .HasConstraintName("RVT_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("Recallvisittemplate")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("RVT_FK_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recommendation", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recommendationsfolders", "FolderO")
                        .WithMany("Recommendation")
                        .HasForeignKey("FolderOid")
                        .HasConstraintName("REC_REC_FOLDERS_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Guideline", "RcGuideline")
                        .WithMany("Recommendation")
                        .HasForeignKey("RcGuidelineId")
                        .HasConstraintName("RC_GUIDELINE_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Recommendationsfolders", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Guideline", "GuidelinesO")
                        .WithMany("Recommendationsfolders")
                        .HasForeignKey("GuidelinesOid")
                        .HasConstraintName("REC_FOLDERS_GUIDELN_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recommendationsfolders", "ParentfolderO")
                        .WithMany("InverseParentfolderO")
                        .HasForeignKey("ParentfolderOid")
                        .HasConstraintName("REC_FOLDERS_REC_FOLDERS_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RecommSituationLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Recommendation", "RslRecommendation")
                        .WithMany("RecommSituationLink")
                        .HasForeignKey("RslRecommendationId")
                        .HasConstraintName("RSL_RECOMMENDATION_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Situation", "RslSituation")
                        .WithMany("RecommSituationLink")
                        .HasForeignKey("RslSituationId")
                        .HasConstraintName("RSL_SITUATION_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Referral", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Activity")
                        .WithMany("Referral")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("REFERRAL_FK_ACTIVITY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AlteredBy")
                        .WithMany("ReferralAlteredBy")
                        .HasForeignKey("AlteredById")
                        .HasConstraintName("REFERRAL_FK_ALTERED_BY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "AppointmentNavigation")
                        .WithMany("Referral")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("REFERRAL_FK_APPOINTMENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case2Navigation")
                        .WithMany("Referral")
                        .HasForeignKey("Case2")
                        .HasConstraintName("REFERRAL_FK_CASE2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Creator")
                        .WithMany("ReferralCreator")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("REFERRAL_FK_CREATOR_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "Diagnosis")
                        .WithMany("Referral")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("REFERRAL_FK_DIAGNOSIS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "LinkedToNavigation")
                        .WithMany("InverseLinkedToNavigation")
                        .HasForeignKey("LinkedTo")
                        .HasConstraintName("REFERRAL_FK_LINKEDTO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("Referral")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("REFERRAL_FK_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("Referral")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_REFERRAL_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("ReferralPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("REFERRAL_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RefByExtProv")
                        .WithMany("ReferralRefByExtProv")
                        .HasForeignKey("RefByExtProvId")
                        .HasConstraintName("REFERRAL_FK_REF_BY_EXT_PROV_");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RefByPos")
                        .WithMany("ReferralRefByPos")
                        .HasForeignKey("RefByPosId")
                        .HasConstraintName("REFERRAL_FK_REF_BY_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RefByProv")
                        .WithMany("ReferralRefByProv")
                        .HasForeignKey("RefByProvId")
                        .HasConstraintName("REFERRAL_FK_REF_BY_PROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RefDecisionShortcode")
                        .WithMany("ReferralRefDecisionShortcode")
                        .HasForeignKey("RefDecisionShortcodeid")
                        .HasConstraintName("FK_REFERRAL_DECISION_SHORTCO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Letter", "RefLetter")
                        .WithMany("Referral")
                        .HasForeignKey("RefLetterId")
                        .HasConstraintName("REFERRAL_FK_REF_LETTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RefPriority")
                        .WithMany("ReferralRefPriority")
                        .HasForeignKey("RefPriorityId")
                        .HasConstraintName("FK_REFERRAL_PRIORITY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RefToExtProv")
                        .WithMany("ReferralRefToExtProv")
                        .HasForeignKey("RefToExtProvId")
                        .HasConstraintName("REFERRAL_FK_REF_TO_EXT_PROV_");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RefToPos")
                        .WithMany("ReferralRefToPos")
                        .HasForeignKey("RefToPosId")
                        .HasConstraintName("REFERRAL_FK_REF_TO_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RefToProv")
                        .WithMany("ReferralRefToProv")
                        .HasForeignKey("RefToProvId")
                        .HasConstraintName("REFERRAL_FK_REF_TO_PROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrackingNavigation")
                        .WithMany("ReferralTrackingNavigation")
                        .HasForeignKey("Tracking")
                        .HasConstraintName("REF_TRACKING_SHORTCODE_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralDocumentitemLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "RdilReferral")
                        .WithMany("ReferralDocumentitemLinks")
                        .HasForeignKey("RdilReferralId")
                        .HasConstraintName("FK_RDIL_REFERRAL_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "RdilTrans")
                        .WithMany("ReferralDocumentitemLinks")
                        .HasForeignKey("RdilTransId")
                        .HasConstraintName("FK_RDIL_TRANS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "RdilTransdata")
                        .WithMany("ReferralDocumentitemLinks")
                        .HasForeignKey("RdilTransdataId")
                        .HasConstraintName("FK_RDIL_TRANSDATA_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralDocumentLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "RdlReferral")
                        .WithMany("ReferralDocumentLinks")
                        .HasForeignKey("RdlReferralId")
                        .HasConstraintName("FK_RDL_REFERRAL_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "RdlTrans")
                        .WithMany("ReferralDocumentLinks")
                        .HasForeignKey("RdlTransId")
                        .HasConstraintName("FK_RDL_TRANS_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralFamilyproblemLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientFamilyProblems", "RfplFamilyproblem")
                        .WithMany("ReferralFamilyproblemLinks")
                        .HasForeignKey("RfplFamilyproblemId")
                        .HasConstraintName("FK_RFPL_FPROBLEM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "RfplReferral")
                        .WithMany("ReferralFamilyproblemLinks")
                        .HasForeignKey("RfplReferralId")
                        .HasConstraintName("FK_RFPL_REFERRAL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralFlowchartLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Flowchartdef", "RflFlowchart")
                        .WithMany("ReferralFlowchartLinks")
                        .HasForeignKey("RflFlowchartId")
                        .HasConstraintName("FK_RFL_FLOWCHART_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "RflReferral")
                        .WithMany("ReferralFlowchartLinks")
                        .HasForeignKey("RflReferralId")
                        .HasConstraintName("FK_RFL_REFERRAL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralFormLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "Form")
                        .WithMany("ReferralFormLinks")
                        .HasForeignKey("FormId")
                        .HasConstraintName("REF_FORM_LINKS_FK_FORM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "Referral")
                        .WithMany("ReferralFormLinks")
                        .HasForeignKey("ReferralId")
                        .HasConstraintName("REF_FORM_LINKS_FK_REFERRAL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralMedLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "RmlMedO")
                        .WithMany("ReferralMedLinks")
                        .HasForeignKey("RmlMedOid")
                        .HasConstraintName("FK_RML_MED_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "RmlReferral")
                        .WithMany("ReferralMedLinks")
                        .HasForeignKey("RmlReferralId")
                        .HasConstraintName("FK_RML_REFERRAL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralOrderitemLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Orders", "RoilOrder")
                        .WithMany("ReferralOrderitemLinks")
                        .HasForeignKey("RoilOrderId")
                        .HasConstraintName("FK_ROIL_ORDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrderItem", "RoilOrderItem")
                        .WithMany("ReferralOrderitemLinks")
                        .HasForeignKey("RoilOrderItemId")
                        .HasConstraintName("FK_ROIL_ORDERITEM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "RoilReferral")
                        .WithMany("ReferralOrderitemLinks")
                        .HasForeignKey("RoilReferralId")
                        .HasConstraintName("FK_ROIL_REFERRAL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralProblemLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientproblem", "RplProblem")
                        .WithMany("ReferralProblemLinks")
                        .HasForeignKey("RplProblemId")
                        .HasConstraintName("FK_RPL_PROBLEM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "RplReferral")
                        .WithMany("ReferralProblemLinks")
                        .HasForeignKey("RplReferralId")
                        .HasConstraintName("FK_RPL_REFERRAL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReferralProcedureLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Procedureop", "RprlProcedure")
                        .WithMany("ReferralProcedureLinks")
                        .HasForeignKey("RprlProcedureId")
                        .HasConstraintName("FK_RPRL_PROCEDURE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "RprlReferral")
                        .WithMany("ReferralProcedureLinks")
                        .HasForeignKey("RprlReferralId")
                        .HasConstraintName("FK_RPRL_REFERRAL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Region", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Region", "RgnParentNavigation")
                        .WithMany("InverseRgnParentNavigation")
                        .HasForeignKey("RgnParent")
                        .HasConstraintName("REGION_FK_TREE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RegionPostcode", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PostCodes", "RgpcPostcodeNavigation")
                        .WithMany("RegionPostcode")
                        .HasForeignKey("RgpcPostcode")
                        .HasConstraintName("RGPC_FK_POSTCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Region", "RgpcRegionNavigation")
                        .WithMany("RegionPostcode")
                        .HasForeignKey("RgpcRegion")
                        .HasConstraintName("RGPC_FK_REGION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Registry", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("Registry")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("REGISTRY_FK_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RegistryCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("REGISTRY_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RegistryDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("REGISTRY_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ExtProvider")
                        .WithMany("RegistryExtProvider")
                        .HasForeignKey("ExtProviderId")
                        .HasConstraintName("REGISTRY_FK_EXT_PROVIDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Key")
                        .WithMany("Registry")
                        .HasForeignKey("KeyId")
                        .HasConstraintName("REGISTRY_FK_KEY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Registry", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("REGISTRY_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "OrgMember")
                        .WithMany("Registry")
                        .HasForeignKey("OrgMemberId")
                        .HasConstraintName("REGISTRY_FK_ORG_MEMBER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("Registry")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("REGISTRY_FK_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("RegistryPppu")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("REGISTRY_FK_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "RegRoleNavigation")
                        .WithMany("Registry")
                        .HasForeignKey("RegRole")
                        .HasConstraintName("FK_REGISTRY_ROLE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Reports", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RpMacro")
                        .WithMany("Reports")
                        .HasForeignKey("RpMacroId")
                        .HasConstraintName("REPORTS_FK_MACRO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .HasConstraintName("REPORTS_FK_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ReportsLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "RlPatient")
                        .WithMany("ReportsLog")
                        .HasForeignKey("RlPatientId")
                        .HasConstraintName("FK_REPORTS_LOG_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RlPos")
                        .WithMany("ReportsLogRlPos")
                        .HasForeignKey("RlPosId")
                        .HasConstraintName("FK_REPORTS_LOG_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RlUser")
                        .WithMany("ReportsLogRlUser")
                        .HasForeignKey("RlUserId")
                        .HasConstraintName("FK_REPORTS_LOG_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ResultDrugMapping", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept")
                        .WithMany("ResultDrugMapping")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("FK_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "Rx")
                        .WithMany("ResultDrugMapping")
                        .HasForeignKey("RxId")
                        .HasConstraintName("FK_RX_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Rolepreference", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "RpRole")
                        .WithMany("Rolepreference")
                        .HasForeignKey("RpRoleId")
                        .HasConstraintName("FK_RP_ROLE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RxDispenseAdminister", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockLot", "RdaDiluentStockLot")
                        .WithMany("RxDispenseAdministerRdaDiluentStockLot")
                        .HasForeignKey("RdaDiluentStockLotId")
                        .HasConstraintName("RDA_DILUENT_STOCK_LOT_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "RdaParentDispense")
                        .WithMany("RxDispenseAdministerRdaParentDispense")
                        .HasForeignKey("RdaParentDispenseId")
                        .HasConstraintName("RDA_PARENT_DISPENSE_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "RdaPrimaryPrescr")
                        .WithMany("RxDispenseAdministerRdaPrimaryPrescr")
                        .HasForeignKey("RdaPrimaryPrescrId")
                        .HasConstraintName("RDA_PRIMARY_PRESCR_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockLot", "RdaStockLot")
                        .WithMany("RxDispenseAdministerRdaStockLot")
                        .HasForeignKey("RdaStockLotId")
                        .HasConstraintName("RDA_STOCK_LOT_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RxScheduleMeds", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "Rx")
                        .WithMany("RxScheduleMeds")
                        .HasForeignKey("RxId")
                        .HasConstraintName("FK_RXSCHEDULE_MEDS_RX");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxScheduleStationery", "Stationery")
                        .WithMany("RxScheduleMeds")
                        .HasForeignKey("StationeryId")
                        .HasConstraintName("FK_RXSCDLS_MEDS_STATIONERY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.RxSchedules", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "AltPharmacy")
                        .WithMany("RxSchedulesAltPharmacy")
                        .HasForeignKey("AltPharmacyId")
                        .HasConstraintName("FK_RXSCHEDULES_ALT_PHARMACY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "CancelReasonNavigation")
                        .WithMany("RxSchedulesCancelReasonNavigation")
                        .HasForeignKey("CancelReason")
                        .HasConstraintName("FK_RXSCHEDULES_CANCEL_REASON");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("RxSchedules")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_RXSCHDLS_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreateByNavigation")
                        .WithMany("RxSchedulesCreateByNavigation")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_RXSCHEDULES_CREATE_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("RxSchedulesCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("RX_SCHEDULES_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("RxSchedulesDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("RX_SCHEDULES_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Frequency")
                        .WithMany("RxSchedulesFrequency")
                        .HasForeignKey("FrequencyId")
                        .HasConstraintName("FK_RXSCDLS_FREQ");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Location")
                        .WithMany("RxSchedulesLocation")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_RXSCHEDULES_LOCATION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxSchedules", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("RX_SCHEDULES_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxScheduleMeds", "Medication")
                        .WithMany("RxSchedules")
                        .HasForeignKey("MedicationId")
                        .HasConstraintName("FK_RXSCHEDULES_MEDS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ModifyByNavigation")
                        .WithMany("RxSchedulesModifyByNavigation")
                        .HasForeignKey("ModifyBy")
                        .HasConstraintName("FK_RXSCHEDULES_MODIFY_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("RxSchedules")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_RXSCHEDULES_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pharmacy")
                        .WithMany("RxSchedulesPharmacy")
                        .HasForeignKey("PharmacyId")
                        .HasConstraintName("FK_RXSCHEDULES_PHARMACY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrintByNavigation")
                        .WithMany("RxSchedulesPrintByNavigation")
                        .HasForeignKey("PrintBy")
                        .HasConstraintName("FK_RXSCHEDULES_PRINT_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ReduceFrequencyNavigation")
                        .WithMany("RxSchedulesReduceFrequencyNavigation")
                        .HasForeignKey("ReduceFrequency")
                        .HasConstraintName("FK_RXSCDLS_REDUCE_FREQ");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ReduceStepNavigation")
                        .WithMany("RxSchedulesReduceStepNavigation")
                        .HasForeignKey("ReduceStep")
                        .HasConstraintName("FK_RXSCDLS_REDUCE_STEP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxSchedules", "ReplaceRef1Navigation")
                        .WithMany("InverseReplaceRef1Navigation")
                        .HasForeignKey("ReplaceRef1")
                        .HasConstraintName("FK_RXSCDLS_REPLACE_REF_1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxSchedules", "ReplaceRef2Navigation")
                        .WithMany("InverseReplaceRef2Navigation")
                        .HasForeignKey("ReplaceRef2")
                        .HasConstraintName("FK_RXSCDLS_REPLACE_REF_2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxSchedules", "ReplaceRef3Navigation")
                        .WithMany("InverseReplaceRef3Navigation")
                        .HasForeignKey("ReplaceRef3")
                        .HasConstraintName("FK_RXSCDLS_REPLACE_REF_3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RequestFromNavigation")
                        .WithMany("RxSchedulesRequestFromNavigation")
                        .HasForeignKey("RequestFrom")
                        .HasConstraintName("FK_RXSCHEDULES_REQUEST_FROM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RequestReason1Navigation")
                        .WithMany("RxSchedulesRequestReason1Navigation")
                        .HasForeignKey("RequestReason1")
                        .HasConstraintName("FK_RXSCDLS_RQST_REASON_1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RequestReason2Navigation")
                        .WithMany("RxSchedulesRequestReason2Navigation")
                        .HasForeignKey("RequestReason2")
                        .HasConstraintName("FK_RXSCDLS_RQST_REASON_2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RequestReason3Navigation")
                        .WithMany("RxSchedulesRequestReason3Navigation")
                        .HasForeignKey("RequestReason3")
                        .HasConstraintName("FK_RXSCDLS_RQST_REASON_3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RequestToNavigation")
                        .WithMany("RxSchedulesRequestToNavigation")
                        .HasForeignKey("RequestTo")
                        .HasConstraintName("FK_RXSCHEDULES_REQUEST_TO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "RestartProvider")
                        .WithMany("RxSchedulesRestartProvider")
                        .HasForeignKey("RestartProviderId")
                        .HasConstraintName("FK_RXSCHEDULES_RESTART_PROV_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RestartReasonNavigation")
                        .WithMany("RxSchedulesRestartReasonNavigation")
                        .HasForeignKey("RestartReason")
                        .HasConstraintName("FK_RXSCHEDULES_RESTART_REASON");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SharedCareGpNavigation")
                        .WithMany("RxSchedulesSharedCareGpNavigation")
                        .HasForeignKey("SharedCareGp")
                        .HasConstraintName("FK_RXSCHEDULES_SHARED_CARE_GP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.RxScheduleStationery", "Stationery")
                        .WithMany("RxSchedules")
                        .HasForeignKey("StationeryId")
                        .HasConstraintName("FK_RXSCDLS_STATIONERY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "StopReasonNavigation")
                        .WithMany("RxSchedulesStopReasonNavigation")
                        .HasForeignKey("StopReason")
                        .HasConstraintName("FK_RXSCHEDULES_STOP_REASON");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "VerifyByNavigation")
                        .WithMany("RxSchedulesVerifyByNavigation")
                        .HasForeignKey("VerifyBy")
                        .HasConstraintName("FK_RXSCHEDULES_VERIFY_BY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Savepatient", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Ptnt")
                        .WithMany("Savepatient")
                        .HasForeignKey("PtntId")
                        .HasConstraintName("SAVEPATIENT_FK_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Savepatientlist", "Svpl")
                        .WithMany("Savepatient")
                        .HasForeignKey("SvplId")
                        .HasConstraintName("SAVEPATIENT_FK_SVPL_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Savepatientlist", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdSavedbyNavigation")
                        .WithMany("Savepatientlist")
                        .HasForeignKey("PppuIdSavedby")
                        .HasConstraintName("SAVEPATIENTLIST_FK_SAVEDBY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpMessageIn", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("SccpMessageIn")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_SCCPM_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "SccpmBodyNavigation")
                        .WithMany("SccpMessageIn")
                        .HasForeignKey("SccpmBody")
                        .HasConstraintName("FK_SCCPM_BODY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "SccpmPatientNavigation")
                        .WithMany("SccpMessageIn")
                        .HasForeignKey("SccpmPatient")
                        .HasConstraintName("FK_SCCPM_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpMessageInLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SccpMessageIn", "SmilMessage")
                        .WithMany("SccpMessageInLog")
                        .HasForeignKey("SmilMessageid")
                        .HasConstraintName("FK_SMIL_MESSAGEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "SmilTextNavigation")
                        .WithMany("SccpMessageInLog")
                        .HasForeignKey("SmilText")
                        .HasConstraintName("FK_SMIL_TEXT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpMessageOut", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("SccpMessageOut")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_SCCPMO_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "SccpmBodyNavigation")
                        .WithMany("SccpMessageOut")
                        .HasForeignKey("SccpmBody")
                        .HasConstraintName("FK_SCCPMO_BODY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SccpMessageIn", "SccpmLinked")
                        .WithMany("SccpMessageOut")
                        .HasForeignKey("SccpmLinkedId")
                        .HasConstraintName("FK_SCCP_OUT_LINKED_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SccpmMrcNavigation")
                        .WithMany("SccpMessageOutSccpmMrcNavigation")
                        .HasForeignKey("SccpmMrc")
                        .HasConstraintName("FK_SCCPMO_MRC");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "SccpmPatientNavigation")
                        .WithMany("SccpMessageOut")
                        .HasForeignKey("SccpmPatient")
                        .HasConstraintName("FK_SCCPMO_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SccpmProviderNavigation")
                        .WithMany("SccpMessageOutSccpmProviderNavigation")
                        .HasForeignKey("SccpmProvider")
                        .HasConstraintName("FK_SCCPMO_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "SccpmTransO")
                        .WithMany("SccpMessageOut")
                        .HasForeignKey("SccpmTransOid")
                        .HasConstraintName("FK_SCCPM_TRANS_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpMessageOutLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SccpMessageOut", "SmolMessage")
                        .WithMany("SccpMessageOutLog")
                        .HasForeignKey("SmolMessageid")
                        .HasConstraintName("FK_SMOL_MESSAGEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "SmolTextNavigation")
                        .WithMany("SccpMessageOutLog")
                        .HasForeignKey("SmolText")
                        .HasConstraintName("FK_SMOL_TEXT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SccpUcpAcceptance", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SccpMessageIn", "SccpcpaMessageNavigation")
                        .WithMany("SccpUcpAcceptance")
                        .HasForeignKey("SccpcpaMessage")
                        .HasConstraintName("FK_SCCPCPA_MESSAGE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Schedule", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SchdMacroNavigation")
                        .WithMany("Schedule")
                        .HasForeignKey("SchdMacro")
                        .HasConstraintName("SCHEDULE_FK_SHCD_MACRO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Blobs", "SchdPaperclaimmacro")
                        .WithMany("Schedule")
                        .HasForeignKey("SchdPaperclaimmacroid")
                        .HasConstraintName("SCHEDULE_FK_SCHD_PAPERCLAIMM");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScheduledBilling", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SbCreatedbyNavigation")
                        .WithMany("ScheduledBilling")
                        .HasForeignKey("SbCreatedby")
                        .HasConstraintName("SB_CREATEDBY_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "SbScheduledClaim")
                        .WithMany("ScheduledBillingSbScheduledClaim")
                        .HasForeignKey("SbScheduledClaimId")
                        .HasConstraintName("QT_FK_SCHCLAIM");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "SbScheduledInvoice")
                        .WithMany("ScheduledBillingSbScheduledInvoice")
                        .HasForeignKey("SbScheduledInvoiceId")
                        .HasConstraintName("QT_FK_SCHINVOICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScheduledTask", "SbScheduledTask")
                        .WithMany("ScheduledBilling")
                        .HasForeignKey("SbScheduledTaskId")
                        .HasConstraintName("SCHTSK_FK_SHTASK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScheduledTask", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "ActionedcntcPtnt")
                        .WithMany("ScheduledTaskActionedcntcPtnt")
                        .HasForeignKey("ActionedcntcPtntId")
                        .HasConstraintName("SCHEDULED_TASK_FK_PTNT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Creator")
                        .WithMany("ScheduledTaskCreator")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("SCHEDULED_TASK_FK_CREATOR_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatorPos")
                        .WithMany("ScheduledTaskCreatorPos")
                        .HasForeignKey("CreatorPosId")
                        .HasConstraintName("SHDL_TASK_FK_CREATOR_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Emessage", "EmessagesService")
                        .WithMany("ScheduledTask")
                        .HasForeignKey("EmessagesServiceId")
                        .HasConstraintName("SCHEDULED_TASK_FK_EMESSAGE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "HolderGroupNavigation")
                        .WithMany("ScheduledTask")
                        .HasForeignKey("HolderGroup")
                        .HasConstraintName("SCD_TASK_FK_HOLDER_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Holder")
                        .WithMany("ScheduledTaskHolder")
                        .HasForeignKey("HolderId")
                        .HasConstraintName("SCHEDULED_TASK_FK_HOLDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Macro")
                        .WithMany("ScheduledTaskMacro")
                        .HasForeignKey("MacroId")
                        .HasConstraintName("SCHEDULED_TASK_FK_MACRO_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ModifiedByNavigation")
                        .WithMany("ScheduledTaskModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_SCD_TASK_PPPU_MODIFIED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "Privacy")
                        .WithMany("ScheduledTask")
                        .HasForeignKey("PrivacyId")
                        .HasConstraintName("FK_SCHEDULED_TASK_PRIVACY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("ScheduledTaskPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("SCHEDULED_TASK_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Shcd")
                        .WithMany("ScheduledTaskShcd")
                        .HasForeignKey("ShcdId")
                        .HasConstraintName("SCHEDULED_TASK_FK_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "TaskCase")
                        .WithMany("ScheduledTask")
                        .HasForeignKey("TaskCaseid")
                        .HasConstraintName("FK_SCHEDULED_TASK_CASEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Dictations", "TaskDictation")
                        .WithMany("ScheduledTask")
                        .HasForeignKey("TaskDictationId")
                        .HasConstraintName("SC_TASK_FK_DICTATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "TaskPatient")
                        .WithMany("ScheduledTaskTaskPatient")
                        .HasForeignKey("TaskPatientId")
                        .HasConstraintName("SC_TASK_FK_PATIENT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.TaskTemplates", "Template")
                        .WithMany("ScheduledTask")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("SCD_TASK_FK_TASK_TEMPLATES");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScheduledTaskShare", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScheduledTask", "StsMaster")
                        .WithMany("ScheduledTaskShareStsMaster")
                        .HasForeignKey("StsMasterId")
                        .HasConstraintName("FK_TASKSHARE_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScheduledTask", "StsSlave")
                        .WithMany("ScheduledTaskShareStsSlave")
                        .HasForeignKey("StsSlaveId")
                        .HasConstraintName("FK_TASKSHARE_SLAVE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScheduledTaskTrg", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScheduledTask", "TaskO")
                        .WithMany("ScheduledTaskTrg")
                        .HasForeignKey("TaskOid")
                        .HasConstraintName("SCHEDULED_TASK_TRG_FK_TASK_O");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Scheduleline", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "FormTypeNavigation")
                        .WithMany("Scheduleline")
                        .HasForeignKey("FormType")
                        .HasConstraintName("SCHEDULELINE_FK_FORM_TYPE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Schedule", "Schd")
                        .WithMany("Scheduleline")
                        .HasForeignKey("SchdId")
                        .HasConstraintName("SCHEDULELINE_FK_SCHD_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScriptRefillItems", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ActionedByNavigation")
                        .WithMany("ScriptRefillItems")
                        .HasForeignKey("ActionedBy")
                        .HasConstraintName("FK_SCRIPT_REFILL_ACTIONED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScriptRefillOrder", "Order")
                        .WithMany("ScriptRefillItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_SCRIPT_REFILL_ITEMS_ORDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "Script")
                        .WithMany("ScriptRefillItems")
                        .HasForeignKey("ScriptId")
                        .HasConstraintName("FK_SCRIPT_REFILL_SCRIPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Status")
                        .WithMany("ScriptRefillItems")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_SCRIPT_REFILL_STATUS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ScriptRefillOrder", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "CreatedByNavigation")
                        .WithMany("ScriptRefillOrderCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_SCRIPT_REFILL_CREATED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Encounter")
                        .WithMany("ScriptRefillOrder")
                        .HasForeignKey("EncounterId")
                        .HasConstraintName("FK_SCRIPT_REFILL_ENCOUNTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("ScriptRefillOrder")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_SCRIPT_REFILL_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("ScriptRefillOrderPos")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_SCRIPT_REFILL_POS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("ScriptRefillOrderProvider")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_SCRIPT_REFILL_PROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Supplier")
                        .WithMany("ScriptRefillOrderSupplier")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_SCRIPT_REFILL_SUPPLIER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Securityquestion", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("Securityquestion")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_SECQUESTION_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("Securityquestion")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("FK_SECQUESTION_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServerShutdownLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ShlPppuInitiatingNavigation")
                        .WithMany("ServerShutdownLog")
                        .HasForeignKey("ShlPppuInitiating")
                        .HasConstraintName("FK_SHL_PPPU_INITIATING");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Service", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("SERVICE_FK_MASTER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "SrvcDefaultdiseaseNavigation")
                        .WithMany("ServiceSrvcDefaultdiseaseNavigation")
                        .HasForeignKey("SrvcDefaultdisease")
                        .HasConstraintName("SERVICE_DEFAULTDISEASE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.HelpInfo", "SrvcHelpInfoNavigation")
                        .WithMany("ServiceSrvcHelpInfoNavigation")
                        .HasForeignKey("SrvcHelpInfo")
                        .HasConstraintName("SRVC_FK_HELP_INFO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SrvcLedger")
                        .WithMany("ServiceSrvcLedger")
                        .HasForeignKey("SrvcLedgerId")
                        .HasConstraintName("FK_SERVICE_LEDGER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "SrvcProcedure")
                        .WithMany("ServiceSrvcProcedure")
                        .HasForeignKey("SrvcProcedureid")
                        .HasConstraintName("FK_SERVICE_PROCEDUREID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.HelpInfo", "SrvcProviderInfoNavigation")
                        .WithMany("ServiceSrvcProviderInfoNavigation")
                        .HasForeignKey("SrvcProviderInfo")
                        .HasConstraintName("SRVC_FK_PROVIDER_INFO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SrvcServiceLocationNavigation")
                        .WithMany("ServiceSrvcServiceLocationNavigation")
                        .HasForeignKey("SrvcServiceLocation")
                        .HasConstraintName("SRVC_SERVICE_LOCATION_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockItem", "SrvcStockItemNavigation")
                        .WithMany("Service")
                        .HasForeignKey("SrvcStockItem")
                        .HasConstraintName("SERVICE_STOCK_ITEM_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SrvcStockPos")
                        .WithMany("ServiceSrvcStockPos")
                        .HasForeignKey("SrvcStockPosid")
                        .HasConstraintName("SERVICE_FK_SRVC_STOCK_POSID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SrvcStockProvider")
                        .WithMany("ServiceSrvcStockProvider")
                        .HasForeignKey("SrvcStockProviderid")
                        .HasConstraintName("SERVICE_FK_SRVC_STOCK_PROVID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServiceClinicalActionMap", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "ScamParentService")
                        .WithMany("ServiceClinicalActionMapScamParentService")
                        .HasForeignKey("ScamParentServiceId")
                        .HasConstraintName("FK_SCAM_PARENT_SRVC_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "ScamPos")
                        .WithMany("ServiceClinicalActionMap")
                        .HasForeignKey("ScamPosId")
                        .HasConstraintName("FK_SCAM_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "ScamService")
                        .WithMany("ServiceClinicalActionMapScamService")
                        .HasForeignKey("ScamServiceId")
                        .HasConstraintName("FK_SCAM_SRVC_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Servicediscount", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ServicePrice", "ServicePrice")
                        .WithMany("Servicediscount")
                        .HasForeignKey("ServicePriceId")
                        .HasConstraintName("SERVICEDISCOUNT_FK_PRICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdCodeNavigation")
                        .WithMany("Servicediscount")
                        .HasForeignKey("ShcdIdCode")
                        .HasConstraintName("SERVICEDISCOUNTFOREIGNKEY1");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServiceLedgers", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SlLedgerNavigation")
                        .WithMany("ServiceLedgers")
                        .HasForeignKey("SlLedger")
                        .HasConstraintName("FK_SL_LEDGER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "SlServiceNavigation")
                        .WithMany("ServiceLedgers")
                        .HasForeignKey("SlService")
                        .HasConstraintName("FK_SL_SERVICE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServicePrice", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "GstTaxrate")
                        .WithMany("ServicePriceGstTaxrate")
                        .HasForeignKey("GstTaxrateId")
                        .HasConstraintName("FK_SRVPRICE_GST_TAXRATE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "PstTaxrate")
                        .WithMany("ServicePricePstTaxrate")
                        .HasForeignKey("PstTaxrateId")
                        .HasConstraintName("FK_SRVPRICE_PST_TAXRATE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Srvc")
                        .WithMany("ServicePrice")
                        .HasForeignKey("SrvcId")
                        .HasConstraintName("FK_SERVICE_PRICE_SRVC_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Taxrate")
                        .WithMany("ServicePriceTaxrate")
                        .HasForeignKey("TaxrateId")
                        .HasConstraintName("FK_SERVICE_PRICE_TAXRATE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Servicerate", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ServicePrice", "ServicePrice")
                        .WithMany("Servicerate")
                        .HasForeignKey("ServicePriceId")
                        .HasConstraintName("SERVICERATE_FK_PRICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdCodeNavigation")
                        .WithMany("Servicerate")
                        .HasForeignKey("ShcdIdCode")
                        .HasConstraintName("SERVICERATEFOREIGNKEY1");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Servicesetline", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pppu")
                        .WithMany("Servicesetline")
                        .HasForeignKey("PppuId")
                        .HasConstraintName("SERVICESETLINE_FK_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Shcd")
                        .WithMany("ServicesetlineShcd")
                        .HasForeignKey("ShcdId")
                        .HasConstraintName("SERVICESETLINE_FK_SHCD_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Srvc")
                        .WithMany("ServicesetlineSrvc")
                        .HasForeignKey("SrvcId")
                        .HasConstraintName("SERVICESETLINEFOREIGNKEY1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "SrvcIdLineNavigation")
                        .WithMany("ServicesetlineSrvcIdLineNavigation")
                        .HasForeignKey("SrvcIdLine")
                        .HasConstraintName("SERVICESETLINEFOREIGNKEY2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SslnTaxRate")
                        .WithMany("ServicesetlineSslnTaxRate")
                        .HasForeignKey("SslnTaxRateId")
                        .HasConstraintName("SERVICESETLINE_FK_TAXRATE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ServicesForCase", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "Case")
                        .WithMany("ServicesForCase")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_SERV_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("ServicesForCase")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_SERV_PROVIDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("ServicesForCase")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_SERV_SERVICE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Sessionticket", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Partition", "Partition")
                        .WithMany("Sessionticket")
                        .HasForeignKey("Partitionid")
                        .HasConstraintName("SESSIONTICKET_FK_PARTITIONID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "StCase")
                        .WithMany("Sessionticket")
                        .HasForeignKey("StCaseid")
                        .HasConstraintName("SESSIONTICKET_FK_CASEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.OrgStructure", "StOrgstucture")
                        .WithMany("Sessionticket")
                        .HasForeignKey("StOrgstuctureid")
                        .HasConstraintName("SESSIONTICKET_FK_ORGSTUCTUREID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "StPos")
                        .WithMany("SessionticketStPos")
                        .HasForeignKey("StPosid")
                        .HasConstraintName("SESSIONTICKET_FK_POSID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "StPppu")
                        .WithMany("SessionticketStPppu")
                        .HasForeignKey("StPppuid")
                        .HasConstraintName("SESSIONTICKET_FK_PPPUID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "StPtnt")
                        .WithMany("Sessionticket")
                        .HasForeignKey("StPtntid")
                        .HasConstraintName("SESSIONTICKET_FK_PTNTID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SharedHealthItem", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PcehrDocument", "ShiDocument")
                        .WithMany("SharedHealthItem")
                        .HasForeignKey("ShiDocumentId")
                        .HasConstraintName("FK_SHI_SUMMARY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientrecallvisit", "ShiImmunisation")
                        .WithMany("SharedHealthItem")
                        .HasForeignKey("ShiImmunisationId")
                        .HasConstraintName("FK_SHI_IMMUNISATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRxprescr", "ShiMedication")
                        .WithMany("SharedHealthItem")
                        .HasForeignKey("ShiMedicationId")
                        .HasConstraintName("FK_SHI_MEDICATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patientproblem", "ShiProblem")
                        .WithMany("SharedHealthItem")
                        .HasForeignKey("ShiProblemId")
                        .HasConstraintName("FK_SHI_PROBLEM_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SharingConsentClinic", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("SharingConsentClinicCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("SC_CLN_PART_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("SharingConsentClinicDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("SC_CLN_PART_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SharingConsentClinic", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("SC_CLN_PART_FK_MASTER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PartitionBusiness", "PsccClinicPart")
                        .WithMany("SharingConsentClinic")
                        .HasForeignKey("PsccClinicPartId")
                        .HasConstraintName("FK_CONSENTCLINIC_PARTITION");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PatientSharingConsent", "PsccConsent")
                        .WithMany("SharingConsentClinic")
                        .HasForeignKey("PsccConsentId")
                        .HasConstraintName("FK_CONSENTCLINIC_CONSENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Shortcode", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdParent")
                        .WithMany("InverseShcdParent")
                        .HasForeignKey("ShcdParentid")
                        .HasConstraintName("FK_SHORTCODE_SHCD_PARENTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "ShcdRole")
                        .WithMany("Shortcode")
                        .HasForeignKey("ShcdRoleid")
                        .HasConstraintName("FK_SHORTCODE_SHCD_ROLEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ShortcodeType", "ShcdTypeNavigation")
                        .WithMany("Shortcode")
                        .HasForeignKey("ShcdType")
                        .HasConstraintName("SHORTCODE_FK_SHCD_TYPE");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ShortcodeOutcome", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "Shcd")
                        .WithMany("ShortcodeOutcome")
                        .HasForeignKey("ShcdId")
                        .HasConstraintName("FK_SC_OUTCOME_SHCD_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ShortcodeType", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ShortcodeType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .HasConstraintName("FK_SHORTCODE_TYPE_PARENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SimpleCompoundRolesLinks", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "CompoundO")
                        .WithMany("SimpleCompoundRolesLinksCompoundO")
                        .HasForeignKey("CompoundOid")
                        .HasConstraintName("SMPL_CMPND_RLS_LNK_FK_CMPND");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "SimpleO")
                        .WithMany("SimpleCompoundRolesLinksSimpleO")
                        .HasForeignKey("SimpleOid")
                        .HasConstraintName("SMPL_CMPND_RLS_LNK_FK_SMPL");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Situation", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Situationsfolders", "FolderO")
                        .WithMany("Situation")
                        .HasForeignKey("FolderOid")
                        .HasConstraintName("SIT_SIT_FOLDERS_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Guideline", "StGuideline")
                        .WithMany("Situation")
                        .HasForeignKey("StGuidelineId")
                        .HasConstraintName("ST_GUIDELINE_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SituationComplexFilter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ComplexFilter", "SicfComplexFilter")
                        .WithMany("SituationComplexFilter")
                        .HasForeignKey("SicfComplexFilterId")
                        .HasConstraintName("SICF_COMPLEX_FILTER_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Situation", "SicfSituation")
                        .WithMany("SituationComplexFilter")
                        .HasForeignKey("SicfSituationId")
                        .HasConstraintName("SICF_SITUATION_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SituationCriteria", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "ScConcept")
                        .WithMany("SituationCriteria")
                        .HasForeignKey("ScConceptId")
                        .HasConstraintName("SC_CONCEPT_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPhysunit", "ScDimension")
                        .WithMany("SituationCriteria")
                        .HasForeignKey("ScDimensionId")
                        .HasConstraintName("SC_DIMENSION_ID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Situation", "ScSituation")
                        .WithMany("SituationCriteria")
                        .HasForeignKey("ScSituationId")
                        .HasConstraintName("SC_SITUATION_ID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Situationsfolders", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Guideline", "GuidelinesO")
                        .WithMany("Situationsfolders")
                        .HasForeignKey("GuidelinesOid")
                        .HasConstraintName("SIT_FOLDERS_GUIDELN_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Situationsfolders", "ParentfolderO")
                        .WithMany("InverseParentfolderO")
                        .HasForeignKey("ParentfolderOid")
                        .HasConstraintName("SIT_FOLDERS_REC_FOLDERS_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SourceFile", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("SourceFileCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("SOURCE_FILE_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("SourceFileDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("SOURCE_FILE_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceData", "FileData")
                        .WithMany("SourceFile")
                        .HasForeignKey("FileDataId")
                        .HasConstraintName("SOURCE_FILE_FK_DATA");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFolder", "Folder")
                        .WithMany("SourceFile")
                        .HasForeignKey("FolderId")
                        .HasConstraintName("SOURCE_FILE_FK_FOLDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFile", "Master")
                        .WithMany("InverseMaster")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("SOURCE_FILE_FK_MASTER");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SourceFolder", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "CreatedbyNavigation")
                        .WithMany("SourceFolderCreatedbyNavigation")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("SOURCE_FOLDER_FK_CREATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoPerson", "DeletedbyNavigation")
                        .WithMany("SourceFolderDeletedbyNavigation")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("SOURCE_FOLDER_FK_DELETEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SourceFolder", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("SOURCE_FOLDER_FK_PARENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Sqlstatementlog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SqllPppu")
                        .WithMany("Sqlstatementlog")
                        .HasForeignKey("SqllPppuId")
                        .HasConstraintName("SQLL_PPPU_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Sqlstatement", "SqllSqls")
                        .WithMany("Sqlstatementlog")
                        .HasForeignKey("SqllSqlsId")
                        .HasConstraintName("SQLL_SQLS_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockItem", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SiGroupNavigation")
                        .WithMany("StockItem")
                        .HasForeignKey("SiGroup")
                        .HasConstraintName("STOCK_ITEM_GROUP_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockItem", "SiPackItemNavigation")
                        .WithMany("InverseSiPackItemNavigation")
                        .HasForeignKey("SiPackItem")
                        .HasConstraintName("STOCK_ITEM_PACK_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoRx", "SiRxLinkNavigation")
                        .WithMany("StockItem")
                        .HasForeignKey("SiRxLink")
                        .HasConstraintName("STOCK_ITEM_RX_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SiSupplierNavigation")
                        .WithMany("StockItem")
                        .HasForeignKey("SiSupplier")
                        .HasConstraintName("STOCK_ITEM_SUPPLIER_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockLevel", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Pos")
                        .WithMany("StockLevel")
                        .HasForeignKey("PosId")
                        .HasConstraintName("STOCK_LEVEL_FK_POS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Service")
                        .WithMany("StockLevel")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("STOCK_LEVEL_FK_SERVICE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockLevels", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SvLocationNavigation")
                        .WithMany("StockLevels")
                        .HasForeignKey("SvLocation")
                        .HasConstraintName("STOCK_LEVELS_LOCATION_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockItem", "SvStockItemNavigation")
                        .WithMany("StockLevels")
                        .HasForeignKey("SvStockItem")
                        .HasConstraintName("STOCK_LEVELS_STOCKITEM_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockLocationPos", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "LpLocationNavigation")
                        .WithMany("StockLocationPos")
                        .HasForeignKey("LpLocation")
                        .HasConstraintName("STOCK_LP_LOCATION_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "LpPosNavigation")
                        .WithMany("StockLocationPos")
                        .HasForeignKey("LpPos")
                        .HasConstraintName("STOCK_LP_POS_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.StockLot", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SlLocationNavigation")
                        .WithMany("StockLot")
                        .HasForeignKey("SlLocation")
                        .HasConstraintName("STOCK_LOT_LOCATION_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockItem", "SlStockItemNavigation")
                        .WithMany("StockLot")
                        .HasForeignKey("SlStockItem")
                        .HasConstraintName("STOCK_LOT_STOCKITEM_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SynchronizationGroupLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SynchronizationGroup", "SgrlGroupNavigation")
                        .WithMany("SynchronizationGroupLink")
                        .HasForeignKey("SgrlGroup")
                        .HasConstraintName("FK_SYN_GROUP_LINK_GROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Partition", "SgrlPartitionNavigation")
                        .WithMany("SynchronizationGroupLink")
                        .HasForeignKey("SgrlPartition")
                        .HasConstraintName("FK_SYN_GROUP_LINK_PARTITION");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SynchronizationLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "SlogPatientNavigation")
                        .WithMany("SynchronizationLog")
                        .HasForeignKey("SlogPatient")
                        .HasConstraintName("FK_SYN_LOG_PATIENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SynchronizationMacro", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SmacroCollectingNavigation")
                        .WithMany("SynchronizationMacroSmacroCollectingNavigation")
                        .HasForeignKey("SmacroCollecting")
                        .HasConstraintName("FK_SYN_MACRO_COLLECT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SmacroSynchronizingNavigation")
                        .WithMany("SynchronizationMacroSmacroSynchronizingNavigation")
                        .HasForeignKey("SmacroSynchronizing")
                        .HasConstraintName("FK_SYN_MACRO_SYNCH");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.SyncImportError", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.SyncImport", "ImportNavigation")
                        .WithMany("SyncImportError")
                        .HasForeignKey("Import")
                        .HasConstraintName("SI_ERROR_FK_IMPORT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TaskAuditLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrevHolder")
                        .WithMany("TaskAuditLogPrevHolder")
                        .HasForeignKey("PrevHolderId")
                        .HasConstraintName("FK_TASK_A_LOG_PREV_HOLDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Taskmessage", "Tame")
                        .WithMany("TaskAuditLog")
                        .HasForeignKey("TameId")
                        .HasConstraintName("TASK_AUDIT_LOG_FK_TAME_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ScheduledTask", "Task")
                        .WithMany("TaskAuditLog")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("TASK_AUDIT_LOG_FK_TASK_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "User")
                        .WithMany("TaskAuditLogUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("TASK_AUDIT_LOG_FK_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TaskTemplates", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "TsktCase")
                        .WithMany("TaskTemplates")
                        .HasForeignKey("TsktCaseId")
                        .HasConstraintName("FK_TASK_TEMPLATE_CASE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "TsktHolderGroupNavigation")
                        .WithMany("TaskTemplates")
                        .HasForeignKey("TsktHolderGroup")
                        .HasConstraintName("FK_TASK_TEMPLATE_HOLDERGROUP");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TsktHolder")
                        .WithMany("TaskTemplates")
                        .HasForeignKey("TsktHolderId")
                        .HasConstraintName("FK_TASK_TEMPLATE_HOLDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "TsktPrivacy")
                        .WithMany("TaskTemplates")
                        .HasForeignKey("TsktPrivacyId")
                        .HasConstraintName("FK_TASK_TEMPLATE_PRIVACY");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TeleplanMessages", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactionline", "Invoiceline")
                        .WithMany("TeleplanMessages")
                        .HasForeignKey("InvoicelineId")
                        .HasConstraintName("FK_TELEPLAN_MESS_INVOICE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "ObjReferenceNavigation")
                        .WithMany("TeleplanMessages")
                        .HasForeignKey("ObjReference")
                        .HasConstraintName("FK_TELEPLAN_MESS_CLAIM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.TeleplanMessages", "ParentMessageNavigation")
                        .WithMany("InverseParentMessageNavigation")
                        .HasForeignKey("ParentMessage")
                        .HasConstraintName("FK_TELEPLAN_MESSAGES_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "Payment")
                        .WithMany("TeleplanMessages")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_TELEPLAN_MESS_PAYMENT_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TeleplanRegistration", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.TeleplanMessages", "IncomingMessageNavigation")
                        .WithMany("TeleplanRegistrationIncomingMessageNavigation")
                        .HasForeignKey("IncomingMessage")
                        .HasConstraintName("FK_TEL_REG_MESSAGE_IN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.TeleplanMessages", "OutgoingMessageNavigation")
                        .WithMany("TeleplanRegistrationOutgoingMessageNavigation")
                        .HasForeignKey("OutgoingMessage")
                        .HasConstraintName("FK_TEL_REG_MESSAGE_OUT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.TeleplanRegistration", "OwnerRegNavigation")
                        .WithMany("InverseOwnerRegNavigation")
                        .HasForeignKey("OwnerReg")
                        .HasConstraintName("FK_TELEPLAN_REG_OWNER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.TeleplanRegistration", "ParentRegNavigation")
                        .WithMany("InverseParentRegNavigation")
                        .HasForeignKey("ParentReg")
                        .HasConstraintName("FK_TELEPLAN_REG_PARENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "Patient")
                        .WithMany("TeleplanRegistration")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_TEL_REG_PATIENT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrevProviderNavigation")
                        .WithMany("TeleplanRegistrationPrevProviderNavigation")
                        .HasForeignKey("PrevProvider")
                        .HasConstraintName("FK_TELEPLAN_REG_PREV_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "Provider")
                        .WithMany("TeleplanRegistrationProvider")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_TELEPLAN_REG_PROVIDER_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "RegLocationNavigation")
                        .WithMany("TeleplanRegistration")
                        .HasForeignKey("RegLocation")
                        .HasConstraintName("TELEPLAN_REG_LOCATION_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TermsetTranslation", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "SourceConceptNavigation")
                        .WithMany("TermsetTranslationSourceConceptNavigation")
                        .HasForeignKey("SourceConcept")
                        .HasConstraintName("FK_SOURCE_CONCEPT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "TranslConceptNavigation")
                        .WithMany("TermsetTranslationTranslConceptNavigation")
                        .HasForeignKey("TranslConcept")
                        .HasConstraintName("FK_TRANSL_CONCEPT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Test", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "Concept")
                        .WithMany("TestConcept")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("TEST_FK_CONCEPT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "DepO")
                        .WithMany("TestDepO")
                        .HasForeignKey("DepOid")
                        .HasConstraintName("TEST_FK_DEP_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "FolderO")
                        .WithMany("Test")
                        .HasForeignKey("FolderOid")
                        .HasConstraintName("TEST_FK_FOLDER_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetTerm", "Term")
                        .WithMany("Test")
                        .HasForeignKey("TermId")
                        .HasConstraintName("TEST_FK_TERM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TestCategoryNavigation")
                        .WithMany("TestTestCategoryNavigation")
                        .HasForeignKey("TestCategory")
                        .HasConstraintName("FK_TEST_CATEGORY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TestGroupNavigation")
                        .WithMany("TestTestGroupNavigation")
                        .HasForeignKey("TestGroup")
                        .HasConstraintName("FK_TEST_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TestCounter", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Test", "TcntTestO")
                        .WithMany("TestCounter")
                        .HasForeignKey("TcntTestOid")
                        .HasConstraintName("FK_TEST_COUNTER_TCNT_TEST_OID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TestGrpLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Test", "Child")
                        .WithMany("TestGrpLink")
                        .HasForeignKey("ChildId")
                        .HasConstraintName("TEST_GRP_LINK_FK_CH");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.TestGroup", "Parent")
                        .WithMany("TestGrpLink")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_TESTGRPLINK_GROUP");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TextLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CidOidRef", "OwnerNavigation")
                        .WithMany("TextLinkOwnerNavigation")
                        .HasForeignKey("Owner")
                        .HasConstraintName("TEXTLINK_OWNER_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CidOidRef", "RefToNavigation")
                        .WithMany("TextLinkRefToNavigation")
                        .HasForeignKey("RefTo")
                        .HasConstraintName("TEXTLINK_REFTO_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Timesheet", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.TimesheetPeriod", "TsPeriodNavigation")
                        .WithMany("Timesheet")
                        .HasForeignKey("TsPeriod")
                        .HasConstraintName("TIMESHEET_FK_TS_PERIOD");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TsPppuNavigation")
                        .WithMany("TimesheetTsPppuNavigation")
                        .HasForeignKey("TsPppu")
                        .HasConstraintName("TIMESHEET_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TsProcessedPppuNavigation")
                        .WithMany("TimesheetTsProcessedPppuNavigation")
                        .HasForeignKey("TsProcessedPppu")
                        .HasConstraintName("TIMESHEET_PROCESSED_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TimesheetExpenses", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "TseAppointmentNavigation")
                        .WithMany("TimesheetExpenses")
                        .HasForeignKey("TseAppointment")
                        .HasConstraintName("TIMESHEET_EXPENSES_FK_APPOIN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TseCategoryNavigation")
                        .WithMany("TimesheetExpenses")
                        .HasForeignKey("TseCategory")
                        .HasConstraintName("TIMESHEET_EXPENSES_FK_SHORTC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Transactionaudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.BatchInvoices", "Batch")
                        .WithMany("Transactionaudit")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("TRAD_FK_BATCH");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "Trns")
                        .WithMany("Transactionaudit")
                        .HasForeignKey("TrnsId")
                        .HasConstraintName("TRAD_FK_TRNS");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Transactiondetail", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Priorapproval", "Prap")
                        .WithMany("Transactiondetail")
                        .HasForeignKey("PrapId")
                        .HasConstraintName("TRDT_FOREIGN_PRAP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrdtDescriptioncodeNavigation")
                        .WithMany("Transactiondetail")
                        .HasForeignKey("TrdtDescriptioncode")
                        .HasConstraintName("TRDT_DESCCODE_FK_SHOTCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "Trns")
                        .WithOne("Transactiondetail")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.Transactiondetail", "TrnsId")
                        .HasConstraintName("TRDT_TRNS_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Transactionline", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTrans", "Form")
                        .WithMany("Transactionline")
                        .HasForeignKey("FormId")
                        .HasConstraintName("TRANSLINE_FK_FORM_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "LklsIdAgencyNavigation")
                        .WithMany("Transactionline")
                        .HasForeignKey("LklsIdAgency")
                        .HasConstraintName("TRLN_FK_PATIENT_AGENCY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactionline", "ParentLn")
                        .WithMany("InverseParentLn")
                        .HasForeignKey("ParentLnId")
                        .HasConstraintName("TRANSACTIONLN_FK_PARENT_LN_I");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdServiceproviderNavigation")
                        .WithMany("TransactionlinePppuIdServiceproviderNavigation")
                        .HasForeignKey("PppuIdServiceprovider")
                        .HasConstraintName("CNTC_FOREIGN_SRVCPROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdValidatedbyNavigation")
                        .WithMany("TransactionlinePppuIdValidatedbyNavigation")
                        .HasForeignKey("PppuIdValidatedby")
                        .HasConstraintName("TRNSLN_FK_VALIDATEDBY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Priorapproval", "Prap")
                        .WithMany("Transactionline")
                        .HasForeignKey("PrapId")
                        .HasConstraintName("TRLN_FOREIGN_PRAP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdLedgerNavigation")
                        .WithMany("TransactionlineShcdIdLedgerNavigation")
                        .HasForeignKey("ShcdIdLedger")
                        .HasConstraintName("CNTC_FOREIGN_LEDGER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Service", "Srvc")
                        .WithMany("Transactionline")
                        .HasForeignKey("SrvcId")
                        .HasConstraintName("FK_TRLINE_SRVC_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "TrlnAttendanceNavigation")
                        .WithMany("Transactionline")
                        .HasForeignKey("TrlnAttendance")
                        .HasConstraintName("TRANSACTIONLINE_FK_ATTENDANC");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "TrlnCase")
                        .WithMany("Transactionline")
                        .HasForeignKey("TrlnCaseId")
                        .HasConstraintName("TRLN_FK_BCASE_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrlnChargerateNavigation")
                        .WithMany("TransactionlineTrlnChargerateNavigation")
                        .HasForeignKey("TrlnChargerate")
                        .HasConstraintName("TRANSACTIONLINE_FK_CHARGERAT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "TrlnDscdId1Navigation")
                        .WithMany("TransactionlineTrlnDscdId1Navigation")
                        .HasForeignKey("TrlnDscdId1")
                        .HasConstraintName("TRANSLINE_FK_DSCD_ID_1");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "TrlnDscdId2Navigation")
                        .WithMany("TransactionlineTrlnDscdId2Navigation")
                        .HasForeignKey("TrlnDscdId2")
                        .HasConstraintName("TRANSLINE_FK_DSCD_ID_2");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Diseasecode", "TrlnDscdId3Navigation")
                        .WithMany("TransactionlineTrlnDscdId3Navigation")
                        .HasForeignKey("TrlnDscdId3")
                        .HasConstraintName("TRANSLINE_FK_DSCD_ID_3");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TrlnFacilityNavigation")
                        .WithMany("TransactionlineTrlnFacilityNavigation")
                        .HasForeignKey("TrlnFacility")
                        .HasConstraintName("TRANSLINE_FACILITY_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrlnGstTaxrateNavigation")
                        .WithMany("TransactionlineTrlnGstTaxrateNavigation")
                        .HasForeignKey("TrlnGstTaxrate")
                        .HasConstraintName("FK_TRLN_SHCD_GST_TAXRATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactionline", "TrlnIdDebitlineNavigation")
                        .WithMany("InverseTrlnIdDebitlineNavigation")
                        .HasForeignKey("TrlnIdDebitline")
                        .HasConstraintName("TRLN_ID_DEBITLINE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TrlnInpatientpos")
                        .WithMany("TransactionlineTrlnInpatientpos")
                        .HasForeignKey("TrlnInpatientposid")
                        .HasConstraintName("TRANSLINE_FK_INPATIENTPOSID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrlnLocationNavigation")
                        .WithMany("TransactionlineTrlnLocationNavigation")
                        .HasForeignKey("TrlnLocation")
                        .HasConstraintName("TRANSLINE_LOCATION_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrlnPstTaxrateNavigation")
                        .WithMany("TransactionlineTrlnPstTaxrateNavigation")
                        .HasForeignKey("TrlnPstTaxrate")
                        .HasConstraintName("FK_TRLN_SHCD_PST_TAXRATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "TrlnReferralNavigation")
                        .WithMany("Transactionline")
                        .HasForeignKey("TrlnReferral")
                        .HasConstraintName("TRANSACTIONLINE_FK_REFERRAL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TrlnServiceposNavigation")
                        .WithMany("TransactionlineTrlnServiceposNavigation")
                        .HasForeignKey("TrlnServicepos")
                        .HasConstraintName("TRANSACTIONLINE_FK_SERVICEPO");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrlnStockLocation")
                        .WithMany("TransactionlineTrlnStockLocation")
                        .HasForeignKey("TrlnStockLocationId")
                        .HasConstraintName("FK_TRLN_STOCK_LOCATION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.StockLot", "TrlnStockLot")
                        .WithMany("Transactionline")
                        .HasForeignKey("TrlnStockLotId")
                        .HasConstraintName("FK_TRLN_STOCK_LOT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrlnSubmissioncodeNavigation")
                        .WithMany("TransactionlineTrlnSubmissioncodeNavigation")
                        .HasForeignKey("TrlnSubmissioncode")
                        .HasConstraintName("TRANSLINE_SUBMISSIONCODE_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrlnTaxrateNavigation")
                        .WithMany("TransactionlineTrlnTaxrateNavigation")
                        .HasForeignKey("TrlnTaxrate")
                        .HasConstraintName("TRANSACTIONLINE_FK_TAXRATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "Trns")
                        .WithMany("TransactionlineTrns")
                        .HasForeignKey("TrnsId")
                        .HasConstraintName("TRLN_TRNS_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Transactions", "TrnsIdBulkinvoiceNavigation")
                        .WithMany("TransactionlineTrnsIdBulkinvoiceNavigation")
                        .HasForeignKey("TrnsIdBulkinvoice")
                        .HasConstraintName("TRNSLN_FK_TRNS_ID_BULKINVC");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Transactions", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.BatchInvoices", "Batch")
                        .WithMany("TransactionsBatch")
                        .HasForeignKey("BatchId")
                        .HasConstraintName("TRANSACTIONS_FK_BATCH_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Deposits", "Deposit")
                        .WithMany("Transactions")
                        .HasForeignKey("DepositId")
                        .HasConstraintName("TRANSACTIONS_FK_DEPOSIT_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.BatchInvoices", "Eob")
                        .WithMany("TransactionsEob")
                        .HasForeignKey("EobId")
                        .HasConstraintName("TRANSACTIONS_FK_EOB_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "InvoiceValidatedByNavigation")
                        .WithMany("TransactionsInvoiceValidatedByNavigation")
                        .HasForeignKey("InvoiceValidatedBy")
                        .HasConstraintName("FK_INVOICE_VALIDATED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdIncomeNavigation")
                        .WithMany("TransactionsPppuIdIncomeNavigation")
                        .HasForeignKey("PppuIdIncome")
                        .HasConstraintName("PPPU_ID_INCOME");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPaymentposNavigation")
                        .WithMany("TransactionsPppuIdPaymentposNavigation")
                        .HasForeignKey("PppuIdPaymentpos")
                        .HasConstraintName("TRNS_FK_PPPU_ID_PAYMENTPOS");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPaymentproviderNavigation")
                        .WithMany("TransactionsPppuIdPaymentproviderNavigation")
                        .HasForeignKey("PppuIdPaymentprovider")
                        .HasConstraintName("TRNS_FK_PPPU_ID_PAYMNTPROV");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdServiceNavigation")
                        .WithMany("TransactionsPppuIdServiceNavigation")
                        .HasForeignKey("PppuIdService")
                        .HasConstraintName("TRNS_FK_PPPU_ID_SERVICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Priorapproval", "Prap")
                        .WithMany("Transactions")
                        .HasForeignKey("PrapId")
                        .HasConstraintName("FK_TRANS_PRAP_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdGuarantorNavigation")
                        .WithMany("TransactionsPtntIdGuarantorNavigation")
                        .HasForeignKey("PtntIdGuarantor")
                        .HasConstraintName("FK_TRANSACTIONS_GUARANTOR");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdInsurerNavigation")
                        .WithMany("TransactionsPtntIdInsurerNavigation")
                        .HasForeignKey("PtntIdInsurer")
                        .HasConstraintName("TRNS_FOREIGN_INSURER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "PtntIdServiceNavigation")
                        .WithMany("TransactionsPtntIdServiceNavigation")
                        .HasForeignKey("PtntIdService")
                        .HasConstraintName("FK_TRANSACTIONS_PTNT_SERVICE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SchdIdDiscountNavigation")
                        .WithMany("TransactionsSchdIdDiscountNavigation")
                        .HasForeignKey("SchdIdDiscount")
                        .HasConstraintName("FK_TRANS_DISCOUNT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "SchdIdRateNavigation")
                        .WithMany("TransactionsSchdIdRateNavigation")
                        .HasForeignKey("SchdIdRate")
                        .HasConstraintName("FK_TRANS_RATE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "ShcdIdPlanNavigation")
                        .WithMany("TransactionsShcdIdPlanNavigation")
                        .HasForeignKey("ShcdIdPlan")
                        .HasConstraintName("FK_TRANS_PLAN");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Appointment", "TrnsAttendanceNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("TrnsAttendance")
                        .HasConstraintName("TRANSACTIONS_FK_ATTENDANCE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "TrnsAutocreatedNavigation")
                        .WithMany("TransactionsTrnsAutocreatedNavigation")
                        .HasForeignKey("TrnsAutocreated")
                        .HasConstraintName("FK_TRNS_AUTOCREATED");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "TrnsCase")
                        .WithMany("Transactions")
                        .HasForeignKey("TrnsCaseId")
                        .HasConstraintName("TRANS_FK_BCASE_CASE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.PppuCover", "TrnsCover")
                        .WithMany("Transactions")
                        .HasForeignKey("TrnsCoverid")
                        .HasConstraintName("FK_TRANSCOVER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrnsDescriptioncodeNavigation")
                        .WithMany("TransactionsTrnsDescriptioncodeNavigation")
                        .HasForeignKey("TrnsDescriptioncode")
                        .HasConstraintName("FK_TRANS_DESCRIPTIONCODE");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "TrnsFpayerNavigation")
                        .WithMany("TransactionsTrnsFpayerNavigation")
                        .HasForeignKey("TrnsFpayer")
                        .HasConstraintName("FK_TRANS_PATIENT_FPAYER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "TrnsPayerplanrateNavigation")
                        .WithMany("TransactionsTrnsPayerplanrateNavigation")
                        .HasForeignKey("TrnsPayerplanrate")
                        .HasConstraintName("TRANSACTIONS_FK_PAYERPLANRAT");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "TrnsQuote")
                        .WithMany("TransactionsTrnsQuote")
                        .HasForeignKey("TrnsQuoteId")
                        .HasConstraintName("TRNS_FK_TRNS_QUOTE_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Referral", "TrnsReferralNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("TrnsReferral")
                        .HasConstraintName("TRANSACTIONS_FK_REFERRAL");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "TrnsSecondpayerNavigation")
                        .WithMany("TransactionsTrnsSecondpayerNavigation")
                        .HasForeignKey("TrnsSecondpayer")
                        .HasConstraintName("TRNS_SECONDPAYER_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "TrnsSplitprovNavigation")
                        .WithMany("TransactionsTrnsSplitprovNavigation")
                        .HasForeignKey("TrnsSplitprov")
                        .HasConstraintName("FC_SPLITPROVIDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Submission", "TrnsSubmission")
                        .WithMany("Transactions")
                        .HasForeignKey("TrnsSubmissionId")
                        .HasConstraintName("TRNS_FK_TRNS_SUBMISSION_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Quotes", "TrnsTemplateQuote")
                        .WithMany("TransactionsTrnsTemplateQuote")
                        .HasForeignKey("TrnsTemplateQuoteId")
                        .HasConstraintName("FK_TRNS_TEMPLATE_QUOTE_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TransdataDetails", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ExternalEntity", "ExternalEntity")
                        .WithMany("TransdataDetails")
                        .HasForeignKey("ExternalEntityId")
                        .HasConstraintName("FK_TDD_EXTERNAL_ENTITY_ID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "FolderNavigation")
                        .WithMany("TransdataDetailsFolderNavigation")
                        .HasForeignKey("Folder")
                        .HasConstraintName("TRANSDATA_DET_FK_FOLDER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTransdata", "O")
                        .WithOne("TransdataDetailsO")
                        .HasForeignKey("Profile7ClassLibrary.Models.Profile7.TransdataDetails", "Oid")
                        .HasConstraintName("TRANSDATA_DETAILS_FK_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "SrcProvider")
                        .WithMany("TransdataDetails")
                        .HasForeignKey("SrcProviderid")
                        .HasConstraintName("FK_PPPU_TDD_SRC_PROVIDERID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TravelDisease", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "TrdsDiseaseNavigation")
                        .WithMany("TravelDisease")
                        .HasForeignKey("TrdsDisease")
                        .HasConstraintName("TRDS_DISEASE_CONCEPT_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.TravelRisk", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.CdoTermsetConcept", "TrskDiseaseNavigation")
                        .WithMany("TravelRisk")
                        .HasForeignKey("TrskDisease")
                        .HasConstraintName("TRSK_DISEASE_CONCEPT_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.UserNotifications", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "UnUser")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UnUserId")
                        .HasConstraintName("USER_NOTIFICATIONS_FK_PPPU");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.UserRoleLink", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "RoleO")
                        .WithMany("UserRoleLink")
                        .HasForeignKey("RoleOid")
                        .HasConstraintName("USER_ROLE_LINK_FK_ROLE_OID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "User")
                        .WithMany("UserRoleLink")
                        .HasForeignKey("UserId")
                        .HasConstraintName("USER_ROLE_FK_USER_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.UserSecurityLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "UslCategory")
                        .WithMany("UserSecurityLogUslCategory")
                        .HasForeignKey("UslCategoryid")
                        .HasConstraintName("USL_CATEGORYID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "UslChangedUserNavigation")
                        .WithMany("UserSecurityLogUslChangedUserNavigation")
                        .HasForeignKey("UslChangedUser")
                        .HasConstraintName("FK_USL_CHANGED_USER_CH_USER");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "UslEntry")
                        .WithMany("UserSecurityLogUslEntry")
                        .HasForeignKey("UslEntryid")
                        .HasConstraintName("USL_ENTRYID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "UslPatient")
                        .WithMany("UserSecurityLog")
                        .HasForeignKey("UslPatientid")
                        .HasConstraintName("USL_PATIENTID_FK");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "UslUser")
                        .WithMany("UserSecurityLogUslUser")
                        .HasForeignKey("UslUserid")
                        .HasConstraintName("USL_USERID_FK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.ViewAudit", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ViewAudit", "VaudParentNavigation")
                        .WithMany("InverseVaudParentNavigation")
                        .HasForeignKey("VaudParent")
                        .HasConstraintName("FK_VIEW_AUDIT_PARENT");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.WebServiceSupport", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.WebServiceInterface", "Wsi")
                        .WithMany("WebServiceSupport")
                        .HasForeignKey("WsiId")
                        .HasConstraintName("FK_WEBSERVSUPP_WEBSERVINTF");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Whiteboard", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("WhiteboardPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("WHITEBOARD_FK_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "WhbiAcuityNavigation")
                        .WithMany("WhiteboardWhbiAcuityNavigation")
                        .HasForeignKey("WhbiAcuity")
                        .HasConstraintName("FK_WHBI_ACUITY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Bcase", "WhbiCase")
                        .WithMany("Whiteboard")
                        .HasForeignKey("WhbiCaseid")
                        .HasConstraintName("FK_WHBI_CASEID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "WhbiCreatedpppu")
                        .WithMany("WhiteboardWhbiCreatedpppu")
                        .HasForeignKey("WhbiCreatedpppuid")
                        .HasConstraintName("FK_WHBI_CREATEDPPPUID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "WhbiFrompppugroup")
                        .WithMany("WhiteboardWhbiFrompppugroup")
                        .HasForeignKey("WhbiFrompppugroupid")
                        .HasConstraintName("FK_WHBI_FROMPPPUGROUPID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "WhbiFrompppu")
                        .WithMany("WhiteboardWhbiFrompppu")
                        .HasForeignKey("WhbiFrompppuid")
                        .HasConstraintName("FK_WHBI_FROMPPPUID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "WhbiFromprovider")
                        .WithMany("WhiteboardWhbiFromprovider")
                        .HasForeignKey("WhbiFromproviderid")
                        .HasConstraintName("FK_WHBI_FROMPROVIDERID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "WhbiModifiedpppu")
                        .WithMany("WhiteboardWhbiModifiedpppu")
                        .HasForeignKey("WhbiModifiedpppuid")
                        .HasConstraintName("FK_WHBI_MODIFIEDPPPUID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Patient", "WhbiPatient")
                        .WithMany("Whiteboard")
                        .HasForeignKey("WhbiPatientid")
                        .HasConstraintName("FK_WHBI_PATIENTID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "WhbiPrivacy")
                        .WithMany("Whiteboard")
                        .HasForeignKey("WhbiPrivacyid")
                        .HasConstraintName("FK_WHBI_PRIVACYID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "WhbiReasonNavigation")
                        .WithMany("WhiteboardWhbiReasonNavigation")
                        .HasForeignKey("WhbiReason")
                        .HasConstraintName("FK_WHBI_REASON");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.ProviderGroup", "WhbiTopppugroup")
                        .WithMany("WhiteboardWhbiTopppugroup")
                        .HasForeignKey("WhbiTopppugroupid")
                        .HasConstraintName("FK_WHBI_TOPPPUGROUPID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "WhbiTopppu")
                        .WithMany("WhiteboardWhbiTopppu")
                        .HasForeignKey("WhbiTopppuid")
                        .HasConstraintName("FK_WHBI_TOPPPUID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "WhbiToprovider")
                        .WithMany("WhiteboardWhbiToprovider")
                        .HasForeignKey("WhbiToproviderid")
                        .HasConstraintName("FK_WHBI_TOPROVIDERID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.WhiteboardAuditLog", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PrivacyPppu")
                        .WithMany("WhiteboardAuditLogPrivacyPppu")
                        .HasForeignKey("PrivacyPppuId")
                        .HasConstraintName("FK_WBAL_PRIVACY_PPPU");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "WbalAcuityNavigation")
                        .WithMany("WhiteboardAuditLogWbalAcuityNavigation")
                        .HasForeignKey("WbalAcuity")
                        .HasConstraintName("FK_WBAL_ACUITY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "WbalChangedByNavigation")
                        .WithMany("WhiteboardAuditLogWbalChangedByNavigation")
                        .HasForeignKey("WbalChangedBy")
                        .HasConstraintName("FK_CHANGED_BY");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.AppRole", "WbalPrivacy")
                        .WithMany("WhiteboardAuditLog")
                        .HasForeignKey("WbalPrivacyid")
                        .HasConstraintName("FK_WBAL_PRIVACYID");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Shortcode", "WbalReasonNavigation")
                        .WithMany("WhiteboardAuditLogWbalReasonNavigation")
                        .HasForeignKey("WbalReason")
                        .HasConstraintName("FK_WBAL_REASON");

                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Whiteboard", "WbalWhiteboard")
                        .WithMany("WhiteboardAuditLog")
                        .HasForeignKey("WbalWhiteboardId")
                        .HasConstraintName("FK_WHITEBOARD_ID");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Workstation", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Pppu", "PppuIdPosNavigation")
                        .WithMany("Workstation")
                        .HasForeignKey("PppuIdPos")
                        .HasConstraintName("WRKS_PPPU_FOREIGN");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Workstationprintfont", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Workstation", "Wrks")
                        .WithMany("Workstationprintfont")
                        .HasForeignKey("WrksId")
                        .HasConstraintName("WORKSTATIONPRINTFONT_FK_WORK");
                });

            modelBuilder.Entity("Profile7ClassLibrary.Models.Profile7.Workstationprintreport1", b =>
                {
                    b.HasOne("Profile7ClassLibrary.Models.Profile7.Workstation", "Wrks")
                        .WithMany("Workstationprintreport1")
                        .HasForeignKey("WrksId")
                        .HasConstraintName("WORKSTPRINTREPORT_FK_WORK");
                });
#pragma warning restore 612, 618
        }
    }
}
